{
  "model": "chatgpt",
  "functions": [
    {
      "name": "monitors_health_get",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": [],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Health check API."
    },
    {
      "name": "monitors_performance_get",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": [],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get performance information.\n\nGet perofmration information composed with CPU, memory and resource usage."
    },
    {
      "name": "monitors_system_get",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": [],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get system information.\n\nGet system information with commit and package information.\n\nAs such information is a type of sensitive, response be encrypted."
    },
    {
      "name": "shoppings_admins_authenticate_get",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": [],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get administrator information.\n\nGet {@link IShoppingAdministrator.IInvert administrator} information of\ncurrent {@link IShoppingCustomer customer}.\n\nIf current {@link IShoppingMember member} is not an administrator,\nit throws 403 forbidden exception."
    },
    {
      "name": "shoppings_admins_authenticate_join",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Joining request info",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingAdministrator.IJoin"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingAdministrator.IJoin": {
            "description": "Joining request info.",
            "type": "object",
            "properties": {},
            "required": []
          }
        }
      },
      "description": "Join as an administrator.\n\nJoin as an administrator with {@link IShoppingAdministrator.IJoin joining info}.\n\nThis method is allowed only when the {@link IShoppingCustomer customer} already\nhas joined the {@link IShoppingMember membership}. IF not, he (she) must\naccomplish it before. If not, 403 forbidden exception would be thrown."
    },
    {
      "name": "shoppings_admins_authenticate_login",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Login request info",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingMember.ILogin"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingMember.ILogin": {
            "description": "Login request info.",
            "type": "object",
            "properties": {
              "email": {
                "title": "Email address of member",
                "description": "Email address of member.\n\nIf the member has multiple email addresses, just use one of them.\n\n\n@format email",
                "type": "string"
              },
              "password": {
                "title": "Password of the member account",
                "description": "Password of the member account.",
                "type": "string"
              }
            },
            "required": [
              "email",
              "password"
            ]
          }
        }
      },
      "description": "Login as an administrator.\n\nLogin as an administrator with {@link IShoppingAdministrator.ILogin login info}.\n\nThis method has exactly same effect with\n{@link ShoppingApi.functional.customers.authenticate.login} function, but\nreturned type is a llttle different. The similar function returns\n{@link IShoppingCustomer} type that starting from the customer information, so\nthat you have to access to the administrator info through\n`customer.member.administrator`. In contrast with that, this method returns\n{@link IShoppingAdministrator.IInvert} type that starting from the administrator\ninfo, so that can access to the customer info through `administrator.customer`.\n\nOf course, to use this function, you had to {@link join} as an administrator\nbefore. If not, 403 forbidden exception would be thrown,"
    },
    {
      "name": "shoppings_admins_coupons_create",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Creation info of the coupon",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingCoupon.ICreate"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingCoupon.ICreate": {
            "description": "Creation information of the coupon.\n\n### Description of {@link restriction} property:\n\n> Restriction information.",
            "type": "object",
            "properties": {
              "discount": {
                "title": "Discount information",
                "description": "Discount information.",
                "anyOf": [
                  {
                    "$ref": "#/$defs/IShoppingCouponDiscount.IAmount"
                  },
                  {
                    "$ref": "#/$defs/IShoppingCouponDiscount.IPercent"
                  }
                ]
              },
              "restriction": {
                "title": "Restriction information",
                "$ref": "#/$defs/IShoppingCouponRestriction"
              },
              "criterias": {
                "title": "List of criteria information",
                "description": "List of criteria information.",
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/$defs/IShoppingCouponSectionCriteria.ICreate"
                    },
                    {
                      "$ref": "#/$defs/IShoppingCouponSellerCriteria.ICreate"
                    },
                    {
                      "$ref": "#/$defs/IShoppingCouponSaleCriteria.ICreate"
                    },
                    {
                      "$ref": "#/$defs/IShoppingCouponFunnelCriteria.ICreate"
                    }
                  ]
                }
              },
              "disposable_codes": {
                "title": "Disposable codes for the coupon",
                "description": "Disposable codes for the coupon.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "title": "Representative name of the coupon",
                "description": "Representative name of the coupon.",
                "type": "string"
              },
              "opened_at": {
                "title": "Opening time of the coupon",
                "description": "Opening time of the coupon.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format date-time"
                  }
                ]
              },
              "closed_at": {
                "title": "Closing time of the coupon",
                "description": "Closing time of the coupon.\n\nTickets cannot be issued after this time.\n\nHowever, previously issued tickets can still be used until their\nexpiration date.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format date-time"
                  }
                ]
              }
            },
            "required": [
              "discount",
              "restriction",
              "criterias",
              "disposable_codes",
              "name",
              "opened_at",
              "closed_at"
            ]
          },
          "IShoppingCouponDiscount.IAmount": {
            "description": "Discount information with amount unit.",
            "type": "object",
            "properties": {
              "unit": {
                "title": "Discount unit as amount",
                "description": "Discount unit as amount.\n\nIt means the order price would be discounted by the amount value.",
                "type": "string",
                "enum": [
                  "amount"
                ]
              },
              "value": {
                "title": "Discount value as amount",
                "description": "Discount value as amount.",
                "type": "number"
              },
              "threshold": {
                "title": "Minimum purchase amount for discount",
                "description": "Minimum purchase amount for discount.\n\nWhen setting this value, discount coupons cannot be applied to\norder totals that are less than this value.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Maximum amount available for discount",
                "description": "Maximum amount available for discount.\n\nWhen this value is set, no further discount will be given no\nmatter how much you order. This property would be meaningful\nonly when the {@link multiplicative} is `true`.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number",
                    "description": "@exclusiveMinimum 0"
                  }
                ]
              },
              "multiplicative": {
                "title": "Multiplicative or not",
                "description": "Multiplicative or not.\n\nIf this property is `true`, the discount value would be multiplied\nto the {@link IShoppingCartCommodity.volume} or\n{@link IShoppingOrderGood.volume} value. Also, in that case,\nthe {@link limit} property would be meaningful.",
                "type": "boolean"
              }
            },
            "required": [
              "unit",
              "value",
              "threshold",
              "limit",
              "multiplicative"
            ]
          },
          "IShoppingCouponDiscount.IPercent": {
            "description": "Discount information with percent unit.",
            "type": "object",
            "properties": {
              "unit": {
                "title": "Discount unit as percent",
                "description": "Discount unit as percent.\n\nIt means the order price would be discounted by the percent value.",
                "type": "string",
                "enum": [
                  "percent"
                ]
              },
              "value": {
                "title": "Discount value as percent",
                "description": "Discount value as percent.\n\n\n@minimum 0\n@maximum 100",
                "type": "number"
              },
              "threshold": {
                "title": "Minimum purchase amount for discount",
                "description": "Minimum purchase amount for discount.\n\nWhen setting this value, discount coupons cannot be applied to\norder totals that are less than this value.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Maximum amount available for discount",
                "description": "Maximum amount available for discount.\n\nWhen this value is set, no further discount will be given no\nmatter how much you order.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number",
                    "description": "@exclusiveMinimum 0"
                  }
                ]
              }
            },
            "required": [
              "unit",
              "value",
              "threshold",
              "limit"
            ]
          },
          "IShoppingCouponRestriction": {
            "description": "Restriction information of the coupon.",
            "type": "object",
            "properties": {
              "access": {
                "title": "Access level of coupon",
                "description": "Access level of coupon.\n\n- public: possible to find from public API\n- private: unable to find from public API\n  - arbitrarily assigned by the seller or administrator\n  - issued from one-time link",
                "type": "string",
                "enum": [
                  "public",
                  "private"
                ]
              },
              "exclusive": {
                "title": "Exclusivity or not",
                "description": "Exclusivity or not.\n\nAn exclusive discount coupon refers to a discount coupon that has an\nexclusive relationship with other discount coupons and can only be\nused alone. That is, when an exclusive discount coupon is used, no\nother discount coupon can be used for the same\n{@link IShoppingOrder order} or {@link IShoppingOrderGood good}.\n\nPlease note that this exclusive attribute is a very different concept\nfrom multiplicative, which means whether the same coupon can be\nmultiplied and applied to multiple coupons of the same order, so\nplease do not confuse them.",
                "type": "boolean"
              },
              "volume": {
                "title": "Limited quantity issued",
                "description": "Limited quantity issued.\n\nIf there is a limit to the quantity issued, it becomes impossible\nto issue tickets exceeding this value.\n\nIn other words, the concept of N coupons being issued on\na first-come, first-served basis is created.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "volume_per_citizen": {
                "title": "Limited quantity issued per person",
                "description": "Limited quantity issued per person.\n\nAs a limit to the total amount of issuance per person, it is\ncommon to assign 1 to limit duplicate issuance to the same citizen,\nor to use the NULL value to set no limit.\n\nOf course, by assigning a value of N, the total amount issued\nto the same citizen can be limited.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "expired_in": {
                "title": "Expiration day(s) value",
                "description": "Expiration day(s) value.\n\nThe concept of expiring N days after a discount coupon ticket is issued.\n\nTherefore, customers must use the ticket within N days, if possible,\nfrom the time it is issued.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "expired_at": {
                "title": "Expiration date",
                "description": "Expiration date.\n\nA concept that expires after YYYY-MM-DD after a discount coupon ticket\nis issued.\n\nDouble restrictions are possible with expired_in, of which the one\nwith the shorter expiration date is used.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format date-time"
                  }
                ]
              }
            },
            "required": [
              "access",
              "exclusive",
              "volume",
              "volume_per_citizen",
              "expired_in",
              "expired_at"
            ]
          },
          "IShoppingCouponSectionCriteria.ICreate": {
            "description": "Creation information of the section criteria.",
            "type": "object",
            "properties": {
              "section_codes": {
                "title": "List of target section's {@link IShoppingSection.code}s",
                "description": "List of target section's {@link IShoppingSection.code}s.\n\n\n@minItems 1",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "section"
                ]
              },
              "direction": {
                "type": "string",
                "enum": [
                  "include",
                  "exclude"
                ]
              }
            },
            "required": [
              "section_codes",
              "type",
              "direction"
            ]
          },
          "IShoppingCouponSellerCriteria.ICreate": {
            "description": "Creation information of the seller criteria.",
            "type": "object",
            "properties": {
              "seller_ids": {
                "title": "List of target seller's {@link IShoppingSeller.id}s",
                "description": "List of target seller's {@link IShoppingSeller.id}s.\n\n\n@minItems 1",
                "type": "array",
                "items": {
                  "description": "@format uuid",
                  "type": "string"
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "seller"
                ]
              },
              "direction": {
                "type": "string",
                "enum": [
                  "include",
                  "exclude"
                ]
              }
            },
            "required": [
              "seller_ids",
              "type",
              "direction"
            ]
          },
          "IShoppingCouponSaleCriteria.ICreate": {
            "description": "Creation information of the sale criteria.",
            "type": "object",
            "properties": {
              "sale_ids": {
                "title": "List of target sale's {@link IShoppingSale.id}s",
                "description": "List of target sale's {@link IShoppingSale.id}s.\n\n\n@minItems 1",
                "type": "array",
                "items": {
                  "description": "@format uuid",
                  "type": "string"
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "sale"
                ]
              },
              "direction": {
                "type": "string",
                "enum": [
                  "include",
                  "exclude"
                ]
              }
            },
            "required": [
              "sale_ids",
              "type",
              "direction"
            ]
          },
          "IShoppingCouponFunnelCriteria.ICreate": {
            "description": "Creation information of the funnel criteria.",
            "type": "object",
            "properties": {
              "funnels": {
                "title": "List of target funnels",
                "description": "List of target funnels.\n\n\n@minItems 1",
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/$defs/IShoppingCouponFunnelCriteria.IValueFunnel"
                    },
                    {
                      "$ref": "#/$defs/IShoppingCouponFunnelCriteria.IVariableFunnel"
                    }
                  ]
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "funnel"
                ]
              },
              "direction": {
                "type": "string",
                "enum": [
                  "include",
                  "exclude"
                ]
              }
            },
            "required": [
              "funnels",
              "type",
              "direction"
            ]
          },
          "IShoppingCouponFunnelCriteria.IValueFunnel": {
            "description": "Kind of funnel restriction by a value.",
            "type": "object",
            "properties": {
              "kind": {
                "title": "Kind of funnel restriction",
                "description": "Kind of funnel restriction.",
                "type": "string",
                "enum": [
                  "url",
                  "referrer"
                ]
              },
              "value": {
                "title": "Target value",
                "description": "Target value.",
                "type": "string"
              }
            },
            "required": [
              "kind",
              "value"
            ]
          },
          "IShoppingCouponFunnelCriteria.IVariableFunnel": {
            "description": "Kind of funnel restriction by a variable.",
            "type": "object",
            "properties": {
              "kind": {
                "title": "Kind of funnel restriction",
                "description": "Kind of funnel restriction.",
                "type": "string",
                "enum": [
                  "variable"
                ]
              },
              "key": {
                "title": "Target variable's key",
                "description": "Target variable's key.",
                "type": "string"
              },
              "value": {
                "title": "Target variable's value",
                "description": "Target variable's value.",
                "type": "string"
              }
            },
            "required": [
              "kind",
              "key",
              "value"
            ]
          }
        }
      },
      "description": "Create a new coupon.\n\nCreate a new {@link IShoppingCoupon coupon} with given information.\n\nBy the way, if you are a {@link IShoppingSeller seller}, you have to\nadd include direction's {@link IShoppingCouponSellerCriteria} or\n{@link IShoppingCouponSaleCriteria} condition. This is because only\n{@link IShoppingAdministrator administrators} can create a coupon\nwhich can be used throughout the market. Seller must limit the usage\nrange by his/her {@link IShoppingSale sale(s)}.\n\nOf course, when administrator is planning to make a general coupon\nthat can be used throughout the market, the administrator must\nget agree from the sellers who are going to be affected."
    },
    {
      "name": "shoppings_admins_coupons_index",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Request info of pagination, searching and sorting",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingCoupon.IRequest"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingCoupon.IRequest": {
            "type": "object",
            "properties": {
              "search": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingCoupon.IRequest.ISearch"
                  }
                ]
              },
              "sort": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "-coupon.name",
                        "-coupon.unit",
                        "-coupon.value",
                        "-coupon.created_at",
                        "-coupon.opened_at",
                        "-coupon.closed_at",
                        "+coupon.name",
                        "+coupon.unit",
                        "+coupon.value",
                        "+coupon.created_at",
                        "+coupon.opened_at",
                        "+coupon.closed_at"
                      ]
                    }
                  }
                ]
              },
              "page": {
                "title": "Page number",
                "description": "Page number.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Limitation of records per a page",
                "description": "Limitation of records per a page.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingCoupon.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "name": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            "required": []
          }
        }
      },
      "description": "List up every coupons.\n\nList up every {@link IShoppingCoupon coupons} with pagination.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingCoupon.IRequest.search search condition} in the request\nbody. Also, it is possible to customize sequence order of records by\nconfiguring {@link IShoppingCoupon.IRequest.sort sort condition}.\n\nFor reference, if you are a {@link IShoppingCustomer customer}, then\nonly {@link IShoppingCouponTicket ticketable} coupons would be listed up.\nOtherwise, non-ticketable coupons would also be listed up."
    },
    {
      "name": "shoppings_admins_coupons_at",
      "parameters": {
        "type": "object",
        "properties": {
          "id": {
            "description": " Target coupon's {@link IShoppingCoupon.id }",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a coupon info.\n\nGet a {@link IShoppingCoupon coupon} information.\n\nIf you are a {@link IShoppingCustomer customer}, then only\n{@link IShoppingCouponTicket ticketable} coupons are accessible. Non\nticketable coupons cause 410 gone error. Otherwise you are a\n{@link IShoppingSeller seller} or {@link IShoppingAdministrator administrator},\nnon-ticketable coupons are also accessible."
    },
    {
      "name": "shoppings_admins_coupons_erase",
      "parameters": {
        "type": "object",
        "properties": {
          "id": {
            "description": " Target coupon's {@link IShoppingCoupon.id }",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Erase a coupon.\n\nErase a {@link IShoppingCoupon coupon} with given ID.\n\nFor reference, if there're some {@link IShoppingCouponTicket tickets}\nwhich are already issued from the target coupon, they would not be affected.\nThose tickets are still valid until their expration time."
    },
    {
      "name": "shoppings_admins_deposits_create",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Creation information of deposit metadata",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingDeposit.ICreate"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingDeposit.ICreate": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string"
              },
              "source": {
                "type": "string"
              },
              "direction": {
                "type": "number",
                "enum": [
                  -1,
                  1
                ]
              }
            },
            "required": [
              "code",
              "source",
              "direction"
            ]
          }
        }
      },
      "description": "Create a new deposit metadata.\n\nCreate a new {@link IShoppingDeposit deposit} metadata.\n\nThis action means that adding a new origin reason of deposit's income/outcome.\nOf course, creating a new deposit record does not mean that automatically\nincrease or decrease the {@link IShoppingCustomer customer}'s balance\nfollowing the record's reason why. The logic must be developed manually\nin the backend side."
    },
    {
      "name": "shoppings_admins_deposits_index",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Request info of pagination, searching and sorting",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingDeposit.IRequest"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingDeposit.IRequest": {
            "type": "object",
            "properties": {
              "search": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingDeposit.IRequest.ISearch"
                  }
                ]
              },
              "sort": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "-deposit.source",
                        "-deposit.code",
                        "-deposit.direction",
                        "+deposit.source",
                        "+deposit.code",
                        "+deposit.direction"
                      ]
                    }
                  }
                ]
              },
              "page": {
                "title": "Page number",
                "description": "Page number.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Limitation of records per a page",
                "description": "Limitation of records per a page.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingDeposit.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "source": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "code": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "direction": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number",
                    "enum": [
                      -1,
                      1
                    ]
                  }
                ]
              }
            },
            "required": []
          }
        }
      },
      "description": "Get deposit metadata list.\n\nList up every {@link IShoppingDeposit deposit} metadata information\nwith {@link IPage pagination}.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingDeposit.IRequest.search search condition} in the request body.\nAlso, it is possible to customize sequence order of records by configuring\n{@link IShoppingDeposit.IRequest.sort sort condition}."
    },
    {
      "name": "shoppings_admins_deposits_at",
      "parameters": {
        "type": "object",
        "properties": {
          "id": {
            "description": " Target deposit's {@link IShoppingDeposit.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a deposit metadata.\n\nGet a {@link IShoppingDeposit deposit} metadata information with its ID."
    },
    {
      "name": "shoppings_admins_deposits_erase",
      "parameters": {
        "type": "object",
        "properties": {
          "id": {
            "description": " Target deposit's {@link IShoppingDeposit.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Erase a deposit metadata.\n\nErase a {@link IShoppingDeposit deposit} metadata, so that no more\n{@link IShoppingCustomer customer}'s balance does not be increased or\ndecreased by the deposit's reason why."
    },
    {
      "name": "shoppings_admins_deposits_get",
      "parameters": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          }
        },
        "required": [
          "code"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a deposit metadata by its code.\n\nGet a {@link IShoppingDeposit deposit} metadata information with its code."
    },
    {
      "name": "shoppings_admins_mileages_create",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Creation information of mileage metadata",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingMileage.ICreate"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingMileage.ICreate": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string"
              },
              "source": {
                "type": "string"
              },
              "direction": {
                "type": "number",
                "enum": [
                  -1,
                  1
                ]
              },
              "value": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number"
                  }
                ]
              }
            },
            "required": [
              "code",
              "source",
              "direction",
              "value"
            ]
          }
        }
      },
      "description": "Create a new mileage metadata.\n\nCreate a new {@link IShoppingMileage mileage} metadata.\n\nThis action means that adding a new origin reason of mileage's income/outcome.\nOf course, creating a new mileage record does not mean that automatically\nincrease or decrease the {@link IShoppingCustomer customer}'s balance\nfollowing the record's reason why. The logic must be developed manually\nin the backend side."
    },
    {
      "name": "shoppings_admins_mileages_index",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Request info of pagination, searching and sorting",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingMileage.IRequest"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingMileage.IRequest": {
            "type": "object",
            "properties": {
              "search": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingMileage.IRequest.ISearch"
                  }
                ]
              },
              "sort": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "-mileage.source",
                        "-mileage.code",
                        "-mileage.direction",
                        "+mileage.source",
                        "+mileage.code",
                        "+mileage.direction"
                      ]
                    }
                  }
                ]
              },
              "page": {
                "title": "Page number",
                "description": "Page number.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Limitation of records per a page",
                "description": "Limitation of records per a page.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingMileage.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "source": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "code": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "direction": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number",
                    "enum": [
                      -1,
                      1
                    ]
                  }
                ]
              }
            },
            "required": []
          }
        }
      },
      "description": "Get mileage metadata list.\n\nList up every {@link IShoppingMileage mileage} metadata information\nwith {@link IPage pagination}.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingMileage.IRequest.search search condition} in the request body.\nAlso, it is possible to customize sequence order of records by configuring\n{@link IShoppingMileage.IRequest.sort sort condition}."
    },
    {
      "name": "shoppings_admins_mileages_at",
      "parameters": {
        "type": "object",
        "properties": {
          "id": {
            "description": " Target mileage's {@link IShoppingMileage.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a mileage metadata.\n\nGet a {@link IShoppingMileage mileage} metadata information with its ID."
    },
    {
      "name": "shoppings_admins_mileages_erase",
      "parameters": {
        "type": "object",
        "properties": {
          "id": {
            "description": " Target mileage's {@link IShoppingMileage.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Erase a mileage metadata.\n\nErase a {@link IShoppingMileage mileage} metadata, so that no more\n{@link IShoppingCustomer customer}'s balance does not be increased or\ndecreased by the mileage's reason why."
    },
    {
      "name": "shoppings_admins_mileages_get",
      "parameters": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          }
        },
        "required": [
          "code"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a mileage metadata by its code.\n\nGet a {@link IShoppingMileage mileage} metadata information with its code."
    },
    {
      "name": "shoppings_admins_mileages_donations_create",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Request info of mileage donation",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingMileageDonation.ICreate"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingMileageDonation.ICreate": {
            "type": "object",
            "properties": {
              "citizen_id": {
                "description": "@format uuid",
                "type": "string"
              },
              "value": {
                "type": "number"
              },
              "reason": {
                "type": "string"
              }
            },
            "required": [
              "citizen_id",
              "value",
              "reason"
            ]
          }
        }
      },
      "description": "Donate a mileage to a citizen.\n\nDonate a mileage to a specific {@link IShoppingCitizen citizen} from\ncurrent {@link IShoppingAdministrator administrator}, with detailed\nreason why.\n\nNote that, as donating mileage affects to the citizen's balance and\ncurrent shopping mall's operating profit, administrator must archive\nthe detailed reason why the mileage is donated."
    },
    {
      "name": "shoppings_admins_mileages_donations_index",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Request info of pagination, searching and sorting",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingMileageDonation.IRequest"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingMileageDonation.IRequest": {
            "type": "object",
            "properties": {
              "search": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingMileageDonation.IRequest.ISearch"
                  }
                ]
              },
              "sort": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "-donation.created_at",
                        "-donation.value",
                        "-donation.reason",
                        "+donation.created_at",
                        "+donation.value",
                        "+donation.reason"
                      ]
                    }
                  }
                ]
              },
              "page": {
                "title": "Page number",
                "description": "Page number.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Limitation of records per a page",
                "description": "Limitation of records per a page.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingMileageDonation.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "citizen": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingCitizen.IRequest.ISearch"
                  }
                ]
              },
              "minimum": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number",
                    "description": "@minimum 0"
                  }
                ]
              },
              "maximum": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number",
                    "description": "@minimum 0"
                  }
                ]
              },
              "from": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format date-time"
                  }
                ]
              },
              "to": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format date-time"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingCitizen.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "mobile": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@pattern ^[0-9]*$"
                  }
                ]
              },
              "name": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            "required": []
          }
        }
      },
      "description": "List up every mileage donation histories.\n\nList up every {@link IShoppingMileageDonation mileage donation histories}\nwith {@link IPage pagination}.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingMileageDonation.IRequest.search search condition} in\nthe request body. Also, it is possible to customize sequence order of\nrecords by configuring {@link IShoppingMileageDonation.IRequest.sort sort}."
    },
    {
      "name": "shoppings_admins_mileages_donations_at",
      "parameters": {
        "type": "object",
        "properties": {
          "id": {
            "description": " Target history's {@link IShoppingMileageDonation.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a mileage donation history.\n\nGet a {@link IShoppingMileageDonation mileage donation history} with its ID."
    },
    {
      "name": "shoppings_admins_orders_index",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Request info of pagination, searching and sorting",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingOrder.IRequest"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingOrder.IRequest": {
            "description": "Request of orders with pagination and searching/sorting conditions.",
            "type": "object",
            "properties": {
              "search": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingOrder.IRequest.ISearch"
                  }
                ]
              },
              "sort": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "-order.price",
                        "-order.quantity",
                        "-order.created_at",
                        "-order.publish.paid_at",
                        "+order.price",
                        "+order.quantity",
                        "+order.created_at",
                        "+order.publish.paid_at"
                      ]
                    }
                  }
                ]
              },
              "page": {
                "title": "Page number",
                "description": "Page number.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Limitation of records per a page",
                "description": "Limitation of records per a page.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingOrder.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "min_price": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number"
                  }
                ]
              },
              "max_price": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number"
                  }
                ]
              },
              "paid": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "sale": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingSale.IRequest.ISearch"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingSale.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "show_paused": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "show_suspended": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "only"
                    ]
                  }
                ]
              },
              "title": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "content": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "title_or_content": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "price": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingPrice.ISearch"
                  }
                ]
              },
              "review": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingSaleReview.IInvertSearch"
                  }
                ]
              },
              "section_codes": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                ]
              },
              "channel_category_ids": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                ]
              },
              "tags": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                ]
              },
              "seller": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingSeller.IRequest.ISearch"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingPrice.ISearch": {
            "type": "object",
            "properties": {
              "minimum": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number"
                  }
                ]
              },
              "maximum": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingSaleReview.IInvertSearch": {
            "type": "object",
            "properties": {
              "score": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingSaleReview.IInvertSearch.IScoreRange"
                  }
                ]
              },
              "count": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingSaleReview.IInvertSearch.ICountRange"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingSaleReview.IInvertSearch.IScoreRange": {
            "type": "object",
            "properties": {
              "minimum": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number",
                    "description": "@minimum 0\n@maximum 100"
                  }
                ]
              },
              "maximum": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number",
                    "description": "@minimum 0\n@maximum 100"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingSaleReview.IInvertSearch.ICountRange": {
            "type": "object",
            "properties": {
              "minimum": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "maximum": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingSeller.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "id": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format uuid"
                  }
                ]
              },
              "mobile": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@pattern ^[0-9]*$"
                  }
                ]
              },
              "name": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "email": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format email"
                  }
                ]
              },
              "nickname": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            "required": []
          }
        }
      },
      "description": "List up every orders.\n\nList up every {@link IShoppingOrder orders} with pagination.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingOrder.IRequest.search search condition} in the request\nbody. Also, it is possible to customize sequence order of records by\nconfiguring {@link IShoppingOrder.IRequest.sort sort condition}.\n\nFor reference, if you are a {@link IShoppingCustomer customer}, then\nyou can list up your own orders, and it is not a matter whether the\norder has been {@link IShoppingOrderPublish.paid_at paid} or not.\n\nOtherwise you are a {@link IShoppingSeller seller} or\n{@link IShoppingAdministrator administrator}, then you can list up\nonly paid orders. Also, in the seller case, only related\n{@link IShoppingOrder.goods goods} would be listed up in the order."
    },
    {
      "name": "shoppings_admins_orders_at",
      "parameters": {
        "type": "object",
        "properties": {
          "id": {
            "description": " Target order's {@link IShoppingOrder.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get an order info.\n\nGet a detailed {@link IShoppingOrder order} information.\n\nIf you are not a {@link IShoppingCustomer customer}, then you can't\naccess to the order which has not been\n{@link IShoppingOrderPublish.paid_at paid} yet. In that case,\n404 not found error would be thrown."
    },
    {
      "name": "shoppings_admins_sales_index",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Request info of pagination, searching and sorting",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingSale.IRequest"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingSale.IRequest": {
            "description": "Request of summarized sales with pagination and searching/sorting options.",
            "type": "object",
            "properties": {
              "sort": {
                "title": "Sorting conditions",
                "description": "Sorting conditions.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "-seller.created_at",
                        "-seller.goods.payments.real",
                        "-seller.goods.publish_count",
                        "-seller.reviews.average",
                        "-seller.reviews.count",
                        "-goods.publish_count",
                        "-goods.payments.real",
                        "-reviews.average",
                        "-reviews.count",
                        "-sale.created_at",
                        "-sale.updated_at",
                        "-sale.opened_at",
                        "-sale.closed_at",
                        "-sale.content.title",
                        "-sale.price_range.lowest.real",
                        "-sale.price_range.highest.real",
                        "+seller.created_at",
                        "+seller.goods.payments.real",
                        "+seller.goods.publish_count",
                        "+seller.reviews.average",
                        "+seller.reviews.count",
                        "+goods.publish_count",
                        "+goods.payments.real",
                        "+reviews.average",
                        "+reviews.count",
                        "+sale.created_at",
                        "+sale.updated_at",
                        "+sale.opened_at",
                        "+sale.closed_at",
                        "+sale.content.title",
                        "+sale.price_range.lowest.real",
                        "+sale.price_range.highest.real"
                      ]
                    }
                  }
                ]
              },
              "page": {
                "title": "Page number",
                "description": "Page number.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Limitation of records per a page",
                "description": "Limitation of records per a page.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          }
        }
      },
      "description": "List up every summarized sales.\n\nList up every {@link IShoppingSale.ISummary summarized sales}.\n\nAs you can see, returned sales are summarized, not detailed. It does not\ncontain the SKU (Stock Keeping Unit) information represented by the\n{@link IShoppingSaleUnitOption} and {@link IShoppingSaleUnitStock} types.\nIf you want to get such detailed information of a sale, use\n`GET /shoppings/customers/sales/{id}` operation for each sale.\n\n> If you're an A.I. chatbot, and the user wants to buy or compose\n> {@link IShoppingCartCommodity shopping cart} from a sale, please\n> call the `GET /shoppings/customers/sales/{id}` operation at least once\n> to the target sale to get detailed SKU information about the sale.\n> It needs to be run at least once for the next steps."
    },
    {
      "name": "shoppings_admins_sales_at",
      "parameters": {
        "type": "object",
        "properties": {
          "id": {
            "description": " Target sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a sale with detailed information.\n\nGet a {@link IShoppingSale sale} with detailed information including\nthe SKU (Stock Keeping Unit) information represented by the\n{@link IShoppingSaleUnitOption} and {@link IShoppingSaleUnitStock} types.\n\n> If you're an A.I. chatbot, and the user wants to buy or compose a\n> {@link IShoppingCartCommodity shopping cart} from a sale, please call\n> this operation at least once to the target sale to get detailed SKU\n> information about the sale.\n>\n> It needs to be run at least once for the next steps. In other words,\n> if you A.I. agent has called this operation to a specific sale, you\n> don't need to call this operation again for the same sale.\n>\n> Additionally, please do not summarize the SKU information. Just show\n> the every options and stocks in the sale with detailed information."
    },
    {
      "name": "shoppings_admins_sales_questions_comments_create",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Creation info of the inquiry comment",
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "inquiryId": {
            "description": " Target inquiry's {@link IShoppingSaleInquiry.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingSaleInquiryComment.ICreate"
          }
        },
        "required": [
          "saleId",
          "inquiryId",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingSaleInquiryComment.ICreate": {
            "description": "Creation information of the comment.",
            "type": "object",
            "properties": {
              "format": {
                "title": "Format of body",
                "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`.",
                "type": "string",
                "enum": [
                  "html",
                  "md",
                  "txt"
                ]
              },
              "body": {
                "title": "Content body of comment",
                "description": "Content body of comment.",
                "type": "string"
              },
              "files": {
                "title": "List of attachment files",
                "description": "List of attachment files.",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/IAttachmentFile.ICreate"
                }
              }
            },
            "required": [
              "format",
              "body",
              "files"
            ]
          },
          "IAttachmentFile.ICreate": {
            "type": "object",
            "properties": {
              "name": {
                "title": "File name, except extension",
                "description": "File name, except extension.\n\nIf there's file `.gitignore`, then its name is an empty string.\n\n\n@maxLength 255",
                "type": "string"
              },
              "extension": {
                "title": "Extension",
                "description": "Extension.\n\nPossible to omit like `README` case.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@minLength 1\n@maxLength 8"
                  }
                ]
              },
              "url": {
                "title": "URL path of the real file",
                "description": "URL path of the real file.\n\n\n@format uri\n@contentMediaType image/*",
                "type": "string"
              }
            },
            "required": [
              "name",
              "extension",
              "url"
            ]
          }
        }
      },
      "description": "Create an inquiry comment.\n\nCreate an {@link IShoppingSaleInquiryComment inquiry comment} of a\n{@link IShoppingSaleQuestion question} or {@link IShoppingSaleReview review}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\ncreate an inquiry comment to your own {@link IShoppingSale sale}'s inquiry.\nOtherwise, you can create an inquiry comment to every inquiries of the sales."
    },
    {
      "name": "shoppings_admins_sales_questions_comments_index",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Request info of pagination, searching and sorting",
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "inquiryId": {
            "description": " Belonged inquiry's {@link IShoppingSaleInquiry.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingSaleInquiryComment.IRequest"
          }
        },
        "required": [
          "saleId",
          "inquiryId",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingSaleInquiryComment.IRequest": {
            "description": "Request of the comments with pagination and searching/sorting options.",
            "type": "object",
            "properties": {
              "search": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingSaleInquiryComment.IRequest.ISearch"
                  }
                ]
              },
              "sort": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "-created_at",
                        "+created_at"
                      ]
                    }
                  }
                ]
              },
              "page": {
                "title": "Page number",
                "description": "Page number.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Limitation of records per a page",
                "description": "Limitation of records per a page.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingSaleInquiryComment.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "name": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "nickname": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "body": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            "required": []
          }
        }
      },
      "description": "List up every inquiry comments.\n\nList up every {@link IShoppingSaleInquiryComment inquiry comments} of a\n{@link IShoppingSaleQuestion question} or {@link IShoppingSaleReview review}\nwith {@link IPage pagination}.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingSaleInquiryComment.IRequest.search search condition} in the\nrequest body. Also, it is possible to customize sequence order of records\nby configuring {@link IShoppingSaleInquiryComment.IRequest.sort sort condition}.\n\nBy the way, if you're a {@link IShoppingSeller seller}, you can only access\nto the your own {@link IShoppingSale sale}'s inquiries. Otherwise, you\ncan access to every inquiries of the sales."
    },
    {
      "name": "shoppings_admins_sales_questions_comments_at",
      "parameters": {
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "inquiryId": {
            "description": " Belonged inquiry's {@link IShoppingSaleInquiry.id }\n\n\n@format uuid",
            "type": "string"
          },
          "id": {
            "description": " Target inquiry comment's {@link IShoppingSaleInquiryComment.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "saleId",
          "inquiryId",
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get an inquiry comment info.\n\nGet a detailed {@link IShoppingSaleInquiryComment inquiry comment}\ninformation of a {@link IShoppingSaleQuestion question} or\n{@link IShoppingSaleReview review}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s inquiry comment.\nOtherwise, you can access to every inquiry comments of the sales."
    },
    {
      "name": "shoppings_admins_sales_questions_comments_update",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Update info of the inquiry comment",
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "inquiryId": {
            "description": " Belonged inquiry's {@link IShoppingSaleInquiry.id }\n\n\n@format uuid",
            "type": "string"
          },
          "id": {
            "description": " Target inquiry comment's {@link IShoppingSaleInquiryComment.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingSaleInquiryComment.ICreate"
          }
        },
        "required": [
          "saleId",
          "inquiryId",
          "id",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingSaleInquiryComment.ICreate": {
            "description": "Creation information of the comment.",
            "type": "object",
            "properties": {
              "format": {
                "title": "Format of body",
                "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`.",
                "type": "string",
                "enum": [
                  "html",
                  "md",
                  "txt"
                ]
              },
              "body": {
                "title": "Content body of comment",
                "description": "Content body of comment.",
                "type": "string"
              },
              "files": {
                "title": "List of attachment files",
                "description": "List of attachment files.",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/IAttachmentFile.ICreate"
                }
              }
            },
            "required": [
              "format",
              "body",
              "files"
            ]
          },
          "IAttachmentFile.ICreate": {
            "type": "object",
            "properties": {
              "name": {
                "title": "File name, except extension",
                "description": "File name, except extension.\n\nIf there's file `.gitignore`, then its name is an empty string.\n\n\n@maxLength 255",
                "type": "string"
              },
              "extension": {
                "title": "Extension",
                "description": "Extension.\n\nPossible to omit like `README` case.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@minLength 1\n@maxLength 8"
                  }
                ]
              },
              "url": {
                "title": "URL path of the real file",
                "description": "URL path of the real file.\n\n\n@format uri\n@contentMediaType image/*",
                "type": "string"
              }
            },
            "required": [
              "name",
              "extension",
              "url"
            ]
          }
        }
      },
      "description": "Update an inquiry comment.\n\nUpdate an {@link IShoppingSaleInquiryComment inquiry comment} to a specific\n{@link IShoppingSaleQuestion question} or {@link IShoppingSaleReview review}.\n\nBy the way, as is the general policy of this shopping mall regarding\ncomments, modifying a comment does not actually change the existing content.\nModified content is accumulated and recorded in the existing comment record\nas a new {@link IShoppingSaleInquiryComment.ISnapshot snapshot}. And this\nis made public to everyone, who can read this inquiry comment.\n\nThis is to prevent customers or sellers from modifying their comments and\nmanipulating the circumstances due to the nature of e-commerce, where\ndisputes easily arise. That is, to preserve evidence."
    },
    {
      "name": "shoppings_admins_sales_questions_at",
      "parameters": {
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "id": {
            "description": " Target question's {@link IShoppingSaleQuestion.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "saleId",
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a question info.\n\nGet a detailed {@link IShoppingSaleQuestion question} information of a\n{@link IShoppingSale sale}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s question. Otherwise\nyou are a {@link IShoppingCustomer customer}, you can access to every\nquestions of the sales except the {@link IShoppingSaleQuestion.secret}\nvalue is `false`."
    },
    {
      "name": "shoppings_admins_sales_reviews_comments_create",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Creation info of the inquiry comment",
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "inquiryId": {
            "description": " Target inquiry's {@link IShoppingSaleInquiry.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingSaleInquiryComment.ICreate"
          }
        },
        "required": [
          "saleId",
          "inquiryId",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingSaleInquiryComment.ICreate": {
            "description": "Creation information of the comment.",
            "type": "object",
            "properties": {
              "format": {
                "title": "Format of body",
                "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`.",
                "type": "string",
                "enum": [
                  "html",
                  "md",
                  "txt"
                ]
              },
              "body": {
                "title": "Content body of comment",
                "description": "Content body of comment.",
                "type": "string"
              },
              "files": {
                "title": "List of attachment files",
                "description": "List of attachment files.",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/IAttachmentFile.ICreate"
                }
              }
            },
            "required": [
              "format",
              "body",
              "files"
            ]
          },
          "IAttachmentFile.ICreate": {
            "type": "object",
            "properties": {
              "name": {
                "title": "File name, except extension",
                "description": "File name, except extension.\n\nIf there's file `.gitignore`, then its name is an empty string.\n\n\n@maxLength 255",
                "type": "string"
              },
              "extension": {
                "title": "Extension",
                "description": "Extension.\n\nPossible to omit like `README` case.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@minLength 1\n@maxLength 8"
                  }
                ]
              },
              "url": {
                "title": "URL path of the real file",
                "description": "URL path of the real file.\n\n\n@format uri\n@contentMediaType image/*",
                "type": "string"
              }
            },
            "required": [
              "name",
              "extension",
              "url"
            ]
          }
        }
      },
      "description": "Create an inquiry comment.\n\nCreate an {@link IShoppingSaleInquiryComment inquiry comment} of a\n{@link IShoppingSaleQuestion question} or {@link IShoppingSaleReview review}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\ncreate an inquiry comment to your own {@link IShoppingSale sale}'s inquiry.\nOtherwise, you can create an inquiry comment to every inquiries of the sales."
    },
    {
      "name": "shoppings_admins_sales_reviews_comments_index",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Request info of pagination, searching and sorting",
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "inquiryId": {
            "description": " Belonged inquiry's {@link IShoppingSaleInquiry.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingSaleInquiryComment.IRequest"
          }
        },
        "required": [
          "saleId",
          "inquiryId",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingSaleInquiryComment.IRequest": {
            "description": "Request of the comments with pagination and searching/sorting options.",
            "type": "object",
            "properties": {
              "search": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingSaleInquiryComment.IRequest.ISearch"
                  }
                ]
              },
              "sort": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "-created_at",
                        "+created_at"
                      ]
                    }
                  }
                ]
              },
              "page": {
                "title": "Page number",
                "description": "Page number.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Limitation of records per a page",
                "description": "Limitation of records per a page.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingSaleInquiryComment.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "name": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "nickname": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "body": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            "required": []
          }
        }
      },
      "description": "List up every inquiry comments.\n\nList up every {@link IShoppingSaleInquiryComment inquiry comments} of a\n{@link IShoppingSaleQuestion question} or {@link IShoppingSaleReview review}\nwith {@link IPage pagination}.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingSaleInquiryComment.IRequest.search search condition} in the\nrequest body. Also, it is possible to customize sequence order of records\nby configuring {@link IShoppingSaleInquiryComment.IRequest.sort sort condition}.\n\nBy the way, if you're a {@link IShoppingSeller seller}, you can only access\nto the your own {@link IShoppingSale sale}'s inquiries. Otherwise, you\ncan access to every inquiries of the sales."
    },
    {
      "name": "shoppings_admins_sales_reviews_comments_at",
      "parameters": {
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "inquiryId": {
            "description": " Belonged inquiry's {@link IShoppingSaleInquiry.id }\n\n\n@format uuid",
            "type": "string"
          },
          "id": {
            "description": " Target inquiry comment's {@link IShoppingSaleInquiryComment.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "saleId",
          "inquiryId",
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get an inquiry comment info.\n\nGet a detailed {@link IShoppingSaleInquiryComment inquiry comment}\ninformation of a {@link IShoppingSaleQuestion question} or\n{@link IShoppingSaleReview review}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s inquiry comment.\nOtherwise, you can access to every inquiry comments of the sales."
    },
    {
      "name": "shoppings_admins_sales_reviews_comments_update",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Update info of the inquiry comment",
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "inquiryId": {
            "description": " Belonged inquiry's {@link IShoppingSaleInquiry.id }\n\n\n@format uuid",
            "type": "string"
          },
          "id": {
            "description": " Target inquiry comment's {@link IShoppingSaleInquiryComment.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingSaleInquiryComment.ICreate"
          }
        },
        "required": [
          "saleId",
          "inquiryId",
          "id",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingSaleInquiryComment.ICreate": {
            "description": "Creation information of the comment.",
            "type": "object",
            "properties": {
              "format": {
                "title": "Format of body",
                "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`.",
                "type": "string",
                "enum": [
                  "html",
                  "md",
                  "txt"
                ]
              },
              "body": {
                "title": "Content body of comment",
                "description": "Content body of comment.",
                "type": "string"
              },
              "files": {
                "title": "List of attachment files",
                "description": "List of attachment files.",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/IAttachmentFile.ICreate"
                }
              }
            },
            "required": [
              "format",
              "body",
              "files"
            ]
          },
          "IAttachmentFile.ICreate": {
            "type": "object",
            "properties": {
              "name": {
                "title": "File name, except extension",
                "description": "File name, except extension.\n\nIf there's file `.gitignore`, then its name is an empty string.\n\n\n@maxLength 255",
                "type": "string"
              },
              "extension": {
                "title": "Extension",
                "description": "Extension.\n\nPossible to omit like `README` case.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@minLength 1\n@maxLength 8"
                  }
                ]
              },
              "url": {
                "title": "URL path of the real file",
                "description": "URL path of the real file.\n\n\n@format uri\n@contentMediaType image/*",
                "type": "string"
              }
            },
            "required": [
              "name",
              "extension",
              "url"
            ]
          }
        }
      },
      "description": "Update an inquiry comment.\n\nUpdate an {@link IShoppingSaleInquiryComment inquiry comment} to a specific\n{@link IShoppingSaleQuestion question} or {@link IShoppingSaleReview review}.\n\nBy the way, as is the general policy of this shopping mall regarding\ncomments, modifying a comment does not actually change the existing content.\nModified content is accumulated and recorded in the existing comment record\nas a new {@link IShoppingSaleInquiryComment.ISnapshot snapshot}. And this\nis made public to everyone, who can read this inquiry comment.\n\nThis is to prevent customers or sellers from modifying their comments and\nmanipulating the circumstances due to the nature of e-commerce, where\ndisputes easily arise. That is, to preserve evidence."
    },
    {
      "name": "shoppings_admins_sales_reviews_index",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Request info of pagination, searching and sorting",
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingSaleReview.IRequest"
          }
        },
        "required": [
          "saleId",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingSaleReview.IRequest": {
            "description": "Request of summarized information with pagination searching/sorting options.",
            "type": "object",
            "properties": {
              "search": {
                "title": "Search conditions",
                "description": "Search conditions.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingSaleReview.IRequest.ISearch"
                  }
                ]
              },
              "sort": {
                "title": "Sorting conditions",
                "description": "Sorting conditions.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "-nickname",
                        "-answered_at",
                        "-created_at",
                        "-updated_at",
                        "-title",
                        "-score",
                        "+nickname",
                        "+answered_at",
                        "+created_at",
                        "+updated_at",
                        "+title",
                        "+score"
                      ]
                    }
                  }
                ]
              },
              "page": {
                "title": "Page number",
                "description": "Page number.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Limitation of records per a page",
                "description": "Limitation of records per a page.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingSaleReview.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "name": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "nickname": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "answered": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "title": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "body": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "title_or_body": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "from": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format date-time"
                  }
                ]
              },
              "to": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format date-time"
                  }
                ]
              },
              "minimum": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number",
                    "description": "@minimum 0\n@maximum 100"
                  }
                ]
              },
              "maximum": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number",
                    "description": "@minimum 0\n@maximum 100"
                  }
                ]
              }
            },
            "required": []
          }
        }
      },
      "description": "List up every summarized reviews.\n\nList up every {@link IShoppingSaleReview.ISummary summarized reviews} of a\n{@link IShoppingSale sale}.\n\nAs you can see, returned reviews are summarized, not detailed. If you want\nto get the detailed information of a review, use {@link adridges} function\nor {@link at} function for each article.\n\nAlso, returned review has {@link IShoppingSaleReview.ISummary.answer}\nproperty which means the formal answer from the {@link IShoppingSeller}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s reviews. Otherwise,\nyou can access to every reviews of the sales.\n\nBy the way, if you want, you can limit the result by configuring\n{@link IShoppingSaleReview.IRequest.search search condition} in the\nrequest body. Also, it is possible to customize sequence order of records\nby configuring {@link IShoppingSaleReview.IRequest.sort sort condition}."
    },
    {
      "name": "shoppings_admins_sales_reviews_abridges",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Request info of pagination, searching and sorting",
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingSaleReview.IRequest"
          }
        },
        "required": [
          "saleId",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingSaleReview.IRequest": {
            "description": "Request of summarized information with pagination searching/sorting options.",
            "type": "object",
            "properties": {
              "search": {
                "title": "Search conditions",
                "description": "Search conditions.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingSaleReview.IRequest.ISearch"
                  }
                ]
              },
              "sort": {
                "title": "Sorting conditions",
                "description": "Sorting conditions.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "-nickname",
                        "-answered_at",
                        "-created_at",
                        "-updated_at",
                        "-title",
                        "-score",
                        "+nickname",
                        "+answered_at",
                        "+created_at",
                        "+updated_at",
                        "+title",
                        "+score"
                      ]
                    }
                  }
                ]
              },
              "page": {
                "title": "Page number",
                "description": "Page number.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Limitation of records per a page",
                "description": "Limitation of records per a page.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingSaleReview.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "name": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "nickname": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "answered": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "title": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "body": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "title_or_body": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "from": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format date-time"
                  }
                ]
              },
              "to": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format date-time"
                  }
                ]
              },
              "minimum": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number",
                    "description": "@minimum 0\n@maximum 100"
                  }
                ]
              },
              "maximum": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number",
                    "description": "@minimum 0\n@maximum 100"
                  }
                ]
              }
            },
            "required": []
          }
        }
      },
      "description": "List up every abridged reviews.\n\nList up every {@link IShoppingSaleReview.IAbridge abridged reviews} of\na {@link IShoppingSale sale}.\n\nAs you can see, returned reviews are abridged, not detailed. If you want\nto get the detailed information of a review, use {@link at} function\nfor each article.\n\nAlso, returned review has {@link IShoppingSaleReview.IAridge.answer}\nproperty which means the formal answer from the {@link IShoppingSeller}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s reviews. Otherwise,\nyou can access to every reviews of the sales.\n\nBy the way, if you want, you can limit the result by configuring\n{@link IShoppingSaleReview.IRequest.search search condition} in the\nrequest body. Also, it is possible to customize sequence order of records\nby configuring {@link IShoppingSaleReview.IRequest.sort sort condition}."
    },
    {
      "name": "shoppings_admins_sales_reviews_at",
      "parameters": {
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "id": {
            "description": " Target review's {@link IShoppingSaleReview.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "saleId",
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a review info.\n\nGet a detailed {@link IShoppingSaleReview review} information of a\n{@link IShoppingSale sale}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s review. Otherwise\nyou are a {@link IShoppingCustomer customer}, you can access to every\nreviews of the sales."
    },
    {
      "name": "shoppings_admins_sales_snapshots_index",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Requestion info of pagination",
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Target sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IPage.IRequest"
          }
        },
        "required": [
          "saleId",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IPage.IRequest": {
            "description": "Page request data",
            "type": "object",
            "properties": {
              "page": {
                "title": "Page number",
                "description": "Page number.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Limitation of records per a page",
                "description": "Limitation of records per a page.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          }
        }
      },
      "description": "List up every snapshots.\n\nWhenever {@link IShoppingSeller seller} updates a\n{@link IShoppingSale sale}, the sale record is not updated but a new\n{@link IShoppingSaleSnapshot snapshot} record is created to keep the\nintegrity of the sale history. This API function is for listing up\nsuch snapshot records.\n\nAlso, as you can see from the return type, returned snapshots are\nsummarized, not detailed. If you want to get the detailed information\nof a snapshot, use {@link at} or {@link flipo} function for each snapshot.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s snapshots. Otherwise,\nyou can access to every snapshots of the sales even though the sale has\nbeen closed or suspended."
    },
    {
      "name": "shoppings_admins_sales_snapshots_at",
      "parameters": {
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "id": {
            "description": " Target snapshot's {@link IShoppingSaleSnapshot.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "saleId",
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a snapshot info.\n\nGet a {@link IShoppingSaleSnapshot snapshot} with detailed information.\n\nAs you can see from the return type, returned snapshot does not contain\nthe {@link IShoppingSale sale} info. If you want to get the sale info,\nuse the {@link flip} function instead.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s snapshots. Otherwise,\nyou can access to every snapshots of the sales even though the sale has\nbeen closed or suspended."
    },
    {
      "name": "shoppings_admins_sales_snapshots_flip",
      "parameters": {
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "id": {
            "description": " Target snapshot's {@link IShoppingSaleSnapshot.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "saleId",
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a flipped snapshot info.\n\nGet a {@link IShoppingSale sale} info of a flipped snapshot.\n\nAs you can see from the return type, this function returns the\n{@link IShoppingSale sale} info. By the way, the sale info is not the\nlatest one, but a flipped info in the snapshot side.\n\nAlso, if you're a {@link IShoppingSeller seller}, you can only access to\nthe your own {@link IShoppingSale sale}'s snapshots. Otherwise, you can\naccess to every snapshots of the sales even though the sale has been\nclosed or suspended."
    },
    {
      "name": "shoppings_admins_systematic_channels_categories_create",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Creation info of the category",
        "type": "object",
        "properties": {
          "channelCode": {
            "description": " Belonged channel's {@link IShoppingChannel.code }",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingChannelCategory.ICreate"
          }
        },
        "required": [
          "channelCode",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingChannelCategory.ICreate": {
            "description": "Creation information of the category.",
            "type": "object",
            "properties": {
              "parent_id": {
                "title": "Parent category's ID",
                "description": "Parent category's ID.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format uuid"
                  }
                ]
              },
              "code": {
                "title": "Identifier code of the category",
                "description": "Identifier code of the category.\n\nThe code must be unique in the channel.",
                "type": "string"
              },
              "name": {
                "title": "Representative name of the category",
                "description": "Representative name of the category.\n\nThe name must be unique within the parent category. If no parent exists,\nthen the name must be unique within the channel between no parent\ncategories.",
                "type": "string"
              }
            },
            "required": [
              "parent_id",
              "code",
              "name"
            ]
          }
        }
      },
      "description": "Create a new category.\n\nCreate a new {@link IShoppingChannelCategory category} of a\n{@link IShoppingChannel channel} with given name. If required, it is\npossible to specify the parent category by its ID."
    },
    {
      "name": "shoppings_admins_systematic_channels_categories_index",
      "parameters": {
        "type": "object",
        "properties": {
          "channelCode": {
            "description": " Belonged channel's {@link IShoppingChannel.code }",
            "type": "string"
          }
        },
        "required": [
          "channelCode"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "List up every categories with children records.\n\nList up every {@link IShoppingChannelCategory.IHierarchical categories}\nof a {@link IShoppingChannel channel} with pagination. Returned categories\ncontain children categories, too.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingChannelCategory.IRequest.search search condition} in the\nrequest body. Also, it is possible to customize sequence order of records\nby configuring {@link IShoppingChannelCategory.IRequest.sort sort condition}."
    },
    {
      "name": "shoppings_admins_systematic_channels_categories_at",
      "parameters": {
        "type": "object",
        "properties": {
          "channelCode": {
            "description": " Belonged channel's {@link IShoppingChannel.code }",
            "type": "string"
          },
          "id": {
            "description": " Target category's {@link IShoppingChannelCategory.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "channelCode",
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a category info.\n\nGet a detailed {@link IShoppingChannelCategory category} information.\n\nReturned category contains hierarchical children categories, and also\ncontains the recursive parent categories, too."
    },
    {
      "name": "shoppings_admins_systematic_channels_categories_update",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Update info of the category",
        "type": "object",
        "properties": {
          "channelCode": {
            "description": " Belonged channel's {@link IShoppingChannel.code }",
            "type": "string"
          },
          "id": {
            "description": " Target category's {@link IShoppingChannelCategory.id }",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingChannelCategory.ICreate"
          }
        },
        "required": [
          "channelCode",
          "id",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingChannelCategory.ICreate": {
            "description": "Creation information of the category.",
            "type": "object",
            "properties": {
              "parent_id": {
                "title": "Parent category's ID",
                "description": "Parent category's ID.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format uuid"
                  }
                ]
              },
              "code": {
                "title": "Identifier code of the category",
                "description": "Identifier code of the category.\n\nThe code must be unique in the channel.",
                "type": "string"
              },
              "name": {
                "title": "Representative name of the category",
                "description": "Representative name of the category.\n\nThe name must be unique within the parent category. If no parent exists,\nthen the name must be unique within the channel between no parent\ncategories.",
                "type": "string"
              }
            },
            "required": [
              "parent_id",
              "code",
              "name"
            ]
          }
        }
      },
      "description": "Update a category.\n\nUpdate a {@link IShoppingChannelCategory category}'s name. If required,\nit is possible to change the parent category by its ID. Of course, detaching\nfrom the parent category so that becoming the root category is also possible."
    },
    {
      "name": "shoppings_admins_systematic_channels_categories_merge",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Merge info of the categories",
        "type": "object",
        "properties": {
          "channelCode": {
            "description": " Belonged channel's {@link IShoppingChannel.code }",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IRecordMerge"
          }
        },
        "required": [
          "channelCode",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IRecordMerge": {
            "description": "Record Merge DTO.\n\n`IRecordMerge` is a structure for merging records.\n\nThe `merge` means that merging multiple {@link IRecordMerge.absorbed}\nrecords into {@link IRecordMerge.keep} instead of deleting\n{@link IRecordMerge.absorbed} records.\n\nIf there're some dependent tables of the target `table` having\nunique constraint on foreign key column, such dependent tables\nalso perform the merge process, too.\n\nOf course, if there're another dependent tables under those\ndependents, they also perform the merge process recursively as well.\nSuch recursive merge process still works for self-recursive\n(tree-structured) tables.",
            "type": "object",
            "properties": {
              "keep": {
                "title": "Target record to keep after merging",
                "description": "Target record to keep after merging.\n\nAfter merge process, {@link absorbed} records would be merged into\nthis {@link keep} record.\n\n\n@format uuid",
                "type": "string"
              },
              "absorbed": {
                "title": "To be absorbed to {@link keep} after merging",
                "description": "To be absorbed to {@link keep} after merging.",
                "type": "array",
                "items": {
                  "description": "@format uuid",
                  "type": "string"
                }
              }
            },
            "required": [
              "keep",
              "absorbed"
            ]
          }
        }
      },
      "description": "Merge multiple categories into one.\n\nIn this shopping mall system, it is not possible to delete a\n{@link IShoppingChannelCategory category}, because it is a systematic\nentity affecting to all other core entities like\n{@link IShoppingSale sales}. Instead of deleting, you can merge multiple\ncategories into one.\n\nIf you specify a category to absorb others, then all of other categories\nwill be merged into the specified one. Also, subsidiary entities of\ncategories also be merged and their references also be merged cascadingly."
    },
    {
      "name": "shoppings_admins_systematic_channels_categories_invert",
      "parameters": {
        "type": "object",
        "properties": {
          "channelCode": {
            "description": " Belonged channel's {@link IShoppingChannel.code }",
            "type": "string"
          },
          "id": {
            "description": " Target category's {@link IShoppingChannelCategory.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "channelCode",
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a category info of inverted.\n\nGet a inverted {@link IShoppingChannelCategory.IInvert category} information.\n\nReturned category contains the recursive parent categories, but not contains\nthe hierarchical children categories."
    },
    {
      "name": "shoppings_admins_systematic_channels_create",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Creation info of the channel",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingChannel.ICreate"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingChannel.ICreate": {
            "description": "Creation information of the channel.",
            "type": "object",
            "properties": {
              "code": {
                "title": "Identifier code",
                "description": "Identifier code.",
                "type": "string"
              },
              "name": {
                "title": "Name of the channel",
                "description": "Name of the channel.",
                "type": "string"
              }
            },
            "required": [
              "code",
              "name"
            ]
          }
        }
      },
      "description": "Create a new channel.\n\nCreate a new {@link IShoppingChannel channel} with given code and name.\n\nAs channel means an individual market,\n{@link IShoppingAdministrator administrator} should perform this action\nonly when a new application being registered."
    },
    {
      "name": "shoppings_admins_systematic_channels_index",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Request info of pagination, searching and sorting",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingChannel.IRequest"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingChannel.IRequest": {
            "description": "Request of the channels with pagination and searching/sorting options.",
            "type": "object",
            "properties": {
              "search": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingChannel.IRequest.ISearch"
                  }
                ]
              },
              "sort": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "-channel.code",
                        "-channel.name",
                        "-channel.created_at",
                        "+channel.code",
                        "+channel.name",
                        "+channel.created_at"
                      ]
                    }
                  }
                ]
              },
              "page": {
                "title": "Page number",
                "description": "Page number.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Limitation of records per a page",
                "description": "Limitation of records per a page.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingChannel.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "code": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "name": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            "required": []
          }
        }
      },
      "description": "List up every channels.\n\nList up every {@link IShoppingChannel channels} with pagination.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingChannel.IRequest.search search condition} in the request\nbody. Also, it is possible to customize sequence order of records by\nconfiguring {@link IShoppingChannel.IRequest.sort sort condition}."
    },
    {
      "name": "shoppings_admins_systematic_channels_at",
      "parameters": {
        "type": "object",
        "properties": {
          "id": {
            "description": " Target channel's {@link IShoppingChannel.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a channel info.\n\nGet a detailed {@link IShoppingChannel.IHierarchical channel} information.\n\nReturned channel instance also contains the nested\n{@link IShoppingChannelCategory.IHierarchical hierarchical category}\ninformation."
    },
    {
      "name": "shoppings_admins_systematic_channels_update",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Update info of the channel",
        "type": "object",
        "properties": {
          "id": {
            "description": " Target channel's {@link IShoppingChannel.code }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingChannel.IUpdate"
          }
        },
        "required": [
          "id",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingChannel.IUpdate": {
            "description": "Updating information of the channel.",
            "type": "object",
            "properties": {
              "name": {
                "title": "Name of the channel",
                "description": "Name of the channel.",
                "type": "string"
              }
            },
            "required": [
              "name"
            ]
          }
        }
      },
      "description": "Update a channel.\n\nUpdate a {@link IShoppingChannel channel}'s name.\n\nNote that, it is not possible to change the channel's code. If you want to\nto do it forcibly, then {@link create} new one and {@link merge} with it."
    },
    {
      "name": "shoppings_admins_systematic_channels_merge",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Request info of the merge",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IRecordMerge"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IRecordMerge": {
            "description": "Record Merge DTO.\n\n`IRecordMerge` is a structure for merging records.\n\nThe `merge` means that merging multiple {@link IRecordMerge.absorbed}\nrecords into {@link IRecordMerge.keep} instead of deleting\n{@link IRecordMerge.absorbed} records.\n\nIf there're some dependent tables of the target `table` having\nunique constraint on foreign key column, such dependent tables\nalso perform the merge process, too.\n\nOf course, if there're another dependent tables under those\ndependents, they also perform the merge process recursively as well.\nSuch recursive merge process still works for self-recursive\n(tree-structured) tables.",
            "type": "object",
            "properties": {
              "keep": {
                "title": "Target record to keep after merging",
                "description": "Target record to keep after merging.\n\nAfter merge process, {@link absorbed} records would be merged into\nthis {@link keep} record.\n\n\n@format uuid",
                "type": "string"
              },
              "absorbed": {
                "title": "To be absorbed to {@link keep} after merging",
                "description": "To be absorbed to {@link keep} after merging.",
                "type": "array",
                "items": {
                  "description": "@format uuid",
                  "type": "string"
                }
              }
            },
            "required": [
              "keep",
              "absorbed"
            ]
          }
        }
      },
      "description": "Merge multiple channels into one.\n\nIn this shopping mall system, it is not possible to delete a\n{@link IShoppingChannel channel}, because it is a systematic entity\naffecting to all other core entities like customers, members and\nsales. Instead of deleting, you can merge multiple channels into one.\n\nIf you specify a channel to absorb others, then all of other channels\nwill be merged into the specified one. Also, subsidiary entities of\nchannels also be merged and their references also be merged cascadingly."
    },
    {
      "name": "shoppings_admins_systematic_channels_hierarchical",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Request info of pagination, searching and sorting",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingChannel.IRequest"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingChannel.IRequest": {
            "description": "Request of the channels with pagination and searching/sorting options.",
            "type": "object",
            "properties": {
              "search": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingChannel.IRequest.ISearch"
                  }
                ]
              },
              "sort": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "-channel.code",
                        "-channel.name",
                        "-channel.created_at",
                        "+channel.code",
                        "+channel.name",
                        "+channel.created_at"
                      ]
                    }
                  }
                ]
              },
              "page": {
                "title": "Page number",
                "description": "Page number.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Limitation of records per a page",
                "description": "Limitation of records per a page.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingChannel.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "code": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "name": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            "required": []
          }
        }
      },
      "description": "List up every channels with nested categories.\n\nList up every {@link IShoppingChannel.IHierarchical channels} with\n{@link IPage pagination}. Returned channels contain nested hierarchical\n{@link IShoppingChannelCategory.IHierarchical categories}.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingChannel.IRequest.search search condition} in the request\nbody. Also, it is possible to customize sequence order of records by\nconfiguring {@link IShoppingChannel.IRequest.sort sort condition}."
    },
    {
      "name": "shoppings_admins_systematic_channels_get",
      "parameters": {
        "type": "object",
        "properties": {
          "code": {
            "description": " Target channel's {@link IShoppingChannel.code }",
            "type": "string"
          }
        },
        "required": [
          "code"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a channel info by its code.\n\nGet a detailed {@link IShoppingChannel.IHierarchical channel} information\nby its code.\n\nReturned channel instance also contains the nested\n{@link IShoppingChannelCategory.IHierarchical hierarchical category}\ninformation."
    },
    {
      "name": "shoppings_admins_systematic_sections_create",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Creation info of the section",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingSection.ICreate"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingSection.ICreate": {
            "description": "Creation information of the section.",
            "type": "object",
            "properties": {
              "code": {
                "title": "Identifier code",
                "description": "Identifier code.",
                "type": "string"
              },
              "name": {
                "title": "Representative name of the section",
                "description": "Representative name of the section.",
                "type": "string"
              }
            },
            "required": [
              "code",
              "name"
            ]
          }
        }
      },
      "description": "Create a new section.\n\nCreate a new {@link IShoppingSection section} with given code and name.\n\nAs section means a spatial unit of a market that handling different type\nof products with other section, {@link IShoppingAdministrator administrator}\nshould perform this action only when a new section being required."
    },
    {
      "name": "shoppings_admins_systematic_sections_index",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Request info of pagination, searching and sorting",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingSection.IRequest"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingSection.IRequest": {
            "description": "Request of the sections with pagination and searching/sorting options.",
            "type": "object",
            "properties": {
              "search": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingSection.IRequest.ISearch"
                  }
                ]
              },
              "sort": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "-section.code",
                        "-section.name",
                        "-section.created_at",
                        "+section.code",
                        "+section.name",
                        "+section.created_at"
                      ]
                    }
                  }
                ]
              },
              "page": {
                "title": "Page number",
                "description": "Page number.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Limitation of records per a page",
                "description": "Limitation of records per a page.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingSection.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "code": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "name": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            "required": []
          }
        }
      },
      "description": "List up every sections.\n\nList up every {@link IShoppingSection sections} with pagination.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingSection.IRequest.search search condition} in the request\nbody. Also, it is possible to customize sequence order of records by\nconfiguring {@link IShoppingSection.IRequest.sort sort condition}."
    },
    {
      "name": "shoppings_admins_systematic_sections_at",
      "parameters": {
        "type": "object",
        "properties": {
          "id": {
            "description": " Target section's {@link IShoppingSection.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a section info.\n\nGet a detailed {@link IShoppingSection section} information."
    },
    {
      "name": "shoppings_admins_systematic_sections_update",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Update info of the section",
        "type": "object",
        "properties": {
          "id": {
            "description": " Target section's {@link IShoppingSection.code }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingSection.IUpdate"
          }
        },
        "required": [
          "id",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingSection.IUpdate": {
            "description": "Updating information of the section.",
            "type": "object",
            "properties": {
              "name": {
                "title": "Representative name of the section",
                "description": "Representative name of the section.",
                "type": "string"
              }
            },
            "required": [
              "name"
            ]
          }
        }
      },
      "description": "Update a section.\n\nUpdate a {@link IShoppingSection section}'s name.\n\nNote that, it is not possible to change the section's code. If you want to\nto do it forcibly, then {@link create} new one and {@link merge} with it."
    },
    {
      "name": "shoppings_admins_systematic_sections_merge",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> input Request info of the merge",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IRecordMerge"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IRecordMerge": {
            "description": "Record Merge DTO.\n\n`IRecordMerge` is a structure for merging records.\n\nThe `merge` means that merging multiple {@link IRecordMerge.absorbed}\nrecords into {@link IRecordMerge.keep} instead of deleting\n{@link IRecordMerge.absorbed} records.\n\nIf there're some dependent tables of the target `table` having\nunique constraint on foreign key column, such dependent tables\nalso perform the merge process, too.\n\nOf course, if there're another dependent tables under those\ndependents, they also perform the merge process recursively as well.\nSuch recursive merge process still works for self-recursive\n(tree-structured) tables.",
            "type": "object",
            "properties": {
              "keep": {
                "title": "Target record to keep after merging",
                "description": "Target record to keep after merging.\n\nAfter merge process, {@link absorbed} records would be merged into\nthis {@link keep} record.\n\n\n@format uuid",
                "type": "string"
              },
              "absorbed": {
                "title": "To be absorbed to {@link keep} after merging",
                "description": "To be absorbed to {@link keep} after merging.",
                "type": "array",
                "items": {
                  "description": "@format uuid",
                  "type": "string"
                }
              }
            },
            "required": [
              "keep",
              "absorbed"
            ]
          }
        }
      },
      "description": "Merge multiple sections into one.\n\nIn this shopping mall system, it is not possible to delete a\n{@link IShoppingSection section}, because it is a systematic entity\naffecting to all other core entities like {@link IShoppingSale sales}.\nInstead of deleting, you can merge multiple sections into one.\n\nIf you specify a section to absorb others, then all of other sections\nwill be merged into the specified one. Also, subsidiary entities of\nsections also be merged and their references also be merged cascadingly."
    },
    {
      "name": "shoppings_admins_systematic_sections_get",
      "parameters": {
        "type": "object",
        "properties": {
          "code": {
            "description": " Target section's {@link IShoppingSection.code }",
            "type": "string"
          }
        },
        "required": [
          "code"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a section info by its code.\n\nGet a detailed {@link IShoppingSection section} information by its code."
    },
    {
      "name": "shoppings_customers_authenticate_refresh",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Refresh token.",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingCustomer.IRefresh"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingCustomer.IRefresh": {
            "type": "object",
            "properties": {
              "value": {
                "type": "string"
              }
            },
            "required": [
              "value"
            ]
          }
        }
      },
      "description": "Refresh the authentication token.\n\nCreate a new {@link IShoppingCustomer.IToken.access access token} of a\n{@link IShoppingCustomer customer} with the pre-issued\n{@link IShoppingCustomer.IToken.refresh refresh} token.\n\nNote that, this function is available until the\n{@link IShoppingCustomer.IToken.refreshable_until} value."
    },
    {
      "name": "shoppings_customers_authenticate_get",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": [],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get current customer info.\n\nGet current {@link IShoppingCustomer customer} information from the\n{@link IShoppingCustomer.IToken.access access token}."
    },
    {
      "name": "shoppings_customers_authenticate_join",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Join information of the member",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingMember.IJoin"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingMember.IJoin": {
            "description": "Joining request info.",
            "type": "object",
            "properties": {
              "nickname": {
                "title": "Nickname that uniquely identifies the member",
                "description": "Nickname that uniquely identifies the member.",
                "type": "string"
              },
              "citizen": {
                "title": "Citizen information",
                "description": "Citizen information.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingCitizen.ICreate"
                  }
                ]
              },
              "email": {
                "title": "Email address of member",
                "description": "Email address of member.\n\nIf the member has multiple email addresses, just use one of them.\n\n\n@format email",
                "type": "string"
              },
              "password": {
                "title": "Password of the member account",
                "description": "Password of the member account.",
                "type": "string"
              }
            },
            "required": [
              "nickname",
              "citizen",
              "email",
              "password"
            ]
          },
          "IShoppingCitizen.ICreate": {
            "description": "Creation information of citizen verification.",
            "type": "object",
            "properties": {
              "mobile": {
                "title": "Mobile number",
                "description": "Mobile number.\n\n\n@pattern ^[0-9]*$",
                "x-wrtn-payment-order-mobile": true,
                "type": "string"
              },
              "name": {
                "title": "Real name, or equivalent nickname",
                "description": "Real name, or equivalent nickname.",
                "x-wrtn-payment-order-citizen": true,
                "type": "string"
              }
            },
            "required": [
              "mobile",
              "name"
            ]
          }
        }
      },
      "description": "Join membership.\n\n{@link IShoppingCustomer Customer} signs up for\n{@link IShoppingMember membership} of current shopping mall system.\n\nIf you've performed the {@link IShoppingCitizen citizenship}\n{@link activate activation} too, then you can skip the {@link activate}\nfunction calling everytime you log in from now on. Also, if the person had\n{@link IShoppingOrder purchased} with {@link activate} and {@link external}\nfunction calling, you can also access to the order history too. In other\nwords, activity details prior to membership registration can also be\naccessed with continuity.\n\nFor reference, as described in the {@link create} function, before calling\nthis `join` function, you must first create a customer record and token by\ncalling the {@link create} function."
    },
    {
      "name": "shoppings_customers_authenticate_login",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Login request info",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingMember.ILogin"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingMember.ILogin": {
            "description": "Login request info.",
            "type": "object",
            "properties": {
              "email": {
                "title": "Email address of member",
                "description": "Email address of member.\n\nIf the member has multiple email addresses, just use one of them.\n\n\n@format email",
                "type": "string"
              },
              "password": {
                "title": "Password of the member account",
                "description": "Password of the member account.",
                "type": "string"
              }
            },
            "required": [
              "email",
              "password"
            ]
          }
        }
      },
      "description": "Membership login.\n\n{@link IShoppingCustomer Customer} logs in with his/her\n{@link IShoppingMember membership} account with the email and password.\n\nIf the {@link IShoppingMember member} has previously performed\n{@link activate citizenship activation}, the {@link IShoppingCustomer.citizen}\nvalue would be filled in accordingly. And if the member has also signed up\nas an {@link IShoppingAdministrator administrator} or\n{@link IShoppingSeller seller}, the relevant information is also entered\naccordingly.\n\nFor reference, as described in the {@link create} function, before calling\nthis `login` function, you must first create a customer record and token by\ncalling the {@link create} function."
    },
    {
      "name": "shoppings_customers_authenticate_activate",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Activation information of the citizenship",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingCitizen.ICreate"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingCitizen.ICreate": {
            "description": "Creation information of citizen verification.",
            "type": "object",
            "properties": {
              "mobile": {
                "title": "Mobile number",
                "description": "Mobile number.\n\n\n@pattern ^[0-9]*$",
                "x-wrtn-payment-order-mobile": true,
                "type": "string"
              },
              "name": {
                "title": "Real name, or equivalent nickname",
                "description": "Real name, or equivalent nickname.",
                "x-wrtn-payment-order-citizen": true,
                "type": "string"
              }
            },
            "required": [
              "mobile",
              "name"
            ]
          }
        }
      },
      "description": "Activate citizenship.\n\n{@link IShoppingCustomer Customer} activates his/her\n{@link IShoppingCitizen citizenship} with mobile number and real name.\n\nIf the custommer already {@link join joined} to the\n{@link IShoppingMember membership}, then you can skip the citizenship\n{@link activation} function calling everytime you log in from now on.\nOf course, such story would be same to the {@link external} function, too.\n\nFor reference, as described in the {@link create} function, before calling\nthis `activate` function, you must first create a customer record and token\nby calling the {@link create} function."
    },
    {
      "name": "shoppings_customers_authenticate_external",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Enroll information of the external user",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingExternalUser.ICreate"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingExternalUser.ICreate": {
            "description": "Creation information of external user.",
            "type": "object",
            "properties": {
              "citizen": {
                "title": "Citizen activation info",
                "description": "Citizen activation info.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingCitizen.ICreate"
                  }
                ]
              },
              "application": {
                "title": "Identifier code of the external service",
                "description": "Identifier code of the external service.\n\nIt can be same with {@link IShoppingChannel.code} in common.",
                "type": "string"
              },
              "uid": {
                "title": "Identifier key of external user from the external system",
                "description": "Identifier key of external user from the external system.",
                "type": "string"
              },
              "nickname": {
                "title": "Nickname of external user in the external system",
                "description": "Nickname of external user in the external system.",
                "type": "string"
              },
              "password": {
                "title": "Password of external user from the external system",
                "description": "Password of external user from the external system.\n\nThis is a password issued to the user by an external service,\nand is by no means the actual user password. However, for\n{@link IShoppingCustomer customers} who entered the same\napplication and code as the current external system user, this is\nto determine whether to view this as a correct external system\nuser or a violation.",
                "type": "string"
              },
              "data": {
                "description": "Additional information about external user from the external\nsystem."
              }
            },
            "required": [
              "citizen",
              "application",
              "uid",
              "nickname",
              "password",
              "data"
            ]
          },
          "IShoppingCitizen.ICreate": {
            "description": "Creation information of citizen verification.",
            "type": "object",
            "properties": {
              "mobile": {
                "title": "Mobile number",
                "description": "Mobile number.\n\n\n@pattern ^[0-9]*$",
                "x-wrtn-payment-order-mobile": true,
                "type": "string"
              },
              "name": {
                "title": "Real name, or equivalent nickname",
                "description": "Real name, or equivalent nickname.",
                "x-wrtn-payment-order-citizen": true,
                "type": "string"
              }
            },
            "required": [
              "mobile",
              "name"
            ]
          }
        }
      },
      "description": "Enroll external user info.\n\n{@link IShoppingCustomer Customer} enrolls his/her\n{@link IShoppingExternalUser external user} information from other service.\n\nIt has similar effect with the {@link join membership joining} function,\nso that if you've performed the {@link IShoppingCitizen citizenship}\n{@link activate activation} too, then you can skip the {@link activate}\nfunction calling everytime you call this `external` function with same\ninfo from now on. Also, if the person had\n{@link IShoppingOrder purchased} with {@link activate} and {@link join}\nfunction calling, you can also access to the order history too. In other\nwords, activity details prior to external server registration can also be\naccessed with continuity.\n\nFor reference, as described in the {@link create} function, before calling\nthis `external` function, you must first create a customer record and token\nby calling the {@link create} function."
    },
    {
      "name": "shoppings_customers_authenticate_password_change",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> New password and current password",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingMember.IPasswordChange"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingMember.IPasswordChange": {
            "description": "Request info of password change.",
            "type": "object",
            "properties": {
              "oldbie": {
                "title": "Current password",
                "description": "Current password.",
                "type": "string"
              },
              "newbie": {
                "title": "The new password to change",
                "description": "The new password to change.",
                "type": "string"
              }
            },
            "required": [
              "oldbie",
              "newbie"
            ]
          }
        }
      },
      "description": "Change password.\n\nChange password of {@link IShoppingMember member} with the current password.\n\nThe reason why the current password is required is for security."
    },
    {
      "name": "shoppings_customers_coupons_index",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Request info of pagination, searching and sorting",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingCoupon.IRequest"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingCoupon.IRequest": {
            "type": "object",
            "properties": {
              "search": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingCoupon.IRequest.ISearch"
                  }
                ]
              },
              "sort": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "-coupon.name",
                        "-coupon.unit",
                        "-coupon.value",
                        "-coupon.created_at",
                        "-coupon.opened_at",
                        "-coupon.closed_at",
                        "+coupon.name",
                        "+coupon.unit",
                        "+coupon.value",
                        "+coupon.created_at",
                        "+coupon.opened_at",
                        "+coupon.closed_at"
                      ]
                    }
                  }
                ]
              },
              "page": {
                "title": "Page number",
                "description": "Page number.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Limitation of records per a page",
                "description": "Limitation of records per a page.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingCoupon.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "name": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            "required": []
          }
        }
      },
      "description": "List up every coupons.\n\nList up every {@link IShoppingCoupon coupons} with pagination.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingCoupon.IRequest.search search condition} in the request\nbody. Also, it is possible to customize sequence order of records by\nconfiguring {@link IShoppingCoupon.IRequest.sort sort condition}.\n\nFor reference, if you are a {@link IShoppingCustomer customer}, then\nonly {@link IShoppingCouponTicket ticketable} coupons would be listed up.\nOtherwise, non-ticketable coupons would also be listed up."
    },
    {
      "name": "shoppings_customers_coupons_at",
      "parameters": {
        "type": "object",
        "properties": {
          "id": {
            "description": " Target coupon's {@link IShoppingCoupon.id }",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a coupon info.\n\nGet a {@link IShoppingCoupon coupon} information.\n\nIf you are a {@link IShoppingCustomer customer}, then only\n{@link IShoppingCouponTicket ticketable} coupons are accessible. Non\nticketable coupons cause 410 gone error. Otherwise you are a\n{@link IShoppingSeller seller} or {@link IShoppingAdministrator administrator},\nnon-ticketable coupons are also accessible."
    },
    {
      "name": "shoppings_customers_coupons_tickets_create",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Creation info of coupon ticket",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingCouponTicket.ICreate"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingCouponTicket.ICreate": {
            "type": "object",
            "properties": {
              "coupon_id": {
                "description": "@format uuid",
                "type": "string"
              }
            },
            "required": [
              "coupon_id"
            ]
          }
        }
      },
      "description": "Create a new coupon ticket.\n\nCreate a new {@link IShoppingCouponTicket coupon ticket} of a specific\n{@link IShoppingCoupon coupon} for the {@link IShoppingCustomer customer}.\n\nBy the way, if the target coupon has been\n{@link IShoppingCoupon.expired_at expired} or\n{@link IShoppingCoupon.IInventory.volume out of stock} or\n{@link IShoppingCoupon.IInventory.volume_per_citizen exhausted for him/her},\n410 gone exception would be thrown.\n\nAlso, even though succeeded to create a new coupon ticket from the target\ncoupon, if the coupon has expiration day or date, the newly created ticket\nalso has {@link IShoppingCouponTicket.expired_at expiration time}, and it\nwould be disabled after the expiration time."
    },
    {
      "name": "shoppings_customers_coupons_tickets_index",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Request info of pagination, searching and sorting",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingCouponTicket.IRequest"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingCouponTicket.IRequest": {
            "type": "object",
            "properties": {
              "sort": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "-ticket.created_at",
                        "-ticket.expired_at",
                        "+ticket.created_at",
                        "+ticket.expired_at"
                      ]
                    }
                  }
                ]
              },
              "page": {
                "title": "Page number",
                "description": "Page number.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Limitation of records per a page",
                "description": "Limitation of records per a page.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          }
        }
      },
      "description": "List up every coupon tickets.\n\nList up every {@link IShoppingCouponTicket coupon tickets} of the\n{@link IShoppingCustomer customer} with {@link IPage pagination}.\n\nFor reference, coupon ticket means that a {@link IShoppingCoupon coupon}\nhas been taken by a customer. If the target coupon has expiration day or\ndate, the coupon ticket also has\n{@link IShoppingCouponTicket.expired_at expiration time}, and such expired\ntickets would not be listed up. Likewise, tickets used to\n{@link IShoppingCouponTicketPayment pay} for the {@link IShoppingOrder order}\nwould not be listed up, either.\n\nAdditionally, you can limit the result by configuring\n{@link IShoppingCouponTicket.IRequest.search search condition} in the request\nbody. Also, it is possible to customize sequence order of records by\nconfiguring {@link IShoppingCouponTicket.IRequest.sort sort condition}."
    },
    {
      "name": "shoppings_customers_coupons_tickets_at",
      "parameters": {
        "type": "object",
        "properties": {
          "id": {
            "description": " Target coupon ticket's {@link IShoppingCouponTicket.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a coupon ticket.\n\nGet a {@link IShoppingCouponTicket coupon ticket} information with its ID.\n\nBy the way, if the target coupon ticket has been\n{@link IShoppingCouponTicket.expired_at expired} or used to\n{@link IShoppingCouponTicketPayment pay} for the {@link IShoppingOrder order},\n410 gone exception would be thrown."
    },
    {
      "name": "shoppings_customers_deposits_charges_create",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Creation info of the deposit charge",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingDepositCharge.ICreate"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingDepositCharge.ICreate": {
            "type": "object",
            "properties": {
              "value": {
                "type": "number"
              }
            },
            "required": [
              "value"
            ]
          }
        }
      },
      "description": "Create a new deposit charge application.\n\nCreate a new {@link IShoppingDepositCharge deposit charge application}.\n\nBy the way, this function does not mean completion the deposit charge, but\nmeans just {@link IShoppingCustomer customer} is applying the deposit charge.\nThe deposit charge be completed only when customer\n{@link IShoppingDepositChargePublish.publish pay} the deposit charge."
    },
    {
      "name": "shoppings_customers_deposits_charges_index",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Request info of pagination, searching and sorting",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingDepositCharge.IRequest"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingDepositCharge.IRequest": {
            "type": "object",
            "properties": {
              "search": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingDepositCharge.IRequest.ISearch"
                  }
                ]
              },
              "sort": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "-created_at",
                        "+created_at",
                        "-value",
                        "-publish.created_at",
                        "-publish.paid_at",
                        "+value",
                        "+publish.created_at",
                        "+publish.paid_at"
                      ]
                    }
                  }
                ]
              },
              "page": {
                "title": "Page number",
                "description": "Page number.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Limitation of records per a page",
                "description": "Limitation of records per a page.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingDepositCharge.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "from": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format date-time"
                  }
                ]
              },
              "to": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format date-time"
                  }
                ]
              },
              "minimum": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number"
                  }
                ]
              },
              "maximum": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number"
                  }
                ]
              },
              "state": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "paid",
                      "published",
                      "pending",
                      "cancelled"
                    ]
                  }
                ]
              },
              "publish": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "from": {
                        "anyOf": [
                          {
                            "type": "null"
                          },
                          {
                            "type": "string",
                            "description": "@format date-time"
                          }
                        ]
                      },
                      "to": {
                        "anyOf": [
                          {
                            "type": "null"
                          },
                          {
                            "type": "string",
                            "description": "@format date-time"
                          }
                        ]
                      },
                      "payment": {
                        "anyOf": [
                          {
                            "type": "null"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "from": {
                                "anyOf": [
                                  {
                                    "type": "null"
                                  },
                                  {
                                    "type": "string",
                                    "description": "@format date-time"
                                  }
                                ]
                              },
                              "to": {
                                "anyOf": [
                                  {
                                    "type": "null"
                                  },
                                  {
                                    "type": "string",
                                    "description": "@format date-time"
                                  }
                                ]
                              }
                            },
                            "required": []
                          }
                        ]
                      }
                    },
                    "required": []
                  }
                ]
              }
            },
            "required": [
              "state"
            ]
          }
        }
      },
      "description": "List up every deposit charges.\n\nList up every {@link IShoppingDepositCharge deposit charges} of the\n{@link IShoppingCustomer customer} with {@link IPage pagination}.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingDepositCharge.IRequest.search search condition} in the\nrequest body. Also, it is possible to customize sequence order of records\nby configuring {@link IShoppingDepositCharge.IRequest.sort sort condition}."
    },
    {
      "name": "shoppings_customers_deposits_charges_at",
      "parameters": {
        "type": "object",
        "properties": {
          "id": {
            "description": " Target deposit charge's {@link IShoppingDepositCharge.id }",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a deposit charge info.\n\nGet a {@link IShoppingDepositCharge deposit charge} information."
    },
    {
      "name": "shoppings_customers_deposits_charges_update",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Value to change",
        "type": "object",
        "properties": {
          "id": {
            "description": " Target deposit charge's {@link IShoppingDepositCharge.id }",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingDepositCharge.ICreate"
          }
        },
        "required": [
          "id",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingDepositCharge.ICreate": {
            "type": "object",
            "properties": {
              "value": {
                "type": "number"
              }
            },
            "required": [
              "value"
            ]
          }
        }
      },
      "description": "Update a deposit charge application.\n\nUpdate value of a {@link IShoppingDepositCharge deposit charge application}\nthat has been applied by the {@link IShoppingCustomer}.\n\nIf the charge has been {@link IShoppingDepositChargePublish published},\nthen it is not possible to update the deposit charge. Only 410 gone exception\nwould be thrown."
    },
    {
      "name": "shoppings_customers_deposits_charges_erase",
      "parameters": {
        "type": "object",
        "properties": {
          "id": {
            "description": " Target deposit charge's {@link IShoppingDepositCharge.id }",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Erase a deposit charge application.\n\nErase a {@link IShoppingDepositCharge deposit charge application} that has been\napplied by the {@link IShoppingCustomer}.\n\nIf the charge has been {@link IShoppingDepositChargePublish published}, then\nit is not possible to erase the deposit charge. In that case, you've to cancel\nthe payment by calling the {@link publish.cancel} function."
    },
    {
      "name": "shoppings_customers_deposits_charges_publish_able",
      "parameters": {
        "type": "object",
        "properties": {
          "chargeId": {
            "description": " Target charge's {@link IShoppingDepositCharge.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "chargeId"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Check publishable.\n\nTest whether the {@link IShoppingDepositCharge charge} is publishable or not.\n\nIf the charge has not been {@link IShoppingDepositChargePublish published} and\nnot deleted yet, then it is possible to publish the charge"
    },
    {
      "name": "shoppings_customers_deposits_charges_publish_create",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Creation info of the publish",
        "type": "object",
        "properties": {
          "chargeId": {
            "description": " Target charge's {@link IShoppingDepositCharge.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingDepositChargePublish.ICreate"
          }
        },
        "required": [
          "chargeId",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingDepositChargePublish.ICreate": {
            "type": "object",
            "properties": {
              "vendor": {
                "type": "string"
              },
              "uid": {
                "type": "string"
              }
            },
            "required": [
              "vendor",
              "uid"
            ]
          }
        }
      },
      "description": "Publish a charge.\n\n{@link IShoppingDepositChargePublish Publish} a\n{@link IShoppingDepositCharge charge} that has been applied by the\n{@link IShoppingCustomer} with payment information gotten from the\npayment vendor system.\n\nAlso, the payment time can be different with the publish time. For example,\nif the payment method is manual bank account transfer, then the payment\nwould be delayed until the customer actually transfer the money. In that\ncase, {@link IShoppingDepositChargePublish.paid_at} would be `null` value,\nso that you have to check it after calling this publish function."
    },
    {
      "name": "shoppings_customers_deposits_histories_index",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Request info of pagination, searching and sorting",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingDepositHistory.IRequest"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingDepositHistory.IRequest": {
            "type": "object",
            "properties": {
              "search": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingDepositHistory.IRequest.ISearch"
                  }
                ]
              },
              "sort": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "-deposit.source",
                        "-deposit.code",
                        "-deposit.direction",
                        "+deposit.source",
                        "+deposit.code",
                        "+deposit.direction",
                        "-history.value",
                        "-history.created_at",
                        "+history.value",
                        "+history.created_at"
                      ]
                    }
                  }
                ]
              },
              "page": {
                "title": "Page number",
                "description": "Page number.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Limitation of records per a page",
                "description": "Limitation of records per a page.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingDepositHistory.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "deposit": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingDeposit.IRequest.ISearch"
                  }
                ]
              },
              "citizen_id": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format uuid"
                  }
                ]
              },
              "from": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format date-time"
                  }
                ]
              },
              "to": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format date-time"
                  }
                ]
              },
              "minimum": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number",
                    "description": "@minimum 0"
                  }
                ]
              },
              "maximum": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingDeposit.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "source": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "code": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "direction": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number",
                    "enum": [
                      -1,
                      1
                    ]
                  }
                ]
              }
            },
            "required": []
          }
        }
      },
      "description": "List up every deposit histories.\n\nList up every {@link IShoppingDepositHistory deposit histories} of the\n{@link IShoppingCustomer customer} with {@link IPage pagination}.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingDepositHistory.IRequest.search search condition} in the\nrequest body. Also, it is possible to customize sequence order of records\nby configuring {@link IShoppingDepositHistory.IRequest.sort sort condition}."
    },
    {
      "name": "shoppings_customers_deposits_histories_at",
      "parameters": {
        "type": "object",
        "properties": {
          "id": {
            "description": "@format uuid",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a deposit history info.\n\nGet a {@link IShoppingDepositHistory deposit history} information."
    },
    {
      "name": "shoppings_customers_deposits_histories_balance",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": [],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get balance of the deposit.\n\nGet current balance of the deposit of the {@link IShoppingCustomer customer}."
    },
    {
      "name": "shoppings_customers_mileages_histories_index",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Request info of pagination, searching and sorting",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingMileageHistory.IRequest"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingMileageHistory.IRequest": {
            "type": "object",
            "properties": {
              "search": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingMileageHistory.IRequest.ISearch"
                  }
                ]
              },
              "sort": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "-mileage.source",
                        "-mileage.code",
                        "-mileage.direction",
                        "+mileage.source",
                        "+mileage.code",
                        "+mileage.direction",
                        "-history.value",
                        "-history.created_at",
                        "+history.value",
                        "+history.created_at"
                      ]
                    }
                  }
                ]
              },
              "page": {
                "title": "Page number",
                "description": "Page number.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Limitation of records per a page",
                "description": "Limitation of records per a page.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingMileageHistory.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "mileage": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingMileage.IRequest.ISearch"
                  }
                ]
              },
              "citizen_id": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format uuid"
                  }
                ]
              },
              "from": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format date-time"
                  }
                ]
              },
              "to": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format date-time"
                  }
                ]
              },
              "minimum": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number",
                    "description": "@minimum 0"
                  }
                ]
              },
              "maximum": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingMileage.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "source": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "code": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "direction": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number",
                    "enum": [
                      -1,
                      1
                    ]
                  }
                ]
              }
            },
            "required": []
          }
        }
      },
      "description": "List up every mileage histories.\n\nList up every {@link IShoppingMileageHistory mileage histories} of the\n{@link IShoppingCustomer customer} with {@link IPage pagination}.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingMileageHistory.IRequest.search search condition} in the\nrequest body. Also, it is possible to customize sequence order of records\nby configuring {@link IShoppingMileageHistory.IRequest.sort sort condition}."
    },
    {
      "name": "shoppings_customers_mileages_histories_at",
      "parameters": {
        "type": "object",
        "properties": {
          "id": {
            "description": " Target mileage history's {@link IShoppingMileageHistory.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a mileage history info.\n\nGet a {@link IShoppingMileageHistory mileage history} information."
    },
    {
      "name": "shoppings_customers_mileages_histories_balance",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": [],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get balance of the mileage.\n\nGet current balance of the mileage of the {@link IShoppingCustomer customer}."
    },
    {
      "name": "shoppings_customers_carts_commodities_create",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Creation info of the commodity",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingCartCommodity.ICreate"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingCartCommodity.ICreate": {
            "description": "Creation information of a shopping cart commodity.",
            "type": "object",
            "properties": {
              "sale_id": {
                "title": "Target sale's {@link IShoppingSale.id}",
                "description": "Target sale's {@link IShoppingSale.id}.\n\n\n@format uuid",
                "type": "string"
              },
              "stocks": {
                "title": "List of the stocks to be purchased",
                "description": "List of the stocks to be purchased.\n\n\n@minItems 1",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/IShoppingCartCommodityStock.ICreate"
                }
              },
              "volume": {
                "title": "Volume of the commodity to purchase",
                "description": "Volume of the commodity to purchase.\n\nA value indicating how many sets would be multiplied to the children\n{@link IShoppingSaleUnitStock.IInvert.quantity} values.\n\n\n@minimum 1",
                "type": "integer"
              },
              "accumulate": {
                "title": "Whether to accumulate the volume or not",
                "description": "Whether to accumulate the volume or not.\n\nIf this attribute is not `false` and there's same commodity that\ncomposed with same stocks and options, then the volume will be\naccumulated to the existed one.\n\nOtherwise, duplicated commodity would be newly created.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              }
            },
            "required": [
              "sale_id",
              "stocks",
              "volume"
            ]
          },
          "IShoppingCartCommodityStock.ICreate": {
            "description": "Creation information of the commodity stock of shopping cart.\n\nWhen record being created, its corresponding structure would be\n{@link IShoppingSaleSnapshotUnit.IInvert} and\n{@link IShoppingSaleSnapshotUnitStock.IInvert}.",
            "type": "object",
            "properties": {
              "unit_id": {
                "title": "Target unit's {@link IShoppingSaleUnit.id}",
                "description": "Target unit's {@link IShoppingSaleUnit.id}.\n\n\n@format uuid",
                "type": "string"
              },
              "stock_id": {
                "title": "Target stock's {@link IShoppingSaleUnitStock.id}",
                "description": "Target stock's {@link IShoppingSaleUnitStock.id}.\n\nIt must be matched with the {@link choices} property.\n\n\n@format uuid",
                "type": "string"
              },
              "choices": {
                "title": "Creation information of the choices for each descriptive option",
                "description": "Creation information of the choices for each descriptive option.\n\nIf target option is not of descriptive but of selective, then\nthis property must be an empty array.",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/IShoppingCartCommodityStockChoice.ICreate"
                }
              },
              "quantity": {
                "title": "Quantity of the stock to purchase",
                "description": "Quantity of the stock to purchase.\n\nThis value is multiplied by the {@link IShoppingCartCommodity.volume}.\n\n\n@minimum 1",
                "type": "integer"
              }
            },
            "required": [
              "unit_id",
              "stock_id",
              "choices",
              "quantity"
            ]
          },
          "IShoppingCartCommodityStockChoice.ICreate": {
            "description": "Creation information of the choice for each option (of descriptive).\n\nWhen target option is {@link IShoppingSaleUnitDescriptiveOption}\ntype, then you have to compose this choice structure with\n{@link value} specification.\n\nOtherwise when target option is {@link IShoppingSaleUnitSelectableOption}\ntype, you don't need to compose this choice structure. Just fill only\nthe {@link IShoppingCartCommodityStock.ICreate.stock_id} property.",
            "type": "object",
            "properties": {
              "option_id": {
                "title": "Target option's {@link IShoppingSaleUnitOption.id}",
                "description": "Target option's {@link IShoppingSaleUnitOption.id}.\n\n\n@format uuid",
                "type": "string"
              },
              "value": {
                "title": "Written value about the option",
                "description": "Written value about the option.\n\nWhen target option's type is 'descriptive', then you have to\nfill this property with the written value by the customer.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              }
            },
            "required": [
              "option_id",
              "value"
            ]
          }
        }
      },
      "description": "Create a new commodity.\n\nCreate a new {@link IShoppingCartCommodity commodity} into a specific\nshopping cart.\n\nIf {@link IShoppingCartCommodity.ICreate.accumulate} has `true` value\nand there's some same commodity that composed with same\n{@link IShoppingSaleUnitStock.IInvert stocks and quantities},\nthen new commodity would not be created but the volume would be accumulated.\n\nBy the way, if the target {@link IShoppingSale sale} has been suspended or\n{@link IShoppingSaleUnitStockInventory out of stock}, then 410 gone error\nwould be thrown. Therefore, it would better to check the target sale and\n{@link IShoppingSaleUnitStock stock}'s status before."
    },
    {
      "name": "shoppings_customers_carts_commodities_index",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Request info of pagination, searching and sorting",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingCartCommodity.IRequest"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingCartCommodity.IRequest": {
            "type": "object",
            "properties": {
              "search": {
                "$ref": "#/$defs/IShoppingCartCommodity.IRequest.ISearch"
              },
              "sort": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "-seller.created_at",
                    "-seller.goods.payments.real",
                    "-seller.goods.publish_count",
                    "-seller.reviews.average",
                    "-seller.reviews.count",
                    "-goods.publish_count",
                    "-goods.payments.real",
                    "-reviews.average",
                    "-reviews.count",
                    "-sale.created_at",
                    "-sale.updated_at",
                    "-sale.opened_at",
                    "-sale.closed_at",
                    "-sale.content.title",
                    "-sale.price_range.lowest.real",
                    "-sale.price_range.highest.real",
                    "+seller.created_at",
                    "+seller.goods.payments.real",
                    "+seller.goods.publish_count",
                    "+seller.reviews.average",
                    "+seller.reviews.count",
                    "+goods.publish_count",
                    "+goods.payments.real",
                    "+reviews.average",
                    "+reviews.count",
                    "+sale.created_at",
                    "+sale.updated_at",
                    "+sale.opened_at",
                    "+sale.closed_at",
                    "+sale.content.title",
                    "+sale.price_range.lowest.real",
                    "+sale.price_range.highest.real",
                    "-commodity.price",
                    "-commodity.volume",
                    "-commodity.volumed_price",
                    "-commodity.created_at",
                    "+commodity.price",
                    "+commodity.volume",
                    "+commodity.volumed_price",
                    "+commodity.created_at"
                  ]
                }
              },
              "page": {
                "title": "Page number",
                "description": "Page number.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Limitation of records per a page",
                "description": "Limitation of records per a page.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingCartCommodity.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "min_price": {
                "type": "number"
              },
              "max_price": {
                "type": "number"
              },
              "min_volumed_price": {
                "type": "number"
              },
              "max_volumed_price": {
                "type": "number"
              },
              "sale": {
                "$ref": "#/$defs/IShoppingSale.IRequest.ISearch"
              }
            },
            "required": []
          },
          "IShoppingSale.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "show_paused": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "show_suspended": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "only"
                    ]
                  }
                ]
              },
              "title": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "content": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "title_or_content": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "price": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingPrice.ISearch"
                  }
                ]
              },
              "review": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingSaleReview.IInvertSearch"
                  }
                ]
              },
              "section_codes": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                ]
              },
              "channel_category_ids": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                ]
              },
              "tags": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                ]
              },
              "seller": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingSeller.IRequest.ISearch"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingPrice.ISearch": {
            "type": "object",
            "properties": {
              "minimum": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number"
                  }
                ]
              },
              "maximum": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingSaleReview.IInvertSearch": {
            "type": "object",
            "properties": {
              "score": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingSaleReview.IInvertSearch.IScoreRange"
                  }
                ]
              },
              "count": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingSaleReview.IInvertSearch.ICountRange"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingSaleReview.IInvertSearch.IScoreRange": {
            "type": "object",
            "properties": {
              "minimum": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number",
                    "description": "@minimum 0\n@maximum 100"
                  }
                ]
              },
              "maximum": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number",
                    "description": "@minimum 0\n@maximum 100"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingSaleReview.IInvertSearch.ICountRange": {
            "type": "object",
            "properties": {
              "minimum": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "maximum": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingSeller.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "id": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format uuid"
                  }
                ]
              },
              "mobile": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@pattern ^[0-9]*$"
                  }
                ]
              },
              "name": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "email": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format email"
                  }
                ]
              },
              "nickname": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            "required": []
          }
        }
      },
      "description": "List of every commodities.\n\nList up every {@link IShoppingCartCommodity commodities} in the\nshopping cart with {@link IPage pagination}.\n\nYou can limit the result by configuring\n{@link IShoppingCartCommodity.IRequest.search search condition} in the\nrequest body. Furthermore, it is possible to customize sequence order of\nrecords by configuring {@link IShoppingCartCommodity.IRequest.sort}.\n\nFor reference, when some commodity be {@link IShoppingOrder ordered} and\n{@link IShoppingOrderPublish published}, then it would not be appread in\nthe shopping cart more. Otherwise, the order has not been published yet,\nit would be appread in the shopping cart and still enable to create a new\n{@link IShoppingOrder order application} with the same commodity.\n\nOf course, if the target {@link IShoppingSale sale} has been suspended, or\n{@link IShoppingSaleUnitStockInventory out of stock}, then it would not be\nappread in the shopping cart more, either."
    },
    {
      "name": "shoppings_customers_carts_commodities_at",
      "parameters": {
        "type": "object",
        "properties": {
          "id": {
            "description": " Target commodity's {@link IShoppingCartCommodity.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a commodity.\n\nGet a {@link IShoppingCartCommodity commodity} record of the shopping cart.\n\nIf target {@link IShoppingSale sale} has been suspended or\n{@link IShoppingSaleUnitStockInventory out of stock}, then 410 gone error\nwould be thrown. Therefore, even if you've created a commodity successfully\nwith the {@link create} method, it still can be failed when you access the\ncommodity with this {@link at} method."
    },
    {
      "name": "shoppings_customers_carts_commodities_update",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Update info of the commodity (volume)",
        "type": "object",
        "properties": {
          "id": {
            "description": " Target commodity's {@link IShoppingCartCommodity.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingCartCommodity.IUpdate"
          }
        },
        "required": [
          "id",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingCartCommodity.IUpdate": {
            "description": "Update information of a shopping cart commodity.",
            "type": "object",
            "properties": {
              "volume": {
                "title": "Volume of the commodity to purchase",
                "description": "Volume of the commodity to purchase.\n\nA value indicating how many sets would be multiplied to the children\n{@link IShoppingSaleUnitStock.IInvert.quantity} values.\n\n\n@minimum 1",
                "type": "integer"
              }
            },
            "required": [
              "volume"
            ]
          }
        }
      },
      "description": "Update a commodity (volume).\n\nUpdate a {@link IShoppingCartCommodity commodity}'s volume in the\nshopping cart.\n\nIf target {@link IShoppingSale sale} has been suspended or\n{@link IShoppingSaleUnitStockInventory out of stock} suddenly, then 410\ngone error would be thrown, either."
    },
    {
      "name": "shoppings_customers_carts_commodities_erase",
      "parameters": {
        "type": "object",
        "properties": {
          "id": {
            "description": " Target commodity's {@link IShoppingCartCommodity.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Erase a commodity.\n\nErase a {@link IShoppingCartCommodity commodity} from the shopping cart.\n\nIf the commodity is on an {@link IShoppingOrder order} process, it is not\npossible to erase it. Instead, if the order has been\n{@link IShoppingOrderPublish published}, then it would not be appread in\nthe shopping cart more. If the order be erased, then you also can continue\nerasinng the commodity, neither."
    },
    {
      "name": "shoppings_customers_carts_commodities_replica",
      "parameters": {
        "type": "object",
        "properties": {
          "id": {
            "description": " Target commodity's {@link IShoppingCartCommodity.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get replica of a commodity.\n\nGet a {@link IShoppingCartCommodity.ICreate} typed info of the target\ncommodity for replication.\n\nIf target {@link IShoppingSale sale} has been suspended or\n{@link IShoppingSaleUnitStockInventory out of stock} suddenly,\nthen 410 gone error would be thrown, either."
    },
    {
      "name": "shoppings_customers_carts_commodities_discountable",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Request info for discountable",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingCartDiscountable.IRequest"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingCartDiscountable.IRequest": {
            "type": "object",
            "properties": {
              "commodity_ids": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "description": "@format uuid",
                      "type": "string"
                    }
                  }
                ]
              },
              "pseudos": {
                "type": "array",
                "items": {
                  "$ref": "#/$defs/IShoppingCartCommodity.ICreate"
                }
              }
            },
            "required": [
              "commodity_ids",
              "pseudos"
            ]
          },
          "IShoppingCartCommodity.ICreate": {
            "description": "Creation information of a shopping cart commodity.",
            "type": "object",
            "properties": {
              "sale_id": {
                "title": "Target sale's {@link IShoppingSale.id}",
                "description": "Target sale's {@link IShoppingSale.id}.\n\n\n@format uuid",
                "type": "string"
              },
              "stocks": {
                "title": "List of the stocks to be purchased",
                "description": "List of the stocks to be purchased.\n\n\n@minItems 1",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/IShoppingCartCommodityStock.ICreate"
                }
              },
              "volume": {
                "title": "Volume of the commodity to purchase",
                "description": "Volume of the commodity to purchase.\n\nA value indicating how many sets would be multiplied to the children\n{@link IShoppingSaleUnitStock.IInvert.quantity} values.\n\n\n@minimum 1",
                "type": "integer"
              },
              "accumulate": {
                "title": "Whether to accumulate the volume or not",
                "description": "Whether to accumulate the volume or not.\n\nIf this attribute is not `false` and there's same commodity that\ncomposed with same stocks and options, then the volume will be\naccumulated to the existed one.\n\nOtherwise, duplicated commodity would be newly created.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              }
            },
            "required": [
              "sale_id",
              "stocks",
              "volume"
            ]
          },
          "IShoppingCartCommodityStock.ICreate": {
            "description": "Creation information of the commodity stock of shopping cart.\n\nWhen record being created, its corresponding structure would be\n{@link IShoppingSaleSnapshotUnit.IInvert} and\n{@link IShoppingSaleSnapshotUnitStock.IInvert}.",
            "type": "object",
            "properties": {
              "unit_id": {
                "title": "Target unit's {@link IShoppingSaleUnit.id}",
                "description": "Target unit's {@link IShoppingSaleUnit.id}.\n\n\n@format uuid",
                "type": "string"
              },
              "stock_id": {
                "title": "Target stock's {@link IShoppingSaleUnitStock.id}",
                "description": "Target stock's {@link IShoppingSaleUnitStock.id}.\n\nIt must be matched with the {@link choices} property.\n\n\n@format uuid",
                "type": "string"
              },
              "choices": {
                "title": "Creation information of the choices for each descriptive option",
                "description": "Creation information of the choices for each descriptive option.\n\nIf target option is not of descriptive but of selective, then\nthis property must be an empty array.",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/IShoppingCartCommodityStockChoice.ICreate"
                }
              },
              "quantity": {
                "title": "Quantity of the stock to purchase",
                "description": "Quantity of the stock to purchase.\n\nThis value is multiplied by the {@link IShoppingCartCommodity.volume}.\n\n\n@minimum 1",
                "type": "integer"
              }
            },
            "required": [
              "unit_id",
              "stock_id",
              "choices",
              "quantity"
            ]
          },
          "IShoppingCartCommodityStockChoice.ICreate": {
            "description": "Creation information of the choice for each option (of descriptive).\n\nWhen target option is {@link IShoppingSaleUnitDescriptiveOption}\ntype, then you have to compose this choice structure with\n{@link value} specification.\n\nOtherwise when target option is {@link IShoppingSaleUnitSelectableOption}\ntype, you don't need to compose this choice structure. Just fill only\nthe {@link IShoppingCartCommodityStock.ICreate.stock_id} property.",
            "type": "object",
            "properties": {
              "option_id": {
                "title": "Target option's {@link IShoppingSaleUnitOption.id}",
                "description": "Target option's {@link IShoppingSaleUnitOption.id}.\n\n\n@format uuid",
                "type": "string"
              },
              "value": {
                "title": "Written value about the option",
                "description": "Written value about the option.\n\nWhen target option's type is 'descriptive', then you have to\nfill this property with the written value by the customer.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              }
            },
            "required": [
              "option_id",
              "value"
            ]
          }
        }
      },
      "description": "Get discountable info.\n\nCompute discountable features about the\n {@link IShoppingCartCommodity shopping cart} even including\nnon-carted {@link IShoppingSale sales}.\n\nReturned {@link IShoppingCartDiscountable} contains including\ncombinations of adjustable {@link IShoppingCoupon coupons},\nwithdrawable {@link IShoppingDepositHistory deposits} and\n{@link IShoppingMileageHistory mileages}.\n\nIf you want to know the discountable info about some specific sales\nthat have not been carted yet, specify the sales to the\n{@link IShoppingCartDiscountable.pseudos} property with composing\n{@link IShoppingCartCommodity.ICreate creation info of the commodities}.\nThen, they would be included in the discountable info."
    },
    {
      "name": "shoppings_customers_orders_create",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Creation info of the order",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingOrder.ICreate"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingOrder.ICreate": {
            "description": "Creation information of the order appliance.",
            "type": "object",
            "properties": {
              "goods": {
                "title": "List of goods in the order",
                "description": "List of goods in the order.\n\n\n@minItems 1",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/IShoppingOrderGood.ICreate"
                }
              },
              "name": {
                "title": "Representative name of the order",
                "description": "Representative name of the order.\n\nIf omit, the name will be generated automatically.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            "required": [
              "goods"
            ]
          },
          "IShoppingOrderGood.ICreate": {
            "description": "Creation information of the good.",
            "type": "object",
            "properties": {
              "commodity_id": {
                "title": "Target shopping cart commodity's {@link IShoppingCartCommodity.id}",
                "description": "Target shopping cart commodity's {@link IShoppingCartCommodity.id}.\n\n`commodity_id` is the primary key of the {@link IShoppingCartCommodity}\nentity, which is the basis of the good to be created. In other words,\nit is the primary key of the shopping cart commodity that the customer\nhas selected and applied for the order.\n\n\n@format uuid",
                "type": "string"
              },
              "volume": {
                "title": "Volume of the good",
                "description": "Volume of the good.\n\nThe value multiplied to {@link IShoppingCartCommodityStock.quantity}.\nIt's purpose is exactly same with {@link IShoppingCartCommodity.volume},\nbut rewritten because the {@link IShoppingCartCommodity} records are reusable\nuntil payment.\n\n\n@minimum 0",
                "type": "integer"
              }
            },
            "required": [
              "commodity_id",
              "volume"
            ]
          }
        }
      },
      "description": "Create a new order application.\n\nCreate a new {@link IShoppingOrder order application} from a\n{@link IShoppingCartCommodity shopping cart} that has been composed by the\n{@link IShoppingCustomer}. Of course, do not need to put every commodities\nto the order, but possible to select some of them by the customer.\n\nBy the way, this function does not mean completion the order, but means\njust customer is applying the order. The order be completed only when customer\n{@link IShoppingOrderPublish.paid_at pays} the order.\n\n> If you are an A.I. chatbot, don't take a mistake that writing\n> the `commodity_id` with the user selected stock ID. The\n> `commodity_id` is the ID of the shopping cart commodity, not the\n> stock ID. The stock ID is already included in the shopping cart\n> commodity."
    },
    {
      "name": "shoppings_customers_orders_index",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Request info of pagination, searching and sorting",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingOrder.IRequest"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingOrder.IRequest": {
            "description": "Request of orders with pagination and searching/sorting conditions.",
            "type": "object",
            "properties": {
              "search": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingOrder.IRequest.ISearch"
                  }
                ]
              },
              "sort": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "-order.price",
                        "-order.quantity",
                        "-order.created_at",
                        "-order.publish.paid_at",
                        "+order.price",
                        "+order.quantity",
                        "+order.created_at",
                        "+order.publish.paid_at"
                      ]
                    }
                  }
                ]
              },
              "page": {
                "title": "Page number",
                "description": "Page number.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Limitation of records per a page",
                "description": "Limitation of records per a page.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingOrder.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "min_price": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number"
                  }
                ]
              },
              "max_price": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number"
                  }
                ]
              },
              "paid": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "sale": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingSale.IRequest.ISearch"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingSale.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "show_paused": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "show_suspended": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "only"
                    ]
                  }
                ]
              },
              "title": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "content": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "title_or_content": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "price": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingPrice.ISearch"
                  }
                ]
              },
              "review": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingSaleReview.IInvertSearch"
                  }
                ]
              },
              "section_codes": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                ]
              },
              "channel_category_ids": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                ]
              },
              "tags": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                ]
              },
              "seller": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingSeller.IRequest.ISearch"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingPrice.ISearch": {
            "type": "object",
            "properties": {
              "minimum": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number"
                  }
                ]
              },
              "maximum": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingSaleReview.IInvertSearch": {
            "type": "object",
            "properties": {
              "score": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingSaleReview.IInvertSearch.IScoreRange"
                  }
                ]
              },
              "count": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingSaleReview.IInvertSearch.ICountRange"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingSaleReview.IInvertSearch.IScoreRange": {
            "type": "object",
            "properties": {
              "minimum": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number",
                    "description": "@minimum 0\n@maximum 100"
                  }
                ]
              },
              "maximum": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number",
                    "description": "@minimum 0\n@maximum 100"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingSaleReview.IInvertSearch.ICountRange": {
            "type": "object",
            "properties": {
              "minimum": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "maximum": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingSeller.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "id": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format uuid"
                  }
                ]
              },
              "mobile": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@pattern ^[0-9]*$"
                  }
                ]
              },
              "name": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "email": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format email"
                  }
                ]
              },
              "nickname": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            "required": []
          }
        }
      },
      "description": "List up every orders.\n\nList up every {@link IShoppingOrder orders} with pagination.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingOrder.IRequest.search search condition} in the request\nbody. Also, it is possible to customize sequence order of records by\nconfiguring {@link IShoppingOrder.IRequest.sort sort condition}.\n\nFor reference, if you are a {@link IShoppingCustomer customer}, then\nyou can list up your own orders, and it is not a matter whether the\norder has been {@link IShoppingOrderPublish.paid_at paid} or not.\n\nOtherwise you are a {@link IShoppingSeller seller} or\n{@link IShoppingAdministrator administrator}, then you can list up\nonly paid orders. Also, in the seller case, only related\n{@link IShoppingOrder.goods goods} would be listed up in the order."
    },
    {
      "name": "shoppings_customers_orders_direct",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Creation info of the order without a shopping cart composition",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingCartCommodity.ICreate"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingCartCommodity.ICreate": {
            "description": "Creation information of a shopping cart commodity.",
            "type": "object",
            "properties": {
              "sale_id": {
                "title": "Target sale's {@link IShoppingSale.id}",
                "description": "Target sale's {@link IShoppingSale.id}.\n\n\n@format uuid",
                "type": "string"
              },
              "stocks": {
                "title": "List of the stocks to be purchased",
                "description": "List of the stocks to be purchased.\n\n\n@minItems 1",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/IShoppingCartCommodityStock.ICreate"
                }
              },
              "volume": {
                "title": "Volume of the commodity to purchase",
                "description": "Volume of the commodity to purchase.\n\nA value indicating how many sets would be multiplied to the children\n{@link IShoppingSaleUnitStock.IInvert.quantity} values.\n\n\n@minimum 1",
                "type": "integer"
              },
              "accumulate": {
                "title": "Whether to accumulate the volume or not",
                "description": "Whether to accumulate the volume or not.\n\nIf this attribute is not `false` and there's same commodity that\ncomposed with same stocks and options, then the volume will be\naccumulated to the existed one.\n\nOtherwise, duplicated commodity would be newly created.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              }
            },
            "required": [
              "sale_id",
              "stocks",
              "volume"
            ]
          },
          "IShoppingCartCommodityStock.ICreate": {
            "description": "Creation information of the commodity stock of shopping cart.\n\nWhen record being created, its corresponding structure would be\n{@link IShoppingSaleSnapshotUnit.IInvert} and\n{@link IShoppingSaleSnapshotUnitStock.IInvert}.",
            "type": "object",
            "properties": {
              "unit_id": {
                "title": "Target unit's {@link IShoppingSaleUnit.id}",
                "description": "Target unit's {@link IShoppingSaleUnit.id}.\n\n\n@format uuid",
                "type": "string"
              },
              "stock_id": {
                "title": "Target stock's {@link IShoppingSaleUnitStock.id}",
                "description": "Target stock's {@link IShoppingSaleUnitStock.id}.\n\nIt must be matched with the {@link choices} property.\n\n\n@format uuid",
                "type": "string"
              },
              "choices": {
                "title": "Creation information of the choices for each descriptive option",
                "description": "Creation information of the choices for each descriptive option.\n\nIf target option is not of descriptive but of selective, then\nthis property must be an empty array.",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/IShoppingCartCommodityStockChoice.ICreate"
                }
              },
              "quantity": {
                "title": "Quantity of the stock to purchase",
                "description": "Quantity of the stock to purchase.\n\nThis value is multiplied by the {@link IShoppingCartCommodity.volume}.\n\n\n@minimum 1",
                "type": "integer"
              }
            },
            "required": [
              "unit_id",
              "stock_id",
              "choices",
              "quantity"
            ]
          },
          "IShoppingCartCommodityStockChoice.ICreate": {
            "description": "Creation information of the choice for each option (of descriptive).\n\nWhen target option is {@link IShoppingSaleUnitDescriptiveOption}\ntype, then you have to compose this choice structure with\n{@link value} specification.\n\nOtherwise when target option is {@link IShoppingSaleUnitSelectableOption}\ntype, you don't need to compose this choice structure. Just fill only\nthe {@link IShoppingCartCommodityStock.ICreate.stock_id} property.",
            "type": "object",
            "properties": {
              "option_id": {
                "title": "Target option's {@link IShoppingSaleUnitOption.id}",
                "description": "Target option's {@link IShoppingSaleUnitOption.id}.\n\n\n@format uuid",
                "type": "string"
              },
              "value": {
                "title": "Written value about the option",
                "description": "Written value about the option.\n\nWhen target option's type is 'descriptive', then you have to\nfill this property with the written value by the customer.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              }
            },
            "required": [
              "option_id",
              "value"
            ]
          }
        }
      },
      "description": "Create a new order application without a shopping cart.\n\nCarete a new {@link IShoppingOrder order application} without a\n{@link IShoppingCartCommodity shopping cart commodity} composition.\nIf you're an A.I. chatbot and user wants to directly purchase a product,\nthen select and call this function.\n\nBy the way, this function does not mean completion the order, but means\njust customer is applying the order. The order be completed only when customer\n{@link IShoppingOrderPublish.paid_at pays} the order."
    },
    {
      "name": "shoppings_customers_orders_at",
      "parameters": {
        "type": "object",
        "properties": {
          "id": {
            "description": " Target order's {@link IShoppingOrder.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get an order info.\n\nGet a detailed {@link IShoppingOrder order} information.\n\nIf you are not a {@link IShoppingCustomer customer}, then you can't\naccess to the order which has not been\n{@link IShoppingOrderPublish.paid_at paid} yet. In that case,\n404 not found error would be thrown."
    },
    {
      "name": "shoppings_customers_orders_erase",
      "parameters": {
        "type": "object",
        "properties": {
          "id": {
            "description": " Target order's {@link IShoppingOrder.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Erase an order application.\n\nErase an order application that has been applied by the\n{@link IShoppingCustomer}.\n\nIf the order has been {@link IShoppingOrderPublish published}, then it is\nnot possible to erase the order. In that case, you've to cancel the\npayment by calling the {@link publish.cancel} function."
    },
    {
      "name": "shoppings_customers_orders_price",
      "parameters": {
        "type": "object",
        "properties": {
          "id": {
            "description": " Target order's {@link IShoppingOrder.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get price of the order.\n\nGet detailed price information of the {@link IShoppingOrder order}.\n\nReturned price info contains not only the amount of the order, but also\ncontains the discount amount by {@link IShoppingCoupono coupons},\n{@link IShoppingDepositHistory deposits} and\n{@link IShoppingMileageHistory mileages}."
    },
    {
      "name": "shoppings_customers_orders_discountable",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Request info for discountable",
        "type": "object",
        "properties": {
          "id": {
            "description": " Target order's {@link IShoppingOrder.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingOrderDiscountable.IRequest"
          }
        },
        "required": [
          "id",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingOrderDiscountable.IRequest": {
            "type": "object",
            "properties": {
              "good_ids": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "description": "@format uuid",
                      "type": "string"
                    }
                  }
                ]
              }
            },
            "required": [
              "good_ids"
            ]
          }
        }
      },
      "description": "Get discountable info.\n\nCompute discountable features about the {@link IShoppingOrder}.\n\nReturned {@link IShoppingOrderDiscountable} contains including\ncombinations of adjustable {@link IShoppingCoupon coupons},\nwithdrawable {@link IShoppingDepositHistory deposits}\nand {@link IShoppingMileageHistory mileages}.\n\nOf course, returned features are valid only when the order has not\nbeen {@link IShoppingOrderPublish published} yet. If the order has\nalready been published, then no way to discount the price more."
    },
    {
      "name": "shoppings_customers_orders_discount",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Discount info",
        "type": "object",
        "properties": {
          "id": {
            "description": " Target order's {@link IShoppingOrder.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingOrderPrice.ICreate"
          }
        },
        "required": [
          "id",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingOrderPrice.ICreate": {
            "type": "object",
            "properties": {
              "deposit": {
                "type": "number"
              },
              "mileage": {
                "type": "number"
              },
              "coupon_ids": {
                "type": "array",
                "items": {
                  "description": "@format uuid",
                  "type": "string"
                }
              }
            },
            "required": [
              "deposit",
              "mileage",
              "coupon_ids"
            ]
          }
        }
      },
      "description": "Discount the order.\n\nDiscount total price of the {@link IShoppingOrder} by adjusting\n{@link IShoppingCoupon coupons}, {@link IShoppingDepositHistory deposits}\nand {@link IShoppingMileageHistory mileages}. If amount of discount\nfeatures are equal to the total price of the order, it is possible to\n{@link IShoppingOrderPublish publish} it without any cash.\n\nBy the way, the discounting features must be valid. If not, 428\nunprocessable entity error would be thrown. To know which features are\nadjustable or withdrawable, call the {@link discountable} function\nbefore."
    },
    {
      "name": "shoppings_customers_orders_goods_confirm",
      "parameters": {
        "type": "object",
        "properties": {
          "orderId": {
            "description": " Belonged order's {@link IShoppingOrder.id }\n\n\n@format uuid",
            "type": "string"
          },
          "id": {
            "description": " Target good's {@link IShoppingOrderGood.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "orderId",
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Confirm an order good.\n\nConfirm an {@link IShoppingOrderGood order good} that has been\ncompleted {@link IShoppingDelivery delivering} to the\n{@link IShoppingCustomer customer}.\n\nIn other words, belonged {@link IShoppingOrder order} must be\n{@link IShoppingPublish.paid_at published, paid} and delivery of\nthe good must be {@link IShoppingDeliveryJourney arrived} to the\ncustomer. If not, 428 unprocessable entity error would be thrown."
    },
    {
      "name": "shoppings_customers_orders_publish_able",
      "parameters": {
        "type": "object",
        "properties": {
          "orderId": {
            "description": " Target order's {@link IShoppingOrder.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "orderId"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Check publishable.\n\nTest whether the {@link IShoppingOrder order} is publishable or not.\n\nIf the order has not been {@link IShoppingOrderPublish published} and\nnot deleted yet, then it is possible to publish the order. Even thouogh\ntarget {@link IShoppingSale sale} is suspended or\n{@link IShoppingSaleUnitStockInventory out of stock}, it is still possible\nto publish because the order already has been applied."
    },
    {
      "name": "shoppings_customers_orders_publish_create",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Creation info of the publish",
        "type": "object",
        "properties": {
          "orderId": {
            "description": " Target order's {@link IShoppingOrder.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingOrderPublish.ICreate"
          }
        },
        "required": [
          "orderId",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingOrderPublish.ICreate": {
            "description": "Creation info of the publish.\n\n### Description of {@link address} property:\n\n> Address to receive.",
            "type": "object",
            "properties": {
              "address": {
                "title": "Address to receive",
                "$ref": "#/$defs/IShoppingAddress.ICreate"
              },
              "vendor": {
                "title": "Payment identifier from the payment vendor service",
                "description": "Payment identifier from the payment vendor service.\n\nIf the order has been discounted for entire order price, then no need\nto send payment vendor info. Instead, you just configure the `null`\nvalue to this property.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingOrderPublish.IPaymentIdentifier"
                  }
                ]
              }
            },
            "required": [
              "address",
              "vendor"
            ]
          },
          "IShoppingAddress.ICreate": {
            "type": "object",
            "properties": {
              "mobile": {
                "title": "Mobile number to contact",
                "description": "Mobile number to contact.\n\n\n@pattern ^[0-9]*$",
                "type": "string"
              },
              "name": {
                "title": "Representative name of the address",
                "description": "Representative name of the address.\n\nSometimes be receiver's name, and sometimes be place name.",
                "type": "string"
              },
              "country": {
                "title": "Country name",
                "description": "Country name.",
                "type": "string"
              },
              "province": {
                "title": "Province name",
                "description": "Province name.",
                "type": "string"
              },
              "city": {
                "title": "City name",
                "description": "City name.",
                "type": "string"
              },
              "department": {
                "title": "Department name",
                "description": "Department name.",
                "type": "string"
              },
              "possession": {
                "title": "Detailed address containing street name, building number, and room number",
                "description": "Detailed address containing street name, building number, and room number.",
                "type": "string"
              },
              "zip_code": {
                "title": "Zip code, or postal code",
                "description": "Zip code, or postal code.",
                "type": "string"
              },
              "special_note": {
                "title": "Special description if required",
                "description": "Special description if required.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            "required": [
              "mobile",
              "name",
              "country",
              "province",
              "city",
              "department",
              "possession",
              "zip_code",
              "special_note"
            ]
          },
          "IShoppingOrderPublish.IPaymentIdentifier": {
            "description": "Payment identifier from the payment vendor service.",
            "type": "object",
            "properties": {
              "code": {
                "title": "The vendor code who will receive the payment",
                "description": "The vendor code who will receive the payment.",
                "x-wrtn-payment-vendor": true,
                "type": "string"
              },
              "uid": {
                "title": "The payment uid",
                "description": "The payment uid.",
                "x-wrtn-payment-uid": true,
                "type": "string"
              }
            },
            "required": [
              "code",
              "uid"
            ]
          }
        }
      },
      "description": "Publish an order.\n\n{@link IShoppingOrderPublish Publish} an {@link IShoppingOrder order} that\nhas been applied by the {@link IShoppingCustomer} with\n{@link IShoppingAddress address} to delivery and payment information gotten\nfrom the payment vendor system.\n\nIf the order has been discounted for entire order price, then no need\nto send payment vendor info. Instead, only address info is required.\n\nAlso, the payment time can be different with the publish time. For example,\nif the payment method is manual bank account transfer, then the payment\nwould be delayed until the customer actually transfer the money. In that\ncase, {@link IShoppingOrderPublish.paid_at} would be `null` value, so\nthat you have to check it after calling this publish function."
    },
    {
      "name": "shoppings_customers_orders_publish_cancel",
      "parameters": {
        "type": "object",
        "properties": {
          "orderId": {
            "description": " Target order's {@link IShoppingOrder.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "orderId"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Cancel the publish (payment).\n\nCancel payment of an {@link IShoppingOrder order} that has been\n{@link IShoppingOrderPublish published}.\n\nIf target publish's payment method is manual bank account transfer,\nthen it would be cancelled directly. If not, then payment cancel\nrequest would be sent to the payment vendor system."
    },
    {
      "name": "shoppings_customers_sales_index",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Request info of pagination, searching and sorting",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingSale.IRequest"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingSale.IRequest": {
            "description": "Request of summarized sales with pagination and searching/sorting options.",
            "type": "object",
            "properties": {
              "sort": {
                "title": "Sorting conditions",
                "description": "Sorting conditions.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "-seller.created_at",
                        "-seller.goods.payments.real",
                        "-seller.goods.publish_count",
                        "-seller.reviews.average",
                        "-seller.reviews.count",
                        "-goods.publish_count",
                        "-goods.payments.real",
                        "-reviews.average",
                        "-reviews.count",
                        "-sale.created_at",
                        "-sale.updated_at",
                        "-sale.opened_at",
                        "-sale.closed_at",
                        "-sale.content.title",
                        "-sale.price_range.lowest.real",
                        "-sale.price_range.highest.real",
                        "+seller.created_at",
                        "+seller.goods.payments.real",
                        "+seller.goods.publish_count",
                        "+seller.reviews.average",
                        "+seller.reviews.count",
                        "+goods.publish_count",
                        "+goods.payments.real",
                        "+reviews.average",
                        "+reviews.count",
                        "+sale.created_at",
                        "+sale.updated_at",
                        "+sale.opened_at",
                        "+sale.closed_at",
                        "+sale.content.title",
                        "+sale.price_range.lowest.real",
                        "+sale.price_range.highest.real"
                      ]
                    }
                  }
                ]
              },
              "page": {
                "title": "Page number",
                "description": "Page number.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Limitation of records per a page",
                "description": "Limitation of records per a page.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          }
        }
      },
      "description": "List up every summarized sales.\n\nList up every {@link IShoppingSale.ISummary summarized sales}.\n\nAs you can see, returned sales are summarized, not detailed. It does not\ncontain the SKU (Stock Keeping Unit) information represented by the\n{@link IShoppingSaleUnitOption} and {@link IShoppingSaleUnitStock} types.\nIf you want to get such detailed information of a sale, use\n`GET /shoppings/customers/sales/{id}` operation for each sale.\n\n> If you're an A.I. chatbot, and the user wants to buy or compose\n> {@link IShoppingCartCommodity shopping cart} from a sale, please\n> call the `GET /shoppings/customers/sales/{id}` operation at least once\n> to the target sale to get detailed SKU information about the sale.\n> It needs to be run at least once for the next steps."
    },
    {
      "name": "shoppings_customers_sales_at",
      "parameters": {
        "type": "object",
        "properties": {
          "id": {
            "description": " Target sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a sale with detailed information.\n\nGet a {@link IShoppingSale sale} with detailed information including\nthe SKU (Stock Keeping Unit) information represented by the\n{@link IShoppingSaleUnitOption} and {@link IShoppingSaleUnitStock} types.\n\n> If you're an A.I. chatbot, and the user wants to buy or compose a\n> {@link IShoppingCartCommodity shopping cart} from a sale, please call\n> this operation at least once to the target sale to get detailed SKU\n> information about the sale.\n>\n> It needs to be run at least once for the next steps. In other words,\n> if you A.I. agent has called this operation to a specific sale, you\n> don't need to call this operation again for the same sale.\n>\n> Additionally, please do not summarize the SKU information. Just show\n> the every options and stocks in the sale with detailed information."
    },
    {
      "name": "shoppings_customers_sales_questions_comments_create",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Creation info of the inquiry comment",
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "inquiryId": {
            "description": " Target inquiry's {@link IShoppingSaleInquiry.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingSaleInquiryComment.ICreate"
          }
        },
        "required": [
          "saleId",
          "inquiryId",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingSaleInquiryComment.ICreate": {
            "description": "Creation information of the comment.",
            "type": "object",
            "properties": {
              "format": {
                "title": "Format of body",
                "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`.",
                "type": "string",
                "enum": [
                  "html",
                  "md",
                  "txt"
                ]
              },
              "body": {
                "title": "Content body of comment",
                "description": "Content body of comment.",
                "type": "string"
              },
              "files": {
                "title": "List of attachment files",
                "description": "List of attachment files.",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/IAttachmentFile.ICreate"
                }
              }
            },
            "required": [
              "format",
              "body",
              "files"
            ]
          },
          "IAttachmentFile.ICreate": {
            "type": "object",
            "properties": {
              "name": {
                "title": "File name, except extension",
                "description": "File name, except extension.\n\nIf there's file `.gitignore`, then its name is an empty string.\n\n\n@maxLength 255",
                "type": "string"
              },
              "extension": {
                "title": "Extension",
                "description": "Extension.\n\nPossible to omit like `README` case.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@minLength 1\n@maxLength 8"
                  }
                ]
              },
              "url": {
                "title": "URL path of the real file",
                "description": "URL path of the real file.\n\n\n@format uri\n@contentMediaType image/*",
                "type": "string"
              }
            },
            "required": [
              "name",
              "extension",
              "url"
            ]
          }
        }
      },
      "description": "Create an inquiry comment.\n\nCreate an {@link IShoppingSaleInquiryComment inquiry comment} of a\n{@link IShoppingSaleQuestion question} or {@link IShoppingSaleReview review}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\ncreate an inquiry comment to your own {@link IShoppingSale sale}'s inquiry.\nOtherwise, you can create an inquiry comment to every inquiries of the sales."
    },
    {
      "name": "shoppings_customers_sales_questions_comments_index",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Request info of pagination, searching and sorting",
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "inquiryId": {
            "description": " Belonged inquiry's {@link IShoppingSaleInquiry.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingSaleInquiryComment.IRequest"
          }
        },
        "required": [
          "saleId",
          "inquiryId",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingSaleInquiryComment.IRequest": {
            "description": "Request of the comments with pagination and searching/sorting options.",
            "type": "object",
            "properties": {
              "search": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingSaleInquiryComment.IRequest.ISearch"
                  }
                ]
              },
              "sort": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "-created_at",
                        "+created_at"
                      ]
                    }
                  }
                ]
              },
              "page": {
                "title": "Page number",
                "description": "Page number.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Limitation of records per a page",
                "description": "Limitation of records per a page.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingSaleInquiryComment.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "name": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "nickname": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "body": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            "required": []
          }
        }
      },
      "description": "List up every inquiry comments.\n\nList up every {@link IShoppingSaleInquiryComment inquiry comments} of a\n{@link IShoppingSaleQuestion question} or {@link IShoppingSaleReview review}\nwith {@link IPage pagination}.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingSaleInquiryComment.IRequest.search search condition} in the\nrequest body. Also, it is possible to customize sequence order of records\nby configuring {@link IShoppingSaleInquiryComment.IRequest.sort sort condition}.\n\nBy the way, if you're a {@link IShoppingSeller seller}, you can only access\nto the your own {@link IShoppingSale sale}'s inquiries. Otherwise, you\ncan access to every inquiries of the sales."
    },
    {
      "name": "shoppings_customers_sales_questions_comments_at",
      "parameters": {
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "inquiryId": {
            "description": " Belonged inquiry's {@link IShoppingSaleInquiry.id }\n\n\n@format uuid",
            "type": "string"
          },
          "id": {
            "description": " Target inquiry comment's {@link IShoppingSaleInquiryComment.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "saleId",
          "inquiryId",
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get an inquiry comment info.\n\nGet a detailed {@link IShoppingSaleInquiryComment inquiry comment}\ninformation of a {@link IShoppingSaleQuestion question} or\n{@link IShoppingSaleReview review}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s inquiry comment.\nOtherwise, you can access to every inquiry comments of the sales."
    },
    {
      "name": "shoppings_customers_sales_questions_comments_update",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Update info of the inquiry comment",
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "inquiryId": {
            "description": " Belonged inquiry's {@link IShoppingSaleInquiry.id }\n\n\n@format uuid",
            "type": "string"
          },
          "id": {
            "description": " Target inquiry comment's {@link IShoppingSaleInquiryComment.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingSaleInquiryComment.ICreate"
          }
        },
        "required": [
          "saleId",
          "inquiryId",
          "id",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingSaleInquiryComment.ICreate": {
            "description": "Creation information of the comment.",
            "type": "object",
            "properties": {
              "format": {
                "title": "Format of body",
                "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`.",
                "type": "string",
                "enum": [
                  "html",
                  "md",
                  "txt"
                ]
              },
              "body": {
                "title": "Content body of comment",
                "description": "Content body of comment.",
                "type": "string"
              },
              "files": {
                "title": "List of attachment files",
                "description": "List of attachment files.",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/IAttachmentFile.ICreate"
                }
              }
            },
            "required": [
              "format",
              "body",
              "files"
            ]
          },
          "IAttachmentFile.ICreate": {
            "type": "object",
            "properties": {
              "name": {
                "title": "File name, except extension",
                "description": "File name, except extension.\n\nIf there's file `.gitignore`, then its name is an empty string.\n\n\n@maxLength 255",
                "type": "string"
              },
              "extension": {
                "title": "Extension",
                "description": "Extension.\n\nPossible to omit like `README` case.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@minLength 1\n@maxLength 8"
                  }
                ]
              },
              "url": {
                "title": "URL path of the real file",
                "description": "URL path of the real file.\n\n\n@format uri\n@contentMediaType image/*",
                "type": "string"
              }
            },
            "required": [
              "name",
              "extension",
              "url"
            ]
          }
        }
      },
      "description": "Update an inquiry comment.\n\nUpdate an {@link IShoppingSaleInquiryComment inquiry comment} to a specific\n{@link IShoppingSaleQuestion question} or {@link IShoppingSaleReview review}.\n\nBy the way, as is the general policy of this shopping mall regarding\ncomments, modifying a comment does not actually change the existing content.\nModified content is accumulated and recorded in the existing comment record\nas a new {@link IShoppingSaleInquiryComment.ISnapshot snapshot}. And this\nis made public to everyone, who can read this inquiry comment.\n\nThis is to prevent customers or sellers from modifying their comments and\nmanipulating the circumstances due to the nature of e-commerce, where\ndisputes easily arise. That is, to preserve evidence."
    },
    {
      "name": "shoppings_customers_sales_questions_create",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Creation info of the question",
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingSaleQuestion.ICreate"
          }
        },
        "required": [
          "saleId",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingSaleQuestion.ICreate": {
            "description": "Creation information of the question.",
            "type": "object",
            "properties": {
              "secret": {
                "title": "Whether the question article is secret or not",
                "description": "Whether the question article is secret or not.\n\nIf secret article, only the writer customer and related seller can see\nthe detailed content.",
                "type": "boolean"
              },
              "format": {
                "title": "Format of body",
                "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`.",
                "type": "string",
                "enum": [
                  "html",
                  "md",
                  "txt"
                ]
              },
              "title": {
                "title": "Title of article",
                "description": "Title of article.",
                "type": "string"
              },
              "body": {
                "title": "Content body of article",
                "description": "Content body of article.",
                "type": "string"
              },
              "files": {
                "title": "List of attachment files",
                "description": "List of attachment files.",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/IAttachmentFile.ICreate"
                }
              }
            },
            "required": [
              "secret",
              "format",
              "title",
              "body",
              "files"
            ]
          },
          "IAttachmentFile.ICreate": {
            "type": "object",
            "properties": {
              "name": {
                "title": "File name, except extension",
                "description": "File name, except extension.\n\nIf there's file `.gitignore`, then its name is an empty string.\n\n\n@maxLength 255",
                "type": "string"
              },
              "extension": {
                "title": "Extension",
                "description": "Extension.\n\nPossible to omit like `README` case.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@minLength 1\n@maxLength 8"
                  }
                ]
              },
              "url": {
                "title": "URL path of the real file",
                "description": "URL path of the real file.\n\n\n@format uri\n@contentMediaType image/*",
                "type": "string"
              }
            },
            "required": [
              "name",
              "extension",
              "url"
            ]
          }
        }
      },
      "description": "Write a question article.\n\nWhen a {@link IShoppingCustomer customer} wants to ask something about\na specific {@link IShoppingSale sale}, he/she can ask it by writing a\nnew {@link IShoppingSaleQuestion question article}.\n\nIf the customer does not want to reveal his/her identify and question,\nhe/she can write the question as a secret article. In that case, only\nthe customer and the related {@link IShoppingSeller seller} can see\nthe {@link at detailed content}. Also, such secret question's title and\nwriter name would be masked with `*` characters in the\n{@link index pagiation API}."
    },
    {
      "name": "shoppings_customers_sales_questions_at",
      "parameters": {
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "id": {
            "description": " Target question's {@link IShoppingSaleQuestion.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "saleId",
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a question info.\n\nGet a detailed {@link IShoppingSaleQuestion question} information of a\n{@link IShoppingSale sale}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s question. Otherwise\nyou are a {@link IShoppingCustomer customer}, you can access to every\nquestions of the sales except the {@link IShoppingSaleQuestion.secret}\nvalue is `false`."
    },
    {
      "name": "shoppings_customers_sales_questions_update",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Update info of the question",
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "id": {
            "description": " Target question's {@link IShoppingSaleQuestion.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IBbsArticle.ICreate"
          }
        },
        "required": [
          "saleId",
          "id",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IBbsArticle.ICreate": {
            "description": "Creation information of the article.",
            "type": "object",
            "properties": {
              "format": {
                "title": "Format of body",
                "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`.",
                "type": "string",
                "enum": [
                  "html",
                  "md",
                  "txt"
                ]
              },
              "title": {
                "title": "Title of article",
                "description": "Title of article.",
                "type": "string"
              },
              "body": {
                "title": "Content body of article",
                "description": "Content body of article.",
                "type": "string"
              },
              "files": {
                "title": "List of attachment files",
                "description": "List of attachment files.",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/IAttachmentFile.ICreate"
                }
              }
            },
            "required": [
              "format",
              "title",
              "body",
              "files"
            ]
          },
          "IAttachmentFile.ICreate": {
            "type": "object",
            "properties": {
              "name": {
                "title": "File name, except extension",
                "description": "File name, except extension.\n\nIf there's file `.gitignore`, then its name is an empty string.\n\n\n@maxLength 255",
                "type": "string"
              },
              "extension": {
                "title": "Extension",
                "description": "Extension.\n\nPossible to omit like `README` case.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@minLength 1\n@maxLength 8"
                  }
                ]
              },
              "url": {
                "title": "URL path of the real file",
                "description": "URL path of the real file.\n\n\n@format uri\n@contentMediaType image/*",
                "type": "string"
              }
            },
            "required": [
              "name",
              "extension",
              "url"
            ]
          }
        }
      },
      "description": "Update a question.\n\nUpdate a {@link IShoppingSaleQuestion question}'s content.\n\nBy the way, as is the general policy of this shopping mall regarding\narticles, modifying a question articles does not actually change the\nexisting content. Modified content is accumulated and recorded in the\nexisting article record as a new\n{@link IShoppingSaleQuestion.ISnapshot snapshot}. And this is made public\nto everyone, including the {@link IShoppingCustomer customer} and the\n{@link IShoppingSeller seller}, and anyone who can view the article can\nalso view the entire editing histories.\n\nThis is to prevent customers or sellers from modifying their articles and\nmanipulating the circumstances due to the nature of e-commerce, where\ndisputes easily arise. That is, to preserve evidence."
    },
    {
      "name": "shoppings_customers_sales_reviews_comments_create",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Creation info of the inquiry comment",
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "inquiryId": {
            "description": " Target inquiry's {@link IShoppingSaleInquiry.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingSaleInquiryComment.ICreate"
          }
        },
        "required": [
          "saleId",
          "inquiryId",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingSaleInquiryComment.ICreate": {
            "description": "Creation information of the comment.",
            "type": "object",
            "properties": {
              "format": {
                "title": "Format of body",
                "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`.",
                "type": "string",
                "enum": [
                  "html",
                  "md",
                  "txt"
                ]
              },
              "body": {
                "title": "Content body of comment",
                "description": "Content body of comment.",
                "type": "string"
              },
              "files": {
                "title": "List of attachment files",
                "description": "List of attachment files.",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/IAttachmentFile.ICreate"
                }
              }
            },
            "required": [
              "format",
              "body",
              "files"
            ]
          },
          "IAttachmentFile.ICreate": {
            "type": "object",
            "properties": {
              "name": {
                "title": "File name, except extension",
                "description": "File name, except extension.\n\nIf there's file `.gitignore`, then its name is an empty string.\n\n\n@maxLength 255",
                "type": "string"
              },
              "extension": {
                "title": "Extension",
                "description": "Extension.\n\nPossible to omit like `README` case.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@minLength 1\n@maxLength 8"
                  }
                ]
              },
              "url": {
                "title": "URL path of the real file",
                "description": "URL path of the real file.\n\n\n@format uri\n@contentMediaType image/*",
                "type": "string"
              }
            },
            "required": [
              "name",
              "extension",
              "url"
            ]
          }
        }
      },
      "description": "Create an inquiry comment.\n\nCreate an {@link IShoppingSaleInquiryComment inquiry comment} of a\n{@link IShoppingSaleQuestion question} or {@link IShoppingSaleReview review}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\ncreate an inquiry comment to your own {@link IShoppingSale sale}'s inquiry.\nOtherwise, you can create an inquiry comment to every inquiries of the sales."
    },
    {
      "name": "shoppings_customers_sales_reviews_comments_index",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Request info of pagination, searching and sorting",
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "inquiryId": {
            "description": " Belonged inquiry's {@link IShoppingSaleInquiry.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingSaleInquiryComment.IRequest"
          }
        },
        "required": [
          "saleId",
          "inquiryId",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingSaleInquiryComment.IRequest": {
            "description": "Request of the comments with pagination and searching/sorting options.",
            "type": "object",
            "properties": {
              "search": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingSaleInquiryComment.IRequest.ISearch"
                  }
                ]
              },
              "sort": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "-created_at",
                        "+created_at"
                      ]
                    }
                  }
                ]
              },
              "page": {
                "title": "Page number",
                "description": "Page number.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Limitation of records per a page",
                "description": "Limitation of records per a page.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingSaleInquiryComment.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "name": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "nickname": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "body": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            "required": []
          }
        }
      },
      "description": "List up every inquiry comments.\n\nList up every {@link IShoppingSaleInquiryComment inquiry comments} of a\n{@link IShoppingSaleQuestion question} or {@link IShoppingSaleReview review}\nwith {@link IPage pagination}.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingSaleInquiryComment.IRequest.search search condition} in the\nrequest body. Also, it is possible to customize sequence order of records\nby configuring {@link IShoppingSaleInquiryComment.IRequest.sort sort condition}.\n\nBy the way, if you're a {@link IShoppingSeller seller}, you can only access\nto the your own {@link IShoppingSale sale}'s inquiries. Otherwise, you\ncan access to every inquiries of the sales."
    },
    {
      "name": "shoppings_customers_sales_reviews_comments_at",
      "parameters": {
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "inquiryId": {
            "description": " Belonged inquiry's {@link IShoppingSaleInquiry.id }\n\n\n@format uuid",
            "type": "string"
          },
          "id": {
            "description": " Target inquiry comment's {@link IShoppingSaleInquiryComment.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "saleId",
          "inquiryId",
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get an inquiry comment info.\n\nGet a detailed {@link IShoppingSaleInquiryComment inquiry comment}\ninformation of a {@link IShoppingSaleQuestion question} or\n{@link IShoppingSaleReview review}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s inquiry comment.\nOtherwise, you can access to every inquiry comments of the sales."
    },
    {
      "name": "shoppings_customers_sales_reviews_comments_update",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Update info of the inquiry comment",
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "inquiryId": {
            "description": " Belonged inquiry's {@link IShoppingSaleInquiry.id }\n\n\n@format uuid",
            "type": "string"
          },
          "id": {
            "description": " Target inquiry comment's {@link IShoppingSaleInquiryComment.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingSaleInquiryComment.ICreate"
          }
        },
        "required": [
          "saleId",
          "inquiryId",
          "id",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingSaleInquiryComment.ICreate": {
            "description": "Creation information of the comment.",
            "type": "object",
            "properties": {
              "format": {
                "title": "Format of body",
                "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`.",
                "type": "string",
                "enum": [
                  "html",
                  "md",
                  "txt"
                ]
              },
              "body": {
                "title": "Content body of comment",
                "description": "Content body of comment.",
                "type": "string"
              },
              "files": {
                "title": "List of attachment files",
                "description": "List of attachment files.",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/IAttachmentFile.ICreate"
                }
              }
            },
            "required": [
              "format",
              "body",
              "files"
            ]
          },
          "IAttachmentFile.ICreate": {
            "type": "object",
            "properties": {
              "name": {
                "title": "File name, except extension",
                "description": "File name, except extension.\n\nIf there's file `.gitignore`, then its name is an empty string.\n\n\n@maxLength 255",
                "type": "string"
              },
              "extension": {
                "title": "Extension",
                "description": "Extension.\n\nPossible to omit like `README` case.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@minLength 1\n@maxLength 8"
                  }
                ]
              },
              "url": {
                "title": "URL path of the real file",
                "description": "URL path of the real file.\n\n\n@format uri\n@contentMediaType image/*",
                "type": "string"
              }
            },
            "required": [
              "name",
              "extension",
              "url"
            ]
          }
        }
      },
      "description": "Update an inquiry comment.\n\nUpdate an {@link IShoppingSaleInquiryComment inquiry comment} to a specific\n{@link IShoppingSaleQuestion question} or {@link IShoppingSaleReview review}.\n\nBy the way, as is the general policy of this shopping mall regarding\ncomments, modifying a comment does not actually change the existing content.\nModified content is accumulated and recorded in the existing comment record\nas a new {@link IShoppingSaleInquiryComment.ISnapshot snapshot}. And this\nis made public to everyone, who can read this inquiry comment.\n\nThis is to prevent customers or sellers from modifying their comments and\nmanipulating the circumstances due to the nature of e-commerce, where\ndisputes easily arise. That is, to preserve evidence."
    },
    {
      "name": "shoppings_customers_sales_reviews_create",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Creation info of the review",
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingSaleReview.ICreate"
          }
        },
        "required": [
          "saleId",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingSaleReview.ICreate": {
            "description": "Creation information of the review.",
            "type": "object",
            "properties": {
              "good_id": {
                "title": "Target good's {@link IShoppingOrderGood.id}",
                "description": "Target good's {@link IShoppingOrderGood.id}.\n\n\n@format uuid",
                "type": "string"
              },
              "score": {
                "title": "Score of the review",
                "description": "Score of the review.\n\n\n@minimum 0\n@maximum 100",
                "type": "number"
              },
              "format": {
                "title": "Format of body",
                "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`.",
                "type": "string",
                "enum": [
                  "html",
                  "md",
                  "txt"
                ]
              },
              "title": {
                "title": "Title of article",
                "description": "Title of article.",
                "type": "string"
              },
              "body": {
                "title": "Content body of article",
                "description": "Content body of article.",
                "type": "string"
              },
              "files": {
                "title": "List of attachment files",
                "description": "List of attachment files.",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/IAttachmentFile.ICreate"
                }
              }
            },
            "required": [
              "good_id",
              "score",
              "format",
              "title",
              "body",
              "files"
            ]
          },
          "IAttachmentFile.ICreate": {
            "type": "object",
            "properties": {
              "name": {
                "title": "File name, except extension",
                "description": "File name, except extension.\n\nIf there's file `.gitignore`, then its name is an empty string.\n\n\n@maxLength 255",
                "type": "string"
              },
              "extension": {
                "title": "Extension",
                "description": "Extension.\n\nPossible to omit like `README` case.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@minLength 1\n@maxLength 8"
                  }
                ]
              },
              "url": {
                "title": "URL path of the real file",
                "description": "URL path of the real file.\n\n\n@format uri\n@contentMediaType image/*",
                "type": "string"
              }
            },
            "required": [
              "name",
              "extension",
              "url"
            ]
          }
        }
      },
      "description": "Write a review article.\n\nWhen a {@link IShoppingCustomer customer} has purchased a specific\n{@link IShoppingSale sale} and get {@link IShoppingDelivery delivered} it,\nhe/she can write a {@link IShoppingSaleReview review} article about the sale.\n\nIf try to write a review article without purchasing or the delivery has not\nbeen completed, 428 unprocessable entity error would be thrown. Also, the\ncustomer can write multiple review articles per an order, but the next\narticle can be written after 2 weeks from the previous article. If not,\n428 unprocessable entity error would be thrown, either."
    },
    {
      "name": "shoppings_customers_sales_reviews_index",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Request info of pagination, searching and sorting",
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingSaleReview.IRequest"
          }
        },
        "required": [
          "saleId",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingSaleReview.IRequest": {
            "description": "Request of summarized information with pagination searching/sorting options.",
            "type": "object",
            "properties": {
              "search": {
                "title": "Search conditions",
                "description": "Search conditions.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingSaleReview.IRequest.ISearch"
                  }
                ]
              },
              "sort": {
                "title": "Sorting conditions",
                "description": "Sorting conditions.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "-nickname",
                        "-answered_at",
                        "-created_at",
                        "-updated_at",
                        "-title",
                        "-score",
                        "+nickname",
                        "+answered_at",
                        "+created_at",
                        "+updated_at",
                        "+title",
                        "+score"
                      ]
                    }
                  }
                ]
              },
              "page": {
                "title": "Page number",
                "description": "Page number.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Limitation of records per a page",
                "description": "Limitation of records per a page.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingSaleReview.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "name": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "nickname": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "answered": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "title": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "body": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "title_or_body": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "from": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format date-time"
                  }
                ]
              },
              "to": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format date-time"
                  }
                ]
              },
              "minimum": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number",
                    "description": "@minimum 0\n@maximum 100"
                  }
                ]
              },
              "maximum": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number",
                    "description": "@minimum 0\n@maximum 100"
                  }
                ]
              }
            },
            "required": []
          }
        }
      },
      "description": "List up every summarized reviews.\n\nList up every {@link IShoppingSaleReview.ISummary summarized reviews} of a\n{@link IShoppingSale sale}.\n\nAs you can see, returned reviews are summarized, not detailed. If you want\nto get the detailed information of a review, use {@link adridges} function\nor {@link at} function for each article.\n\nAlso, returned review has {@link IShoppingSaleReview.ISummary.answer}\nproperty which means the formal answer from the {@link IShoppingSeller}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s reviews. Otherwise,\nyou can access to every reviews of the sales.\n\nBy the way, if you want, you can limit the result by configuring\n{@link IShoppingSaleReview.IRequest.search search condition} in the\nrequest body. Also, it is possible to customize sequence order of records\nby configuring {@link IShoppingSaleReview.IRequest.sort sort condition}."
    },
    {
      "name": "shoppings_customers_sales_reviews_at",
      "parameters": {
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "id": {
            "description": " Target review's {@link IShoppingSaleReview.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "saleId",
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a review info.\n\nGet a detailed {@link IShoppingSaleReview review} information of a\n{@link IShoppingSale sale}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s review. Otherwise\nyou are a {@link IShoppingCustomer customer}, you can access to every\nreviews of the sales."
    },
    {
      "name": "shoppings_customers_sales_reviews_update",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Update info of the review",
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "id": {
            "description": " Target review's {@link IShoppingSaleReview.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingSaleReview.IUpdate"
          }
        },
        "required": [
          "saleId",
          "id",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingSaleReview.IUpdate": {
            "description": "Updating information of the review.",
            "type": "object",
            "properties": {
              "score": {
                "title": "Score of the review",
                "description": "Score of the review.\n\n\n@minimum 0\n@maximum 100",
                "type": "number"
              },
              "format": {
                "title": "Format of body",
                "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`.",
                "type": "string",
                "enum": [
                  "html",
                  "md",
                  "txt"
                ]
              },
              "title": {
                "title": "Title of article",
                "description": "Title of article.",
                "type": "string"
              },
              "body": {
                "title": "Content body of article",
                "description": "Content body of article.",
                "type": "string"
              },
              "files": {
                "title": "List of attachment files",
                "description": "List of attachment files.",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/IAttachmentFile.ICreate"
                }
              }
            },
            "required": [
              "score",
              "format",
              "title",
              "body",
              "files"
            ]
          },
          "IAttachmentFile.ICreate": {
            "type": "object",
            "properties": {
              "name": {
                "title": "File name, except extension",
                "description": "File name, except extension.\n\nIf there's file `.gitignore`, then its name is an empty string.\n\n\n@maxLength 255",
                "type": "string"
              },
              "extension": {
                "title": "Extension",
                "description": "Extension.\n\nPossible to omit like `README` case.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@minLength 1\n@maxLength 8"
                  }
                ]
              },
              "url": {
                "title": "URL path of the real file",
                "description": "URL path of the real file.\n\n\n@format uri\n@contentMediaType image/*",
                "type": "string"
              }
            },
            "required": [
              "name",
              "extension",
              "url"
            ]
          }
        }
      },
      "description": "Update a review.\n\nUpdadte a {@link IShoppingSaleReview review}'s content and score.\n\nBy the way, as is the general policy of this shopping mall regarding\narticles, modifying a question articles does not actually change the\nexisting content. Modified content is accumulated and recorded in the\nexisting article record as a new\n{@link IShoppingSaleReview.ISnapshot snapshot}. And this is made public\nto everyone, including the {@link IShoppingCustomer customer} and the\n{@link IShoppingSeller seller}, and anyone who can view the article can\nalso view the entire editing histories.\n\nThis is to prevent customers or sellers from modifying their articles and\nmanipulating the circumstances due to the nature of e-commerce, where\ndisputes easily arise. That is, to preserve evidence."
    },
    {
      "name": "shoppings_customers_sales_reviews_abridges",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Request info of pagination, searching and sorting",
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingSaleReview.IRequest"
          }
        },
        "required": [
          "saleId",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingSaleReview.IRequest": {
            "description": "Request of summarized information with pagination searching/sorting options.",
            "type": "object",
            "properties": {
              "search": {
                "title": "Search conditions",
                "description": "Search conditions.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingSaleReview.IRequest.ISearch"
                  }
                ]
              },
              "sort": {
                "title": "Sorting conditions",
                "description": "Sorting conditions.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "-nickname",
                        "-answered_at",
                        "-created_at",
                        "-updated_at",
                        "-title",
                        "-score",
                        "+nickname",
                        "+answered_at",
                        "+created_at",
                        "+updated_at",
                        "+title",
                        "+score"
                      ]
                    }
                  }
                ]
              },
              "page": {
                "title": "Page number",
                "description": "Page number.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Limitation of records per a page",
                "description": "Limitation of records per a page.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingSaleReview.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "name": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "nickname": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "answered": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "title": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "body": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "title_or_body": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "from": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format date-time"
                  }
                ]
              },
              "to": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format date-time"
                  }
                ]
              },
              "minimum": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number",
                    "description": "@minimum 0\n@maximum 100"
                  }
                ]
              },
              "maximum": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number",
                    "description": "@minimum 0\n@maximum 100"
                  }
                ]
              }
            },
            "required": []
          }
        }
      },
      "description": "List up every abridged reviews.\n\nList up every {@link IShoppingSaleReview.IAbridge abridged reviews} of\na {@link IShoppingSale sale}.\n\nAs you can see, returned reviews are abridged, not detailed. If you want\nto get the detailed information of a review, use {@link at} function\nfor each article.\n\nAlso, returned review has {@link IShoppingSaleReview.IAridge.answer}\nproperty which means the formal answer from the {@link IShoppingSeller}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s reviews. Otherwise,\nyou can access to every reviews of the sales.\n\nBy the way, if you want, you can limit the result by configuring\n{@link IShoppingSaleReview.IRequest.search search condition} in the\nrequest body. Also, it is possible to customize sequence order of records\nby configuring {@link IShoppingSaleReview.IRequest.sort sort condition}."
    },
    {
      "name": "shoppings_customers_sales_snapshots_index",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Requestion info of pagination",
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Target sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IPage.IRequest"
          }
        },
        "required": [
          "saleId",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IPage.IRequest": {
            "description": "Page request data",
            "type": "object",
            "properties": {
              "page": {
                "title": "Page number",
                "description": "Page number.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Limitation of records per a page",
                "description": "Limitation of records per a page.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          }
        }
      },
      "description": "List up every snapshots.\n\nWhenever {@link IShoppingSeller seller} updates a\n{@link IShoppingSale sale}, the sale record is not updated but a new\n{@link IShoppingSaleSnapshot snapshot} record is created to keep the\nintegrity of the sale history. This API function is for listing up\nsuch snapshot records.\n\nAlso, as you can see from the return type, returned snapshots are\nsummarized, not detailed. If you want to get the detailed information\nof a snapshot, use {@link at} or {@link flipo} function for each snapshot.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s snapshots. Otherwise,\nyou can access to every snapshots of the sales even though the sale has\nbeen closed or suspended."
    },
    {
      "name": "shoppings_customers_sales_snapshots_at",
      "parameters": {
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "id": {
            "description": " Target snapshot's {@link IShoppingSaleSnapshot.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "saleId",
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a snapshot info.\n\nGet a {@link IShoppingSaleSnapshot snapshot} with detailed information.\n\nAs you can see from the return type, returned snapshot does not contain\nthe {@link IShoppingSale sale} info. If you want to get the sale info,\nuse the {@link flip} function instead.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s snapshots. Otherwise,\nyou can access to every snapshots of the sales even though the sale has\nbeen closed or suspended."
    },
    {
      "name": "shoppings_customers_sales_snapshots_flip",
      "parameters": {
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "id": {
            "description": " Target snapshot's {@link IShoppingSaleSnapshot.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "saleId",
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a flipped snapshot info.\n\nGet a {@link IShoppingSale sale} info of a flipped snapshot.\n\nAs you can see from the return type, this function returns the\n{@link IShoppingSale sale} info. By the way, the sale info is not the\nlatest one, but a flipped info in the snapshot side.\n\nAlso, if you're a {@link IShoppingSeller seller}, you can only access to\nthe your own {@link IShoppingSale sale}'s snapshots. Otherwise, you can\naccess to every snapshots of the sales even though the sale has been\nclosed or suspended."
    },
    {
      "name": "shoppings_customers_systematic_channels_categories_index",
      "parameters": {
        "type": "object",
        "properties": {
          "channelCode": {
            "description": " Belonged channel's {@link IShoppingChannel.code }",
            "type": "string"
          }
        },
        "required": [
          "channelCode"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "List up every categories with children records.\n\nList up every {@link IShoppingChannelCategory.IHierarchical categories}\nof a {@link IShoppingChannel channel} with pagination. Returned categories\ncontain children categories, too.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingChannelCategory.IRequest.search search condition} in the\nrequest body. Also, it is possible to customize sequence order of records\nby configuring {@link IShoppingChannelCategory.IRequest.sort sort condition}."
    },
    {
      "name": "shoppings_customers_systematic_channels_categories_at",
      "parameters": {
        "type": "object",
        "properties": {
          "channelCode": {
            "description": " Belonged channel's {@link IShoppingChannel.code }",
            "type": "string"
          },
          "id": {
            "description": " Target category's {@link IShoppingChannelCategory.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "channelCode",
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a category info.\n\nGet a detailed {@link IShoppingChannelCategory category} information.\n\nReturned category contains hierarchical children categories, and also\ncontains the recursive parent categories, too."
    },
    {
      "name": "shoppings_customers_systematic_channels_categories_invert",
      "parameters": {
        "type": "object",
        "properties": {
          "channelCode": {
            "description": " Belonged channel's {@link IShoppingChannel.code }",
            "type": "string"
          },
          "id": {
            "description": " Target category's {@link IShoppingChannelCategory.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "channelCode",
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a category info of inverted.\n\nGet a inverted {@link IShoppingChannelCategory.IInvert category} information.\n\nReturned category contains the recursive parent categories, but not contains\nthe hierarchical children categories."
    },
    {
      "name": "shoppings_customers_systematic_channels_index",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Request info of pagination, searching and sorting",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingChannel.IRequest"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingChannel.IRequest": {
            "description": "Request of the channels with pagination and searching/sorting options.",
            "type": "object",
            "properties": {
              "search": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingChannel.IRequest.ISearch"
                  }
                ]
              },
              "sort": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "-channel.code",
                        "-channel.name",
                        "-channel.created_at",
                        "+channel.code",
                        "+channel.name",
                        "+channel.created_at"
                      ]
                    }
                  }
                ]
              },
              "page": {
                "title": "Page number",
                "description": "Page number.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Limitation of records per a page",
                "description": "Limitation of records per a page.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingChannel.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "code": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "name": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            "required": []
          }
        }
      },
      "description": "List up every channels.\n\nList up every {@link IShoppingChannel channels} with pagination.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingChannel.IRequest.search search condition} in the request\nbody. Also, it is possible to customize sequence order of records by\nconfiguring {@link IShoppingChannel.IRequest.sort sort condition}."
    },
    {
      "name": "shoppings_customers_systematic_channels_hierarchical",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Request info of pagination, searching and sorting",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingChannel.IRequest"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingChannel.IRequest": {
            "description": "Request of the channels with pagination and searching/sorting options.",
            "type": "object",
            "properties": {
              "search": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingChannel.IRequest.ISearch"
                  }
                ]
              },
              "sort": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "-channel.code",
                        "-channel.name",
                        "-channel.created_at",
                        "+channel.code",
                        "+channel.name",
                        "+channel.created_at"
                      ]
                    }
                  }
                ]
              },
              "page": {
                "title": "Page number",
                "description": "Page number.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Limitation of records per a page",
                "description": "Limitation of records per a page.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingChannel.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "code": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "name": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            "required": []
          }
        }
      },
      "description": "List up every channels with nested categories.\n\nList up every {@link IShoppingChannel.IHierarchical channels} with\n{@link IPage pagination}. Returned channels contain nested hierarchical\n{@link IShoppingChannelCategory.IHierarchical categories}.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingChannel.IRequest.search search condition} in the request\nbody. Also, it is possible to customize sequence order of records by\nconfiguring {@link IShoppingChannel.IRequest.sort sort condition}."
    },
    {
      "name": "shoppings_customers_systematic_channels_at",
      "parameters": {
        "type": "object",
        "properties": {
          "id": {
            "description": " Target channel's {@link IShoppingChannel.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a channel info.\n\nGet a detailed {@link IShoppingChannel.IHierarchical channel} information.\n\nReturned channel instance also contains the nested\n{@link IShoppingChannelCategory.IHierarchical hierarchical category}\ninformation."
    },
    {
      "name": "shoppings_customers_systematic_channels_get",
      "parameters": {
        "type": "object",
        "properties": {
          "code": {
            "description": " Target channel's {@link IShoppingChannel.code }",
            "type": "string"
          }
        },
        "required": [
          "code"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a channel info by its code.\n\nGet a detailed {@link IShoppingChannel.IHierarchical channel} information\nby its code.\n\nReturned channel instance also contains the nested\n{@link IShoppingChannelCategory.IHierarchical hierarchical category}\ninformation."
    },
    {
      "name": "shoppings_customers_systematic_sections_index",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Request info of pagination, searching and sorting",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingSection.IRequest"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingSection.IRequest": {
            "description": "Request of the sections with pagination and searching/sorting options.",
            "type": "object",
            "properties": {
              "search": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingSection.IRequest.ISearch"
                  }
                ]
              },
              "sort": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "-section.code",
                        "-section.name",
                        "-section.created_at",
                        "+section.code",
                        "+section.name",
                        "+section.created_at"
                      ]
                    }
                  }
                ]
              },
              "page": {
                "title": "Page number",
                "description": "Page number.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Limitation of records per a page",
                "description": "Limitation of records per a page.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingSection.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "code": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "name": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            "required": []
          }
        }
      },
      "description": "List up every sections.\n\nList up every {@link IShoppingSection sections} with pagination.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingSection.IRequest.search search condition} in the request\nbody. Also, it is possible to customize sequence order of records by\nconfiguring {@link IShoppingSection.IRequest.sort sort condition}."
    },
    {
      "name": "shoppings_customers_systematic_sections_at",
      "parameters": {
        "type": "object",
        "properties": {
          "id": {
            "description": " Target section's {@link IShoppingSection.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a section info.\n\nGet a detailed {@link IShoppingSection section} information."
    },
    {
      "name": "shoppings_customers_systematic_sections_get",
      "parameters": {
        "type": "object",
        "properties": {
          "code": {
            "description": " Target section's {@link IShoppingSection.code }",
            "type": "string"
          }
        },
        "required": [
          "code"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a section info by its code.\n\nGet a detailed {@link IShoppingSection section} information by its code."
    },
    {
      "name": "shoppings_sellers_authenticate_get",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": [],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get seller information.\n\nGet {@link IShoppingSeller.IInvert seller} information of\ncurrent {@link IShoppingCustomer customer}.\n\nIf current {@link IShoppingMember member} is not an seller,\nit throws 403 forbidden exception."
    },
    {
      "name": "shoppings_sellers_authenticate_join",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Joining request info",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingSeller.IJoin"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingSeller.IJoin": {
            "type": "object",
            "properties": {},
            "required": []
          }
        }
      },
      "description": "Join as an seller.\n\nJoin as an seller with {@link IShoppingSeller.IJoin joining info}.\n\nThis method is allowed only when the {@link IShoppingCustomer customer} already\nhas joined the {@link IShoppingMember membership}. IF not, he (she) must\naccomplish it before. If not, 403 forbidden exception would be thrown."
    },
    {
      "name": "shoppings_sellers_authenticate_login",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Login request info",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingMember.ILogin"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingMember.ILogin": {
            "description": "Login request info.",
            "type": "object",
            "properties": {
              "email": {
                "title": "Email address of member",
                "description": "Email address of member.\n\nIf the member has multiple email addresses, just use one of them.\n\n\n@format email",
                "type": "string"
              },
              "password": {
                "title": "Password of the member account",
                "description": "Password of the member account.",
                "type": "string"
              }
            },
            "required": [
              "email",
              "password"
            ]
          }
        }
      },
      "description": "Login as an seller.\n\nLogin as an seller with {@link IShoppingSeller.ILogin login info}.\n\nThis method has exactly same effect with\n{@link ShoppingApi.functional.customers.authenticate.login} function, but\nreturned type is a llttle different. The similar function returns\n{@link IShoppingCustomer} type that starting from the customer information, so\nthat you have to access to the seller info through\n`customer.member.seller`. In contrast with that, this method returns\n{@link IShoppingSeller.IInvert} type that starting from the seller\ninfo, so that can access to the customer info through `seller.customer`.\n\nOf course, to use this function, you had to {@link join} as an seller\nbefore. If not, 403 forbidden exception would be thrown,"
    },
    {
      "name": "shoppings_sellers_deliveries_create",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Creation info of delivery",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingDelivery.ICreate"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingDelivery.ICreate": {
            "description": "Creation information of the delivery.",
            "type": "object",
            "properties": {
              "pieces": {
                "title": "List of pieces of the delivery",
                "description": "List of pieces of the delivery.\n\n\n@minItems 1",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/IShoppingDeliveryPiece.ICreate"
                }
              },
              "journeys": {
                "title": "List of journeys of the delivery",
                "description": "List of journeys of the delivery.\n\nThis is initial data, and it is also possible to accumulate journey data\nafter the delivery creation.",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/IShoppingDeliveryJourney.ICreate"
                }
              },
              "shippers": {
                "title": "List of shippers of the delivery",
                "description": "List of shippers of the delivery.",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/IShoppingDeliveryShipper.ICreate"
                }
              }
            },
            "required": [
              "pieces",
              "journeys",
              "shippers"
            ]
          },
          "IShoppingDeliveryPiece.ICreate": {
            "description": "Creation information of the delivery piece.",
            "type": "object",
            "properties": {
              "publish_id": {
                "title": "Target order's {@link IShoppingOrderPublish.id}",
                "description": "Target order's {@link IShoppingOrderPublish.id}.\n\n\n@format uuid",
                "type": "string"
              },
              "good_id": {
                "title": "Target good's {@link IShoppingOrderGood.id}",
                "description": "Target good's {@link IShoppingOrderGood.id}.\n\n\n@format uuid",
                "type": "string"
              },
              "stock_id": {
                "title": "Target stock's {@link IShoppingSaleUnitStock.id}",
                "description": "Target stock's {@link IShoppingSaleUnitStock.id}.\n\n\n@format uuid",
                "type": "string"
              },
              "quantity": {
                "title": "Quantity of the stock",
                "description": "Quantity of the stock.\n\nIt can be precision value to express split shipping.\n\n\n@minimum 0",
                "type": "number"
              }
            },
            "required": [
              "publish_id",
              "good_id",
              "stock_id",
              "quantity"
            ]
          },
          "IShoppingDeliveryJourney.ICreate": {
            "description": "Creation information of the delivery journey.",
            "type": "object",
            "properties": {
              "type": {
                "title": "Type of journey",
                "description": "Type of journey.\n\n- preparing\n- manufacturing\n- shipping\n- delivering",
                "type": "string",
                "enum": [
                  "preparing",
                  "manufacturing",
                  "shipping",
                  "delivering"
                ]
              },
              "title": {
                "title": "Title of journey",
                "description": "Title of journey.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "description": {
                "title": "Description of journey",
                "description": "Description of journey.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "started_at": {
                "title": "Start time of the journey",
                "description": "Start time of the journey.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format date-time"
                  }
                ]
              },
              "completed_at": {
                "title": "Completion time of the journey",
                "description": "Completion time of the journey.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format date-time"
                  }
                ]
              }
            },
            "required": [
              "type",
              "title",
              "description",
              "started_at",
              "completed_at"
            ]
          },
          "IShoppingDeliveryShipper.ICreate": {
            "type": "object",
            "properties": {
              "company": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "name": {
                "type": "string"
              },
              "mobile": {
                "type": "string"
              }
            },
            "required": [
              "company",
              "name",
              "mobile"
            ]
          }
        }
      },
      "description": "Create a delivery.\n\nCreate a {@link IShoppingDelivery delivery} record targeting\n{@link IShoppingOrder orders}, their {@link IShoppingOrderGood goods} and\n{@link IShoppingSaleUnitStock stocks} ({@link IShoppingDeliveryPiece}) with\n{@link IShoppingDeliveryJourney journeys} and\n{@link IShoppingDeliveryShipper shippers} info.\n\nNote that, composition of the {@link IShoppingDeliveryPiece} must not over\nthe required. To identify which pieces are required, recommend to call\nthe {@link incompletes} function with target orders'\n{@link IShoppingOrderPublish.id}s before calling this one."
    },
    {
      "name": "shoppings_sellers_deliveries_index",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Request info of pagination, searching and sorting",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingDelivery.IRequest"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingDelivery.IRequest": {
            "type": "object",
            "properties": {
              "sort": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "-delivery.created_at",
                        "+delivery.created_at"
                      ]
                    }
                  }
                ]
              },
              "page": {
                "title": "Page number",
                "description": "Page number.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Limitation of records per a page",
                "description": "Limitation of records per a page.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          }
        }
      },
      "description": "Get list of deliveries.\n\nGet list of {@link IShoppingDelivery.IInvert deliveries} of current\n{@link IShoppingSeller seller} with {@link IPage pagination}.\n\nFor reference, returned deliveries are containing the target\n{@link IShoppingOrder.IInvertFromDelivery order} information. Of course,\nonly related {@link IShoppingOrderGood goods} are contained in the orders.\n\nAdditionally, you can limit the result by configuring\n{@link IShoppingDelivery.IRequest.search search condition} in the request\nbody. Also, it is possible to customize sequence order of records by\nconfiguring {@link IShoppingDelivery.IRequest.sort sort condition}."
    },
    {
      "name": "shoppings_sellers_deliveries_at",
      "parameters": {
        "type": "object",
        "properties": {
          "id": {
            "description": " Target delivery's {@link IShoppingDelivery.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a delivery.\n\nGet a {@link IShoppingDelivery.IInvert delivery} information with its ID.\n\nFor reference, returned delivery is containing the target\n{@link IShoppingOrder.IInvertFromDelivery order} information. Of course,\nonly related {@link IShoppingOrderGood goods} are contained in the orders."
    },
    {
      "name": "shoppings_sellers_deliveries_incompletes",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> List of target orders' ",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingDeliveryPiece.IRequest"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingDeliveryPiece.IRequest": {
            "type": "object",
            "properties": {
              "publish_ids": {
                "type": "array",
                "items": {
                  "description": "@format uuid",
                  "type": "string"
                }
              }
            },
            "required": [
              "publish_ids"
            ]
          }
        }
      },
      "description": "Get list of incomplete pieces.\n\nGet list of {@link IShoppingDeliveryPiece incomplete pieces} of target\norders' {@link IShoppingOrderPublish.id}s.\n\nIf you specify target orders' publish IDs, then this function returns\nincompleted pieces of the orders with computation as an Array of\n{@link IShoppingDeliveryPiece.ICreate} type.\n\nYou can utillize the result to make a huge {@link IShoppingDelivery delivery}\nfor integrated delivering, and also possible to make multiple deliveries for\nsplit delivering."
    },
    {
      "name": "shoppings_sellers_deliveries_journeys_create",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Creation info of the journey",
        "type": "object",
        "properties": {
          "deliveryId": {
            "description": " Belonged delivery's {@link IShoppingDelivery.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingDeliveryJourney.ICreate"
          }
        },
        "required": [
          "deliveryId",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingDeliveryJourney.ICreate": {
            "description": "Creation information of the delivery journey.",
            "type": "object",
            "properties": {
              "type": {
                "title": "Type of journey",
                "description": "Type of journey.\n\n- preparing\n- manufacturing\n- shipping\n- delivering",
                "type": "string",
                "enum": [
                  "preparing",
                  "manufacturing",
                  "shipping",
                  "delivering"
                ]
              },
              "title": {
                "title": "Title of journey",
                "description": "Title of journey.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "description": {
                "title": "Description of journey",
                "description": "Description of journey.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "started_at": {
                "title": "Start time of the journey",
                "description": "Start time of the journey.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format date-time"
                  }
                ]
              },
              "completed_at": {
                "title": "Completion time of the journey",
                "description": "Completion time of the journey.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format date-time"
                  }
                ]
              }
            },
            "required": [
              "type",
              "title",
              "description",
              "started_at",
              "completed_at"
            ]
          }
        }
      },
      "description": "Create a new journey.\n\nCreate a new {@link IShoppingDeliveryJourney journey} of the\n{@link IShoppingDelivery delivery}.\n\nThis action may change the related {@link IShoppingOrderGood.state}.\nAlso, if the target journey's type is \"delivering\", whether the property\n{@link IShoppingDeliveryJourney.completed_at} is null or not affects to\nthe related goods' states. If the property is not null, the state becomes\n\"arrived\". Otherwise, the state becomes \"delivering\"."
    },
    {
      "name": "shoppings_sellers_deliveries_journeys_complete",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Completion time of the journey",
        "type": "object",
        "properties": {
          "deliveryId": {
            "description": " Belonged delivery's {@link IShoppingDelivery.id }\n\n\n@format uuid",
            "type": "string"
          },
          "id": {
            "description": " Target journey's {@link IShoppingDeliveryJourney.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingDeliveryJourney.IComplete"
          }
        },
        "required": [
          "deliveryId",
          "id",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingDeliveryJourney.IComplete": {
            "description": "Completion information of the delivery journey.",
            "type": "object",
            "properties": {
              "completed_at": {
                "title": "Completion time of the journey",
                "description": "Completion time of the journey.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format date-time"
                  }
                ]
              }
            },
            "required": [
              "completed_at"
            ]
          }
        }
      },
      "description": "Complete a journey.\n\nComplete a {@link IShoppingDeliveryJourney journey} of the\n{@link IShoppingDelivery delivery}. In other words, fills the\n{@link IShoppingDeliveryJourney.completed_at} property with current time.\n\nIf the target journey's type is \"delivering\", this action may change\nthe related {@link IShoppingOrderGood.state goods' states} to be \"arrived\"."
    },
    {
      "name": "shoppings_sellers_deliveries_journeys_erase",
      "parameters": {
        "type": "object",
        "properties": {
          "deliveryId": {
            "description": " Belonged delivery's {@link IShoppingDelivery.id }\n\n\n@format uuid",
            "type": "string"
          },
          "id": {
            "description": " Target journey's {@link IShoppingDeliveryJourney.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "deliveryId",
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Erase a journey.\n\nErase a {@link IShoppingDeliveryJourney journey} of the\n{@link IShoppingDelivery delivery}.\n\nIf erasing journey is the last one of the belonged delivery, this action\nmay change the related {@link IShoppingOrderGood.state}. By erasing the last\njourney, the state rolls back to the previous."
    },
    {
      "name": "shoppings_sellers_deliveries_shippers_create",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Creation info of the shipper",
        "type": "object",
        "properties": {
          "deliveryId": {
            "description": " Belonged delivery's {@link IShoppingDelivery.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingDeliveryShipper.ICreate"
          }
        },
        "required": [
          "deliveryId",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingDeliveryShipper.ICreate": {
            "type": "object",
            "properties": {
              "company": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "name": {
                "type": "string"
              },
              "mobile": {
                "type": "string"
              }
            },
            "required": [
              "company",
              "name",
              "mobile"
            ]
          }
        }
      },
      "description": "Create a new shipper.\n\nCreate a new {@link IShoppingDeliveryShipper shipper} of the\n{@link IShoppingDelivery delivery}.\n\nThis action does not affect to the related {@link IShoppingOrder orders} or\n{@link IShoppingOrderGood goods} like {@link IShoppingDeliveryJourney}\nor {@link IShoppingDeliveryPiece} case, but just informs to the\n{@link IShoppingCustomer customer}."
    },
    {
      "name": "shoppings_sellers_coupons_create",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Creation info of the coupon",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingCoupon.ICreate"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingCoupon.ICreate": {
            "description": "Creation information of the coupon.\n\n### Description of {@link restriction} property:\n\n> Restriction information.",
            "type": "object",
            "properties": {
              "discount": {
                "title": "Discount information",
                "description": "Discount information.",
                "anyOf": [
                  {
                    "$ref": "#/$defs/IShoppingCouponDiscount.IAmount"
                  },
                  {
                    "$ref": "#/$defs/IShoppingCouponDiscount.IPercent"
                  }
                ]
              },
              "restriction": {
                "title": "Restriction information",
                "$ref": "#/$defs/IShoppingCouponRestriction"
              },
              "criterias": {
                "title": "List of criteria information",
                "description": "List of criteria information.",
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/$defs/IShoppingCouponSectionCriteria.ICreate"
                    },
                    {
                      "$ref": "#/$defs/IShoppingCouponSellerCriteria.ICreate"
                    },
                    {
                      "$ref": "#/$defs/IShoppingCouponSaleCriteria.ICreate"
                    },
                    {
                      "$ref": "#/$defs/IShoppingCouponFunnelCriteria.ICreate"
                    }
                  ]
                }
              },
              "disposable_codes": {
                "title": "Disposable codes for the coupon",
                "description": "Disposable codes for the coupon.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "title": "Representative name of the coupon",
                "description": "Representative name of the coupon.",
                "type": "string"
              },
              "opened_at": {
                "title": "Opening time of the coupon",
                "description": "Opening time of the coupon.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format date-time"
                  }
                ]
              },
              "closed_at": {
                "title": "Closing time of the coupon",
                "description": "Closing time of the coupon.\n\nTickets cannot be issued after this time.\n\nHowever, previously issued tickets can still be used until their\nexpiration date.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format date-time"
                  }
                ]
              }
            },
            "required": [
              "discount",
              "restriction",
              "criterias",
              "disposable_codes",
              "name",
              "opened_at",
              "closed_at"
            ]
          },
          "IShoppingCouponDiscount.IAmount": {
            "description": "Discount information with amount unit.",
            "type": "object",
            "properties": {
              "unit": {
                "title": "Discount unit as amount",
                "description": "Discount unit as amount.\n\nIt means the order price would be discounted by the amount value.",
                "type": "string",
                "enum": [
                  "amount"
                ]
              },
              "value": {
                "title": "Discount value as amount",
                "description": "Discount value as amount.",
                "type": "number"
              },
              "threshold": {
                "title": "Minimum purchase amount for discount",
                "description": "Minimum purchase amount for discount.\n\nWhen setting this value, discount coupons cannot be applied to\norder totals that are less than this value.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Maximum amount available for discount",
                "description": "Maximum amount available for discount.\n\nWhen this value is set, no further discount will be given no\nmatter how much you order. This property would be meaningful\nonly when the {@link multiplicative} is `true`.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number",
                    "description": "@exclusiveMinimum 0"
                  }
                ]
              },
              "multiplicative": {
                "title": "Multiplicative or not",
                "description": "Multiplicative or not.\n\nIf this property is `true`, the discount value would be multiplied\nto the {@link IShoppingCartCommodity.volume} or\n{@link IShoppingOrderGood.volume} value. Also, in that case,\nthe {@link limit} property would be meaningful.",
                "type": "boolean"
              }
            },
            "required": [
              "unit",
              "value",
              "threshold",
              "limit",
              "multiplicative"
            ]
          },
          "IShoppingCouponDiscount.IPercent": {
            "description": "Discount information with percent unit.",
            "type": "object",
            "properties": {
              "unit": {
                "title": "Discount unit as percent",
                "description": "Discount unit as percent.\n\nIt means the order price would be discounted by the percent value.",
                "type": "string",
                "enum": [
                  "percent"
                ]
              },
              "value": {
                "title": "Discount value as percent",
                "description": "Discount value as percent.\n\n\n@minimum 0\n@maximum 100",
                "type": "number"
              },
              "threshold": {
                "title": "Minimum purchase amount for discount",
                "description": "Minimum purchase amount for discount.\n\nWhen setting this value, discount coupons cannot be applied to\norder totals that are less than this value.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Maximum amount available for discount",
                "description": "Maximum amount available for discount.\n\nWhen this value is set, no further discount will be given no\nmatter how much you order.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number",
                    "description": "@exclusiveMinimum 0"
                  }
                ]
              }
            },
            "required": [
              "unit",
              "value",
              "threshold",
              "limit"
            ]
          },
          "IShoppingCouponRestriction": {
            "description": "Restriction information of the coupon.",
            "type": "object",
            "properties": {
              "access": {
                "title": "Access level of coupon",
                "description": "Access level of coupon.\n\n- public: possible to find from public API\n- private: unable to find from public API\n  - arbitrarily assigned by the seller or administrator\n  - issued from one-time link",
                "type": "string",
                "enum": [
                  "public",
                  "private"
                ]
              },
              "exclusive": {
                "title": "Exclusivity or not",
                "description": "Exclusivity or not.\n\nAn exclusive discount coupon refers to a discount coupon that has an\nexclusive relationship with other discount coupons and can only be\nused alone. That is, when an exclusive discount coupon is used, no\nother discount coupon can be used for the same\n{@link IShoppingOrder order} or {@link IShoppingOrderGood good}.\n\nPlease note that this exclusive attribute is a very different concept\nfrom multiplicative, which means whether the same coupon can be\nmultiplied and applied to multiple coupons of the same order, so\nplease do not confuse them.",
                "type": "boolean"
              },
              "volume": {
                "title": "Limited quantity issued",
                "description": "Limited quantity issued.\n\nIf there is a limit to the quantity issued, it becomes impossible\nto issue tickets exceeding this value.\n\nIn other words, the concept of N coupons being issued on\na first-come, first-served basis is created.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "volume_per_citizen": {
                "title": "Limited quantity issued per person",
                "description": "Limited quantity issued per person.\n\nAs a limit to the total amount of issuance per person, it is\ncommon to assign 1 to limit duplicate issuance to the same citizen,\nor to use the NULL value to set no limit.\n\nOf course, by assigning a value of N, the total amount issued\nto the same citizen can be limited.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "expired_in": {
                "title": "Expiration day(s) value",
                "description": "Expiration day(s) value.\n\nThe concept of expiring N days after a discount coupon ticket is issued.\n\nTherefore, customers must use the ticket within N days, if possible,\nfrom the time it is issued.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "expired_at": {
                "title": "Expiration date",
                "description": "Expiration date.\n\nA concept that expires after YYYY-MM-DD after a discount coupon ticket\nis issued.\n\nDouble restrictions are possible with expired_in, of which the one\nwith the shorter expiration date is used.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format date-time"
                  }
                ]
              }
            },
            "required": [
              "access",
              "exclusive",
              "volume",
              "volume_per_citizen",
              "expired_in",
              "expired_at"
            ]
          },
          "IShoppingCouponSectionCriteria.ICreate": {
            "description": "Creation information of the section criteria.",
            "type": "object",
            "properties": {
              "section_codes": {
                "title": "List of target section's {@link IShoppingSection.code}s",
                "description": "List of target section's {@link IShoppingSection.code}s.\n\n\n@minItems 1",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "section"
                ]
              },
              "direction": {
                "type": "string",
                "enum": [
                  "include",
                  "exclude"
                ]
              }
            },
            "required": [
              "section_codes",
              "type",
              "direction"
            ]
          },
          "IShoppingCouponSellerCriteria.ICreate": {
            "description": "Creation information of the seller criteria.",
            "type": "object",
            "properties": {
              "seller_ids": {
                "title": "List of target seller's {@link IShoppingSeller.id}s",
                "description": "List of target seller's {@link IShoppingSeller.id}s.\n\n\n@minItems 1",
                "type": "array",
                "items": {
                  "description": "@format uuid",
                  "type": "string"
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "seller"
                ]
              },
              "direction": {
                "type": "string",
                "enum": [
                  "include",
                  "exclude"
                ]
              }
            },
            "required": [
              "seller_ids",
              "type",
              "direction"
            ]
          },
          "IShoppingCouponSaleCriteria.ICreate": {
            "description": "Creation information of the sale criteria.",
            "type": "object",
            "properties": {
              "sale_ids": {
                "title": "List of target sale's {@link IShoppingSale.id}s",
                "description": "List of target sale's {@link IShoppingSale.id}s.\n\n\n@minItems 1",
                "type": "array",
                "items": {
                  "description": "@format uuid",
                  "type": "string"
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "sale"
                ]
              },
              "direction": {
                "type": "string",
                "enum": [
                  "include",
                  "exclude"
                ]
              }
            },
            "required": [
              "sale_ids",
              "type",
              "direction"
            ]
          },
          "IShoppingCouponFunnelCriteria.ICreate": {
            "description": "Creation information of the funnel criteria.",
            "type": "object",
            "properties": {
              "funnels": {
                "title": "List of target funnels",
                "description": "List of target funnels.\n\n\n@minItems 1",
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/$defs/IShoppingCouponFunnelCriteria.IValueFunnel"
                    },
                    {
                      "$ref": "#/$defs/IShoppingCouponFunnelCriteria.IVariableFunnel"
                    }
                  ]
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "funnel"
                ]
              },
              "direction": {
                "type": "string",
                "enum": [
                  "include",
                  "exclude"
                ]
              }
            },
            "required": [
              "funnels",
              "type",
              "direction"
            ]
          },
          "IShoppingCouponFunnelCriteria.IValueFunnel": {
            "description": "Kind of funnel restriction by a value.",
            "type": "object",
            "properties": {
              "kind": {
                "title": "Kind of funnel restriction",
                "description": "Kind of funnel restriction.",
                "type": "string",
                "enum": [
                  "url",
                  "referrer"
                ]
              },
              "value": {
                "title": "Target value",
                "description": "Target value.",
                "type": "string"
              }
            },
            "required": [
              "kind",
              "value"
            ]
          },
          "IShoppingCouponFunnelCriteria.IVariableFunnel": {
            "description": "Kind of funnel restriction by a variable.",
            "type": "object",
            "properties": {
              "kind": {
                "title": "Kind of funnel restriction",
                "description": "Kind of funnel restriction.",
                "type": "string",
                "enum": [
                  "variable"
                ]
              },
              "key": {
                "title": "Target variable's key",
                "description": "Target variable's key.",
                "type": "string"
              },
              "value": {
                "title": "Target variable's value",
                "description": "Target variable's value.",
                "type": "string"
              }
            },
            "required": [
              "kind",
              "key",
              "value"
            ]
          }
        }
      },
      "description": "Create a new coupon.\n\nCreate a new {@link IShoppingCoupon coupon} with given information.\n\nBy the way, if you are a {@link IShoppingSeller seller}, you have to\nadd include direction's {@link IShoppingCouponSellerCriteria} or\n{@link IShoppingCouponSaleCriteria} condition. This is because only\n{@link IShoppingAdministrator administrators} can create a coupon\nwhich can be used throughout the market. Seller must limit the usage\nrange by his/her {@link IShoppingSale sale(s)}.\n\nOf course, when administrator is planning to make a general coupon\nthat can be used throughout the market, the administrator must\nget agree from the sellers who are going to be affected."
    },
    {
      "name": "shoppings_sellers_coupons_index",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Request info of pagination, searching and sorting",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingCoupon.IRequest"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingCoupon.IRequest": {
            "type": "object",
            "properties": {
              "search": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingCoupon.IRequest.ISearch"
                  }
                ]
              },
              "sort": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "-coupon.name",
                        "-coupon.unit",
                        "-coupon.value",
                        "-coupon.created_at",
                        "-coupon.opened_at",
                        "-coupon.closed_at",
                        "+coupon.name",
                        "+coupon.unit",
                        "+coupon.value",
                        "+coupon.created_at",
                        "+coupon.opened_at",
                        "+coupon.closed_at"
                      ]
                    }
                  }
                ]
              },
              "page": {
                "title": "Page number",
                "description": "Page number.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Limitation of records per a page",
                "description": "Limitation of records per a page.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingCoupon.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "name": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            "required": []
          }
        }
      },
      "description": "List up every coupons.\n\nList up every {@link IShoppingCoupon coupons} with pagination.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingCoupon.IRequest.search search condition} in the request\nbody. Also, it is possible to customize sequence order of records by\nconfiguring {@link IShoppingCoupon.IRequest.sort sort condition}.\n\nFor reference, if you are a {@link IShoppingCustomer customer}, then\nonly {@link IShoppingCouponTicket ticketable} coupons would be listed up.\nOtherwise, non-ticketable coupons would also be listed up."
    },
    {
      "name": "shoppings_sellers_coupons_at",
      "parameters": {
        "type": "object",
        "properties": {
          "id": {
            "description": " Target coupon's {@link IShoppingCoupon.id }",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a coupon info.\n\nGet a {@link IShoppingCoupon coupon} information.\n\nIf you are a {@link IShoppingCustomer customer}, then only\n{@link IShoppingCouponTicket ticketable} coupons are accessible. Non\nticketable coupons cause 410 gone error. Otherwise you are a\n{@link IShoppingSeller seller} or {@link IShoppingAdministrator administrator},\nnon-ticketable coupons are also accessible."
    },
    {
      "name": "shoppings_sellers_coupons_erase",
      "parameters": {
        "type": "object",
        "properties": {
          "id": {
            "description": " Target coupon's {@link IShoppingCoupon.id }",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Erase a coupon.\n\nErase a {@link IShoppingCoupon coupon} with given ID.\n\nFor reference, if there're some {@link IShoppingCouponTicket tickets}\nwhich are already issued from the target coupon, they would not be affected.\nThose tickets are still valid until their expration time."
    },
    {
      "name": "shoppings_sellers_orders_index",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Request info of pagination, searching and sorting",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingOrder.IRequest"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingOrder.IRequest": {
            "description": "Request of orders with pagination and searching/sorting conditions.",
            "type": "object",
            "properties": {
              "search": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingOrder.IRequest.ISearch"
                  }
                ]
              },
              "sort": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "-order.price",
                        "-order.quantity",
                        "-order.created_at",
                        "-order.publish.paid_at",
                        "+order.price",
                        "+order.quantity",
                        "+order.created_at",
                        "+order.publish.paid_at"
                      ]
                    }
                  }
                ]
              },
              "page": {
                "title": "Page number",
                "description": "Page number.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Limitation of records per a page",
                "description": "Limitation of records per a page.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingOrder.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "min_price": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number"
                  }
                ]
              },
              "max_price": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number"
                  }
                ]
              },
              "paid": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "sale": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingSale.IRequest.ISearch"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingSale.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "show_paused": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "show_suspended": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "only"
                    ]
                  }
                ]
              },
              "title": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "content": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "title_or_content": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "price": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingPrice.ISearch"
                  }
                ]
              },
              "review": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingSaleReview.IInvertSearch"
                  }
                ]
              },
              "section_codes": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                ]
              },
              "channel_category_ids": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                ]
              },
              "tags": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                ]
              },
              "seller": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingSeller.IRequest.ISearch"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingPrice.ISearch": {
            "type": "object",
            "properties": {
              "minimum": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number"
                  }
                ]
              },
              "maximum": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingSaleReview.IInvertSearch": {
            "type": "object",
            "properties": {
              "score": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingSaleReview.IInvertSearch.IScoreRange"
                  }
                ]
              },
              "count": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingSaleReview.IInvertSearch.ICountRange"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingSaleReview.IInvertSearch.IScoreRange": {
            "type": "object",
            "properties": {
              "minimum": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number",
                    "description": "@minimum 0\n@maximum 100"
                  }
                ]
              },
              "maximum": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number",
                    "description": "@minimum 0\n@maximum 100"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingSaleReview.IInvertSearch.ICountRange": {
            "type": "object",
            "properties": {
              "minimum": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "maximum": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingSeller.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "id": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format uuid"
                  }
                ]
              },
              "mobile": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@pattern ^[0-9]*$"
                  }
                ]
              },
              "name": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "email": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format email"
                  }
                ]
              },
              "nickname": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            "required": []
          }
        }
      },
      "description": "List up every orders.\n\nList up every {@link IShoppingOrder orders} with pagination.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingOrder.IRequest.search search condition} in the request\nbody. Also, it is possible to customize sequence order of records by\nconfiguring {@link IShoppingOrder.IRequest.sort sort condition}.\n\nFor reference, if you are a {@link IShoppingCustomer customer}, then\nyou can list up your own orders, and it is not a matter whether the\norder has been {@link IShoppingOrderPublish.paid_at paid} or not.\n\nOtherwise you are a {@link IShoppingSeller seller} or\n{@link IShoppingAdministrator administrator}, then you can list up\nonly paid orders. Also, in the seller case, only related\n{@link IShoppingOrder.goods goods} would be listed up in the order."
    },
    {
      "name": "shoppings_sellers_orders_at",
      "parameters": {
        "type": "object",
        "properties": {
          "id": {
            "description": " Target order's {@link IShoppingOrder.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get an order info.\n\nGet a detailed {@link IShoppingOrder order} information.\n\nIf you are not a {@link IShoppingCustomer customer}, then you can't\naccess to the order which has not been\n{@link IShoppingOrderPublish.paid_at paid} yet. In that case,\n404 not found error would be thrown."
    },
    {
      "name": "shoppings_sellers_sales_create",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Creation info of the sale",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingSale.ICreate"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingSale.ICreate": {
            "description": "Creation information of sale.\n\n### Description of {@link content} property:\n\n> Description and image content describing the sale.",
            "type": "object",
            "properties": {
              "section_code": {
                "title": "Belonged section's {@link IShoppingSection.code}",
                "description": "Belonged section's {@link IShoppingSection.code}.",
                "type": "string"
              },
              "status": {
                "title": "Initial status of the sale",
                "description": "Initial status of the sale.\n\n`null` or `undefined`: No restriction\n`paused`: Starts with {@link ITimestamps.paused_at paused} status\n`suspended`: Starts with {@link ITimestamps.suspended_at suspended} status",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "paused",
                      "suspended"
                    ]
                  }
                ]
              },
              "opened_at": {
                "title": "Opening time of the sale",
                "description": "Opening time of the sale.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format date-time"
                  }
                ]
              },
              "closed_at": {
                "title": "Closing time of the sale",
                "description": "Closing time of the sale.\n\nIf this value is `null`, the sale be continued forever.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format date-time"
                  }
                ]
              },
              "content": {
                "title": "Description and image content describing the sale",
                "$ref": "#/$defs/IShoppingSaleContent.ICreate"
              },
              "units": {
                "title": "List of units",
                "description": "List of units.\n\n\n@minItems 1",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/IShoppingSaleUnit.ICreate"
                }
              },
              "tags": {
                "title": "List of search tags",
                "description": "List of search tags.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "category_codes": {
                "title": "List of target categories' {@link IShoppingChannelCategory.code}s",
                "description": "List of target categories' {@link IShoppingChannelCategory.code}s.\n\nIf empty, it means all categories of the channel is listing the sale.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "section_code",
              "opened_at",
              "closed_at",
              "content",
              "units",
              "tags",
              "category_codes"
            ]
          },
          "IShoppingSaleContent.ICreate": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string"
              },
              "format": {
                "type": "string",
                "enum": [
                  "html",
                  "md",
                  "txt"
                ]
              },
              "body": {
                "type": "string"
              },
              "files": {
                "type": "array",
                "items": {
                  "$ref": "#/$defs/IAttachmentFile.ICreate"
                }
              },
              "thumbnails": {
                "type": "array",
                "items": {
                  "$ref": "#/$defs/IAttachmentFile.ICreate"
                }
              }
            },
            "required": [
              "title",
              "format",
              "body",
              "files",
              "thumbnails"
            ]
          },
          "IAttachmentFile.ICreate": {
            "type": "object",
            "properties": {
              "name": {
                "title": "File name, except extension",
                "description": "File name, except extension.\n\nIf there's file `.gitignore`, then its name is an empty string.\n\n\n@maxLength 255",
                "type": "string"
              },
              "extension": {
                "title": "Extension",
                "description": "Extension.\n\nPossible to omit like `README` case.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@minLength 1\n@maxLength 8"
                  }
                ]
              },
              "url": {
                "title": "URL path of the real file",
                "description": "URL path of the real file.\n\n\n@format uri\n@contentMediaType image/*",
                "type": "string"
              }
            },
            "required": [
              "name",
              "extension",
              "url"
            ]
          },
          "IShoppingSaleUnit.ICreate": {
            "description": "Creation information of sale unit.",
            "type": "object",
            "properties": {
              "options": {
                "title": "List of options",
                "description": "List of options.",
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/$defs/IShoppingSaleUnitSelectableOption.ICreate"
                    },
                    {
                      "$ref": "#/$defs/IShoppingSaleUnitDescriptiveOption.ICreate"
                    }
                  ]
                }
              },
              "stocks": {
                "title": "List of final stocks",
                "description": "List of final stocks.\n\n\n@minItems 1",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/IShoppingSaleUnitStock.ICreate"
                }
              },
              "name": {
                "title": "Representative name of the unit",
                "description": "Representative name of the unit.",
                "type": "string"
              },
              "primary": {
                "title": "Whether the unit is primary or not",
                "description": "Whether the unit is primary or not.\n\nJust a labeling value.",
                "type": "boolean"
              },
              "required": {
                "title": "Whether the unit is required or not",
                "description": "Whether the unit is required or not.\n\nWhen the unit is required, the customer must select the unit. If do not\nselect, customer can't buy it.\n\nFor example, if there's a sale \"Macbook Set\" and one of the unit is the\n\"Main Body\", is it possible to buy the \"Macbook Set\" without the\n\"Main Body\" unit? This property is for that case.",
                "type": "boolean"
              }
            },
            "required": [
              "options",
              "stocks",
              "name",
              "primary",
              "required"
            ]
          },
          "IShoppingSaleUnitSelectableOption.ICreate": {
            "description": "Creation information of the selectable option.",
            "type": "object",
            "properties": {
              "type": {
                "title": "Discriminant for the type of selectable option",
                "description": "Discriminant for the type of selectable option.",
                "type": "string",
                "enum": [
                  "select"
                ]
              },
              "name": {
                "title": "Represents the name of the option",
                "description": "Represents the name of the option.",
                "type": "string"
              },
              "variable": {
                "title": "Whether the option is variable or not",
                "description": "Whether the option is variable or not.\n\nWhen type of current option is \"select\", this attribute means whether\nselecting different candidate value affects the final stock or not.",
                "type": "boolean"
              },
              "candidates": {
                "title": "List of candidate values",
                "description": "List of candidate values.\n\n\n@minItems 1",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/IShoppingSaleUnitOptionCandidate.ICreate"
                }
              }
            },
            "required": [
              "type",
              "name",
              "variable",
              "candidates"
            ]
          },
          "IShoppingSaleUnitOptionCandidate.ICreate": {
            "description": "Creation information of the candidate value.",
            "type": "object",
            "properties": {
              "name": {
                "title": "Represents the name of the candidate value",
                "description": "Represents the name of the candidate value.",
                "type": "string"
              }
            },
            "required": [
              "name"
            ]
          },
          "IShoppingSaleUnitDescriptiveOption.ICreate": {
            "description": "Creation information of the descriptive option.",
            "type": "object",
            "properties": {
              "type": {
                "title": "Type of descriptive option",
                "description": "Type of descriptive option.\n\nWhich typed value should be written when purchasing.",
                "type": "string",
                "enum": [
                  "string",
                  "number",
                  "boolean"
                ]
              },
              "name": {
                "title": "Readable name of the option",
                "description": "Readable name of the option.",
                "type": "string"
              }
            },
            "required": [
              "type",
              "name"
            ]
          },
          "IShoppingSaleUnitStock.ICreate": {
            "description": "Creation information of the stock.\n\n### Description of {@link price} property:\n\n> Price of the stock.",
            "type": "object",
            "properties": {
              "name": {
                "title": "Representative name of the stock",
                "description": "Representative name of the stock.",
                "type": "string"
              },
              "price": {
                "title": "Price of the stock",
                "$ref": "#/$defs/IShoppingPrice"
              },
              "quantity": {
                "title": "Initial inventory quantity",
                "description": "Initial inventory quantity.\n\n\n@minimum 1",
                "type": "integer"
              },
              "choices": {
                "title": "List of choices",
                "description": "List of choices.\n\nWhich candidate values being chosen for each option.",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/IShoppingSaleUnitStockChoice.ICreate"
                }
              }
            },
            "required": [
              "name",
              "price",
              "quantity",
              "choices"
            ]
          },
          "IShoppingPrice": {
            "description": "Shopping price interface.",
            "type": "object",
            "properties": {
              "nominal": {
                "title": "Nominal price",
                "description": "Nominal price.\n\nThis is not {@link real real price} to pay, but just a nominal price to show.\nIf this value is greater than the {@link real real price}, it would be shown\nlike {@link IShoppingSeller seller} is giving a discount.\n\n\n@minimum 0",
                "type": "number"
              },
              "real": {
                "title": "Real price to pay",
                "description": "Real price to pay.\n\n\n@minimum 0",
                "type": "number"
              }
            },
            "required": [
              "nominal",
              "real"
            ]
          },
          "IShoppingSaleUnitStockChoice.ICreate": {
            "description": "Creation information of stock choice.",
            "type": "object",
            "properties": {
              "option_index": {
                "description": "Target option's index number in\n{@link IShoppingSaleUnit.ICreate.options}.\n\n\n@minimum 0",
                "type": "integer"
              },
              "candidate_index": {
                "description": "Target candidate's index number in\n{@link IShoppingSaleUnitSelectableOption.ICreate.candidates}.\n\n\n@minimum 0",
                "type": "integer"
              }
            },
            "required": [
              "option_index",
              "candidate_index"
            ]
          }
        }
      },
      "description": "Create a sale.\n\n{@link IShoppingSeller Seller} creates a new {@link IShoppingSale} for\noperation.\n\nFor reference, sale has complicate hierarchical structure that composing\nwith {@link IShoppingSaleUnit units}, {@link IShoppingSaleUnitOption options}\nand {@link IShoppingSaleUnitStock stocks}. Therefore, I recommend you to\nread the {@link IShoppingSale} and related DTOs' documents before creating\na new sale.\n\nERD (Entity Relationship Diagram) and its description document also would\nbe helpful, too."
    },
    {
      "name": "shoppings_sellers_sales_index",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Request info of pagination, searching and sorting",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingSale.IRequest"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingSale.IRequest": {
            "description": "Request of summarized sales with pagination and searching/sorting options.",
            "type": "object",
            "properties": {
              "sort": {
                "title": "Sorting conditions",
                "description": "Sorting conditions.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "-seller.created_at",
                        "-seller.goods.payments.real",
                        "-seller.goods.publish_count",
                        "-seller.reviews.average",
                        "-seller.reviews.count",
                        "-goods.publish_count",
                        "-goods.payments.real",
                        "-reviews.average",
                        "-reviews.count",
                        "-sale.created_at",
                        "-sale.updated_at",
                        "-sale.opened_at",
                        "-sale.closed_at",
                        "-sale.content.title",
                        "-sale.price_range.lowest.real",
                        "-sale.price_range.highest.real",
                        "+seller.created_at",
                        "+seller.goods.payments.real",
                        "+seller.goods.publish_count",
                        "+seller.reviews.average",
                        "+seller.reviews.count",
                        "+goods.publish_count",
                        "+goods.payments.real",
                        "+reviews.average",
                        "+reviews.count",
                        "+sale.created_at",
                        "+sale.updated_at",
                        "+sale.opened_at",
                        "+sale.closed_at",
                        "+sale.content.title",
                        "+sale.price_range.lowest.real",
                        "+sale.price_range.highest.real"
                      ]
                    }
                  }
                ]
              },
              "page": {
                "title": "Page number",
                "description": "Page number.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Limitation of records per a page",
                "description": "Limitation of records per a page.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          }
        }
      },
      "description": "List up every summarized sales.\n\nList up every {@link IShoppingSale.ISummary summarized sales}.\n\nAs you can see, returned sales are summarized, not detailed. It does not\ncontain the SKU (Stock Keeping Unit) information represented by the\n{@link IShoppingSaleUnitOption} and {@link IShoppingSaleUnitStock} types.\nIf you want to get such detailed information of a sale, use\n`GET /shoppings/customers/sales/{id}` operation for each sale.\n\n> If you're an A.I. chatbot, and the user wants to buy or compose\n> {@link IShoppingCartCommodity shopping cart} from a sale, please\n> call the `GET /shoppings/customers/sales/{id}` operation at least once\n> to the target sale to get detailed SKU information about the sale.\n> It needs to be run at least once for the next steps."
    },
    {
      "name": "shoppings_sellers_sales_at",
      "parameters": {
        "type": "object",
        "properties": {
          "id": {
            "description": " Target sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a sale with detailed information.\n\nGet a {@link IShoppingSale sale} with detailed information including\nthe SKU (Stock Keeping Unit) information represented by the\n{@link IShoppingSaleUnitOption} and {@link IShoppingSaleUnitStock} types.\n\n> If you're an A.I. chatbot, and the user wants to buy or compose a\n> {@link IShoppingCartCommodity shopping cart} from a sale, please call\n> this operation at least once to the target sale to get detailed SKU\n> information about the sale.\n>\n> It needs to be run at least once for the next steps. In other words,\n> if you A.I. agent has called this operation to a specific sale, you\n> don't need to call this operation again for the same sale.\n>\n> Additionally, please do not summarize the SKU information. Just show\n> the every options and stocks in the sale with detailed information."
    },
    {
      "name": "shoppings_sellers_sales_update",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> New information of the sale",
        "type": "object",
        "properties": {
          "id": {
            "description": " Target sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingSaleSnapshot.ICreate"
          }
        },
        "required": [
          "id",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingSaleSnapshot.ICreate": {
            "description": "Creation information of the snapshot.\n\n### Description of {@link content} property:\n\n> Description and image content describing the sale.",
            "type": "object",
            "properties": {
              "content": {
                "title": "Description and image content describing the sale",
                "$ref": "#/$defs/IShoppingSaleContent.ICreate"
              },
              "units": {
                "title": "List of units",
                "description": "List of units.\n\n\n@minItems 1",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/IShoppingSaleUnit.ICreate"
                }
              },
              "tags": {
                "title": "List of search tags",
                "description": "List of search tags.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "category_codes": {
                "title": "List of target categories' {@link IShoppingChannelCategory.code}s",
                "description": "List of target categories' {@link IShoppingChannelCategory.code}s.\n\nIf empty, it means all categories of the channel is listing the sale.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "content",
              "units",
              "tags",
              "category_codes"
            ]
          },
          "IShoppingSaleContent.ICreate": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string"
              },
              "format": {
                "type": "string",
                "enum": [
                  "html",
                  "md",
                  "txt"
                ]
              },
              "body": {
                "type": "string"
              },
              "files": {
                "type": "array",
                "items": {
                  "$ref": "#/$defs/IAttachmentFile.ICreate"
                }
              },
              "thumbnails": {
                "type": "array",
                "items": {
                  "$ref": "#/$defs/IAttachmentFile.ICreate"
                }
              }
            },
            "required": [
              "title",
              "format",
              "body",
              "files",
              "thumbnails"
            ]
          },
          "IAttachmentFile.ICreate": {
            "type": "object",
            "properties": {
              "name": {
                "title": "File name, except extension",
                "description": "File name, except extension.\n\nIf there's file `.gitignore`, then its name is an empty string.\n\n\n@maxLength 255",
                "type": "string"
              },
              "extension": {
                "title": "Extension",
                "description": "Extension.\n\nPossible to omit like `README` case.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@minLength 1\n@maxLength 8"
                  }
                ]
              },
              "url": {
                "title": "URL path of the real file",
                "description": "URL path of the real file.\n\n\n@format uri\n@contentMediaType image/*",
                "type": "string"
              }
            },
            "required": [
              "name",
              "extension",
              "url"
            ]
          },
          "IShoppingSaleUnit.ICreate": {
            "description": "Creation information of sale unit.",
            "type": "object",
            "properties": {
              "options": {
                "title": "List of options",
                "description": "List of options.",
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/$defs/IShoppingSaleUnitSelectableOption.ICreate"
                    },
                    {
                      "$ref": "#/$defs/IShoppingSaleUnitDescriptiveOption.ICreate"
                    }
                  ]
                }
              },
              "stocks": {
                "title": "List of final stocks",
                "description": "List of final stocks.\n\n\n@minItems 1",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/IShoppingSaleUnitStock.ICreate"
                }
              },
              "name": {
                "title": "Representative name of the unit",
                "description": "Representative name of the unit.",
                "type": "string"
              },
              "primary": {
                "title": "Whether the unit is primary or not",
                "description": "Whether the unit is primary or not.\n\nJust a labeling value.",
                "type": "boolean"
              },
              "required": {
                "title": "Whether the unit is required or not",
                "description": "Whether the unit is required or not.\n\nWhen the unit is required, the customer must select the unit. If do not\nselect, customer can't buy it.\n\nFor example, if there's a sale \"Macbook Set\" and one of the unit is the\n\"Main Body\", is it possible to buy the \"Macbook Set\" without the\n\"Main Body\" unit? This property is for that case.",
                "type": "boolean"
              }
            },
            "required": [
              "options",
              "stocks",
              "name",
              "primary",
              "required"
            ]
          },
          "IShoppingSaleUnitSelectableOption.ICreate": {
            "description": "Creation information of the selectable option.",
            "type": "object",
            "properties": {
              "type": {
                "title": "Discriminant for the type of selectable option",
                "description": "Discriminant for the type of selectable option.",
                "type": "string",
                "enum": [
                  "select"
                ]
              },
              "name": {
                "title": "Represents the name of the option",
                "description": "Represents the name of the option.",
                "type": "string"
              },
              "variable": {
                "title": "Whether the option is variable or not",
                "description": "Whether the option is variable or not.\n\nWhen type of current option is \"select\", this attribute means whether\nselecting different candidate value affects the final stock or not.",
                "type": "boolean"
              },
              "candidates": {
                "title": "List of candidate values",
                "description": "List of candidate values.\n\n\n@minItems 1",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/IShoppingSaleUnitOptionCandidate.ICreate"
                }
              }
            },
            "required": [
              "type",
              "name",
              "variable",
              "candidates"
            ]
          },
          "IShoppingSaleUnitOptionCandidate.ICreate": {
            "description": "Creation information of the candidate value.",
            "type": "object",
            "properties": {
              "name": {
                "title": "Represents the name of the candidate value",
                "description": "Represents the name of the candidate value.",
                "type": "string"
              }
            },
            "required": [
              "name"
            ]
          },
          "IShoppingSaleUnitDescriptiveOption.ICreate": {
            "description": "Creation information of the descriptive option.",
            "type": "object",
            "properties": {
              "type": {
                "title": "Type of descriptive option",
                "description": "Type of descriptive option.\n\nWhich typed value should be written when purchasing.",
                "type": "string",
                "enum": [
                  "string",
                  "number",
                  "boolean"
                ]
              },
              "name": {
                "title": "Readable name of the option",
                "description": "Readable name of the option.",
                "type": "string"
              }
            },
            "required": [
              "type",
              "name"
            ]
          },
          "IShoppingSaleUnitStock.ICreate": {
            "description": "Creation information of the stock.\n\n### Description of {@link price} property:\n\n> Price of the stock.",
            "type": "object",
            "properties": {
              "name": {
                "title": "Representative name of the stock",
                "description": "Representative name of the stock.",
                "type": "string"
              },
              "price": {
                "title": "Price of the stock",
                "$ref": "#/$defs/IShoppingPrice"
              },
              "quantity": {
                "title": "Initial inventory quantity",
                "description": "Initial inventory quantity.\n\n\n@minimum 1",
                "type": "integer"
              },
              "choices": {
                "title": "List of choices",
                "description": "List of choices.\n\nWhich candidate values being chosen for each option.",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/IShoppingSaleUnitStockChoice.ICreate"
                }
              }
            },
            "required": [
              "name",
              "price",
              "quantity",
              "choices"
            ]
          },
          "IShoppingPrice": {
            "description": "Shopping price interface.",
            "type": "object",
            "properties": {
              "nominal": {
                "title": "Nominal price",
                "description": "Nominal price.\n\nThis is not {@link real real price} to pay, but just a nominal price to show.\nIf this value is greater than the {@link real real price}, it would be shown\nlike {@link IShoppingSeller seller} is giving a discount.\n\n\n@minimum 0",
                "type": "number"
              },
              "real": {
                "title": "Real price to pay",
                "description": "Real price to pay.\n\n\n@minimum 0",
                "type": "number"
              }
            },
            "required": [
              "nominal",
              "real"
            ]
          },
          "IShoppingSaleUnitStockChoice.ICreate": {
            "description": "Creation information of stock choice.",
            "type": "object",
            "properties": {
              "option_index": {
                "description": "Target option's index number in\n{@link IShoppingSaleUnit.ICreate.options}.\n\n\n@minimum 0",
                "type": "integer"
              },
              "candidate_index": {
                "description": "Target candidate's index number in\n{@link IShoppingSaleUnitSelectableOption.ICreate.candidates}.\n\n\n@minimum 0",
                "type": "integer"
              }
            },
            "required": [
              "option_index",
              "candidate_index"
            ]
          }
        }
      },
      "description": "Update a sale.\n\nUpdate a {@link IShoppingSale sale} with new information.\n\nBy the way, the sale actually does not being modified, but just make a new\n{@link IShoppingSaleSnapshot snapshot} record of the sale. Its 1st purpose\nis to keeping the integrity of the sale, due to modification of the sale\nmust not affect to the {@link IShoppingOrder orders} that already had been\napplied to the sale.\n\nThe 2nd purpose is for the A/B tests. {@link IShoppingSeller Seller} needs\nto demonstrate operating performance by changing price, content, and\ncomposition of the product. This snapshot concept would be helpful for it."
    },
    {
      "name": "shoppings_sellers_sales_open",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> New opening and closing time",
        "type": "object",
        "properties": {
          "id": {
            "description": " Target sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingSale.IUpdateOpeningTime"
          }
        },
        "required": [
          "id",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingSale.IUpdateOpeningTime": {
            "description": "Update opening time information of sale.",
            "type": "object",
            "properties": {
              "opened_at": {
                "title": "Opening time of the sale",
                "description": "Opening time of the sale.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format date-time"
                  }
                ]
              },
              "closed_at": {
                "title": "Closing time of the sale",
                "description": "Closing time of the sale.\n\nIf this value is `null`, the sale be continued forever.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format date-time"
                  }
                ]
              }
            },
            "required": [
              "opened_at",
              "closed_at"
            ]
          }
        }
      },
      "description": "Change opening and closing time of a sale.\n\nUpdate a {@link IShoppingSale sale}'s opening and closing time.\n\nBy the way, if the sale still be opened or closed, it is not possible to\nchange the opening time. In contrary, if the sale already had been opened\nbut still not closed, it is possible to change the closing time.\n\nOf course, if closing time is less than opening time or not,\n428 unprocessable entity error would be thrown."
    },
    {
      "name": "shoppings_sellers_sales_replica",
      "parameters": {
        "type": "object",
        "properties": {
          "id": {
            "description": " Target sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get replica of a sale.\n\nGet a {@link IShoppingSale.ICreate} typed info of the target sale for\nreplication.\n\nIt would be useful for creating a new replication\n{@link IShoppingSale sale} with similar innformatiopn."
    },
    {
      "name": "shoppings_sellers_sales_pause",
      "parameters": {
        "type": "object",
        "properties": {
          "id": {
            "description": " Target sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Pause a sale.\n\nPause a {@link IShoppingSale sale} from {@link open opened} state.\nTherefore, the sale can not be operated again until it be\n{@link restore restored}. By the way, {@link IShoppingCustomer customer}\nstill can sale from the {@link index} and {@link at} API endpoints, but\n\"paused\" label would be attached.\n\nAlso, customer no more can put into the shopping cart, either.\nEven the sale already had been put into the shopping cart, the\n{@link IShoppingCartCommodity commodity} will not be listed on the\nshopping cart. Also, it is not possible to applying an\n{@link IShoppingOrder order} with the paused sale's commodity, either.\n\nBy the way, if the sale already had been applied to an order, the order\ncan be {@link IShoppingOrderPublish published} and\n{@link IShoppingSeller seller} must {@link IShoppingDelivery deliver} the\ngood to the customer."
    },
    {
      "name": "shoppings_sellers_sales_suspend",
      "parameters": {
        "type": "object",
        "properties": {
          "id": {
            "description": " Target sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Suspend a sale.\n\nSuspend a {@link IShoppingSale sale} from {@link open opened} state.\nTherefore, the sale can not be operated again until it be\n{@link restore restored} and {@link IShoppingCustomer customer} cannot\nsee the sale from the {@link index} and {@link at} API.\n\nAlso, customer no more can put into the shopping cart, either.\nEven the sale already had been put into the shopping cart, the\n{@link IShoppingCartCommodity commodity} will not be listed on the\nshopping cart. Also, it is not possible to applying an\n{@link IShoppingOrder order} with the suspended sale's commodity, either.\n\nBy the way, if the sale already had been applied to an order, the order\ncan be {@link IShoppingOrderPublish published} and\n{@link IShoppingSeller seller} must {@link IShoppingDelivery deliver} the\ngood to the customer."
    },
    {
      "name": "shoppings_sellers_sales_restore",
      "parameters": {
        "type": "object",
        "properties": {
          "id": {
            "description": " Target sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Restore a sale\n\nRestore a {@link IShoppingSale sale} from {@link pause paused} or\n{@link suspend suspended} state\n\nTherefore the sale can be operated again if its\n{@link IShoppingSale.closed_at closing time} has not been reached.\nAlso, if a {@link IShoppingCustomer customer} had put the sale into the\nshopping cart when being paused or suspended, the\n{@link IShoppingCartCommodity commodity} will be listed again on the\nshopping cart."
    },
    {
      "name": "shoppings_sellers_sales_questions_answer_create",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Creation info of the answer article",
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "questionId": {
            "description": " Target question's {@link IShoppingSaleQuestion.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IBbsArticle.ICreate"
          }
        },
        "required": [
          "saleId",
          "questionId",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IBbsArticle.ICreate": {
            "description": "Creation information of the article.",
            "type": "object",
            "properties": {
              "format": {
                "title": "Format of body",
                "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`.",
                "type": "string",
                "enum": [
                  "html",
                  "md",
                  "txt"
                ]
              },
              "title": {
                "title": "Title of article",
                "description": "Title of article.",
                "type": "string"
              },
              "body": {
                "title": "Content body of article",
                "description": "Content body of article.",
                "type": "string"
              },
              "files": {
                "title": "List of attachment files",
                "description": "List of attachment files.",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/IAttachmentFile.ICreate"
                }
              }
            },
            "required": [
              "format",
              "title",
              "body",
              "files"
            ]
          },
          "IAttachmentFile.ICreate": {
            "type": "object",
            "properties": {
              "name": {
                "title": "File name, except extension",
                "description": "File name, except extension.\n\nIf there's file `.gitignore`, then its name is an empty string.\n\n\n@maxLength 255",
                "type": "string"
              },
              "extension": {
                "title": "Extension",
                "description": "Extension.\n\nPossible to omit like `README` case.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@minLength 1\n@maxLength 8"
                  }
                ]
              },
              "url": {
                "title": "URL path of the real file",
                "description": "URL path of the real file.\n\n\n@format uri\n@contentMediaType image/*",
                "type": "string"
              }
            },
            "required": [
              "name",
              "extension",
              "url"
            ]
          }
        }
      },
      "description": "Write an answer article.\n\nWrite a formal {@link IShoppingSaleInquiryAnswer answer article} to a\nspecific {@link IShoppingSaleInquiry question article} written by a\n{@link IShoppingCustomer}.\n\nNote that, this is the formal answer that can be written only one per\na question article (but {@link update updatable}). Therefore, it needs to\nguide the {@link IShoppingSeller seller} to write it carefully.\n\nAlso, as seller can write {@link IShoppingSaleInquiryComment comments} to\nthe question article as many as he/she wants, it would be useful for\nadditional communication."
    },
    {
      "name": "shoppings_sellers_sales_questions_answer_update",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Update info of the answer article",
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "questionId": {
            "description": " Target question's {@link IShoppingSaleQuestion.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IBbsArticle.ICreate"
          }
        },
        "required": [
          "saleId",
          "questionId",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IBbsArticle.ICreate": {
            "description": "Creation information of the article.",
            "type": "object",
            "properties": {
              "format": {
                "title": "Format of body",
                "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`.",
                "type": "string",
                "enum": [
                  "html",
                  "md",
                  "txt"
                ]
              },
              "title": {
                "title": "Title of article",
                "description": "Title of article.",
                "type": "string"
              },
              "body": {
                "title": "Content body of article",
                "description": "Content body of article.",
                "type": "string"
              },
              "files": {
                "title": "List of attachment files",
                "description": "List of attachment files.",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/IAttachmentFile.ICreate"
                }
              }
            },
            "required": [
              "format",
              "title",
              "body",
              "files"
            ]
          },
          "IAttachmentFile.ICreate": {
            "type": "object",
            "properties": {
              "name": {
                "title": "File name, except extension",
                "description": "File name, except extension.\n\nIf there's file `.gitignore`, then its name is an empty string.\n\n\n@maxLength 255",
                "type": "string"
              },
              "extension": {
                "title": "Extension",
                "description": "Extension.\n\nPossible to omit like `README` case.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@minLength 1\n@maxLength 8"
                  }
                ]
              },
              "url": {
                "title": "URL path of the real file",
                "description": "URL path of the real file.\n\n\n@format uri\n@contentMediaType image/*",
                "type": "string"
              }
            },
            "required": [
              "name",
              "extension",
              "url"
            ]
          }
        }
      },
      "description": "Update an answer article.\n\nUpdate a formal {@link IShoppingSaleInquiryAnswer answer article} to a\nspecific {@link IShoppingSaleInquiry question article} written by a\n{@link IShoppingCustomer}.\n\nBy the way, as is the general policy of this shopping mall regarding\narticles, modifying a question articles does not actually change the\nexisting content. Modified content is accumulated and recorded in the\nexisting article record as a new\n{@link IShoppingSaleInquiryAnswer.ISnapshot snapshot}. And this is made\npublic to everyone, including the {@link IShoppingCustomer customer} and the\n{@link IShoppingSeller seller}, and anyone who can view the article can\nalso view the entire editing histories.\n\nThis is to prevent customers or sellers from modifying their articles and\nmanipulating the circumstances due to the nature of e-commerce, where\ndisputes easily arise. That is, to preserve evidence."
    },
    {
      "name": "shoppings_sellers_sales_questions_comments_create",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Creation info of the inquiry comment",
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "inquiryId": {
            "description": " Target inquiry's {@link IShoppingSaleInquiry.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingSaleInquiryComment.ICreate"
          }
        },
        "required": [
          "saleId",
          "inquiryId",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingSaleInquiryComment.ICreate": {
            "description": "Creation information of the comment.",
            "type": "object",
            "properties": {
              "format": {
                "title": "Format of body",
                "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`.",
                "type": "string",
                "enum": [
                  "html",
                  "md",
                  "txt"
                ]
              },
              "body": {
                "title": "Content body of comment",
                "description": "Content body of comment.",
                "type": "string"
              },
              "files": {
                "title": "List of attachment files",
                "description": "List of attachment files.",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/IAttachmentFile.ICreate"
                }
              }
            },
            "required": [
              "format",
              "body",
              "files"
            ]
          },
          "IAttachmentFile.ICreate": {
            "type": "object",
            "properties": {
              "name": {
                "title": "File name, except extension",
                "description": "File name, except extension.\n\nIf there's file `.gitignore`, then its name is an empty string.\n\n\n@maxLength 255",
                "type": "string"
              },
              "extension": {
                "title": "Extension",
                "description": "Extension.\n\nPossible to omit like `README` case.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@minLength 1\n@maxLength 8"
                  }
                ]
              },
              "url": {
                "title": "URL path of the real file",
                "description": "URL path of the real file.\n\n\n@format uri\n@contentMediaType image/*",
                "type": "string"
              }
            },
            "required": [
              "name",
              "extension",
              "url"
            ]
          }
        }
      },
      "description": "Create an inquiry comment.\n\nCreate an {@link IShoppingSaleInquiryComment inquiry comment} of a\n{@link IShoppingSaleQuestion question} or {@link IShoppingSaleReview review}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\ncreate an inquiry comment to your own {@link IShoppingSale sale}'s inquiry.\nOtherwise, you can create an inquiry comment to every inquiries of the sales."
    },
    {
      "name": "shoppings_sellers_sales_questions_comments_index",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Request info of pagination, searching and sorting",
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "inquiryId": {
            "description": " Belonged inquiry's {@link IShoppingSaleInquiry.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingSaleInquiryComment.IRequest"
          }
        },
        "required": [
          "saleId",
          "inquiryId",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingSaleInquiryComment.IRequest": {
            "description": "Request of the comments with pagination and searching/sorting options.",
            "type": "object",
            "properties": {
              "search": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingSaleInquiryComment.IRequest.ISearch"
                  }
                ]
              },
              "sort": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "-created_at",
                        "+created_at"
                      ]
                    }
                  }
                ]
              },
              "page": {
                "title": "Page number",
                "description": "Page number.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Limitation of records per a page",
                "description": "Limitation of records per a page.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingSaleInquiryComment.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "name": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "nickname": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "body": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            "required": []
          }
        }
      },
      "description": "List up every inquiry comments.\n\nList up every {@link IShoppingSaleInquiryComment inquiry comments} of a\n{@link IShoppingSaleQuestion question} or {@link IShoppingSaleReview review}\nwith {@link IPage pagination}.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingSaleInquiryComment.IRequest.search search condition} in the\nrequest body. Also, it is possible to customize sequence order of records\nby configuring {@link IShoppingSaleInquiryComment.IRequest.sort sort condition}.\n\nBy the way, if you're a {@link IShoppingSeller seller}, you can only access\nto the your own {@link IShoppingSale sale}'s inquiries. Otherwise, you\ncan access to every inquiries of the sales."
    },
    {
      "name": "shoppings_sellers_sales_questions_comments_at",
      "parameters": {
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "inquiryId": {
            "description": " Belonged inquiry's {@link IShoppingSaleInquiry.id }\n\n\n@format uuid",
            "type": "string"
          },
          "id": {
            "description": " Target inquiry comment's {@link IShoppingSaleInquiryComment.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "saleId",
          "inquiryId",
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get an inquiry comment info.\n\nGet a detailed {@link IShoppingSaleInquiryComment inquiry comment}\ninformation of a {@link IShoppingSaleQuestion question} or\n{@link IShoppingSaleReview review}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s inquiry comment.\nOtherwise, you can access to every inquiry comments of the sales."
    },
    {
      "name": "shoppings_sellers_sales_questions_comments_update",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Update info of the inquiry comment",
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "inquiryId": {
            "description": " Belonged inquiry's {@link IShoppingSaleInquiry.id }\n\n\n@format uuid",
            "type": "string"
          },
          "id": {
            "description": " Target inquiry comment's {@link IShoppingSaleInquiryComment.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingSaleInquiryComment.ICreate"
          }
        },
        "required": [
          "saleId",
          "inquiryId",
          "id",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingSaleInquiryComment.ICreate": {
            "description": "Creation information of the comment.",
            "type": "object",
            "properties": {
              "format": {
                "title": "Format of body",
                "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`.",
                "type": "string",
                "enum": [
                  "html",
                  "md",
                  "txt"
                ]
              },
              "body": {
                "title": "Content body of comment",
                "description": "Content body of comment.",
                "type": "string"
              },
              "files": {
                "title": "List of attachment files",
                "description": "List of attachment files.",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/IAttachmentFile.ICreate"
                }
              }
            },
            "required": [
              "format",
              "body",
              "files"
            ]
          },
          "IAttachmentFile.ICreate": {
            "type": "object",
            "properties": {
              "name": {
                "title": "File name, except extension",
                "description": "File name, except extension.\n\nIf there's file `.gitignore`, then its name is an empty string.\n\n\n@maxLength 255",
                "type": "string"
              },
              "extension": {
                "title": "Extension",
                "description": "Extension.\n\nPossible to omit like `README` case.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@minLength 1\n@maxLength 8"
                  }
                ]
              },
              "url": {
                "title": "URL path of the real file",
                "description": "URL path of the real file.\n\n\n@format uri\n@contentMediaType image/*",
                "type": "string"
              }
            },
            "required": [
              "name",
              "extension",
              "url"
            ]
          }
        }
      },
      "description": "Update an inquiry comment.\n\nUpdate an {@link IShoppingSaleInquiryComment inquiry comment} to a specific\n{@link IShoppingSaleQuestion question} or {@link IShoppingSaleReview review}.\n\nBy the way, as is the general policy of this shopping mall regarding\ncomments, modifying a comment does not actually change the existing content.\nModified content is accumulated and recorded in the existing comment record\nas a new {@link IShoppingSaleInquiryComment.ISnapshot snapshot}. And this\nis made public to everyone, who can read this inquiry comment.\n\nThis is to prevent customers or sellers from modifying their comments and\nmanipulating the circumstances due to the nature of e-commerce, where\ndisputes easily arise. That is, to preserve evidence."
    },
    {
      "name": "shoppings_sellers_sales_questions_at",
      "parameters": {
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "id": {
            "description": " Target question's {@link IShoppingSaleQuestion.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "saleId",
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a question info.\n\nGet a detailed {@link IShoppingSaleQuestion question} information of a\n{@link IShoppingSale sale}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s question. Otherwise\nyou are a {@link IShoppingCustomer customer}, you can access to every\nquestions of the sales except the {@link IShoppingSaleQuestion.secret}\nvalue is `false`."
    },
    {
      "name": "shoppings_sellers_sales_reviews_answer_create",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Creation info of the answer article",
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "reviewId": {
            "description": " Target review's {@link IShoppingSaleReview.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IBbsArticle.ICreate"
          }
        },
        "required": [
          "saleId",
          "reviewId",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IBbsArticle.ICreate": {
            "description": "Creation information of the article.",
            "type": "object",
            "properties": {
              "format": {
                "title": "Format of body",
                "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`.",
                "type": "string",
                "enum": [
                  "html",
                  "md",
                  "txt"
                ]
              },
              "title": {
                "title": "Title of article",
                "description": "Title of article.",
                "type": "string"
              },
              "body": {
                "title": "Content body of article",
                "description": "Content body of article.",
                "type": "string"
              },
              "files": {
                "title": "List of attachment files",
                "description": "List of attachment files.",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/IAttachmentFile.ICreate"
                }
              }
            },
            "required": [
              "format",
              "title",
              "body",
              "files"
            ]
          },
          "IAttachmentFile.ICreate": {
            "type": "object",
            "properties": {
              "name": {
                "title": "File name, except extension",
                "description": "File name, except extension.\n\nIf there's file `.gitignore`, then its name is an empty string.\n\n\n@maxLength 255",
                "type": "string"
              },
              "extension": {
                "title": "Extension",
                "description": "Extension.\n\nPossible to omit like `README` case.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@minLength 1\n@maxLength 8"
                  }
                ]
              },
              "url": {
                "title": "URL path of the real file",
                "description": "URL path of the real file.\n\n\n@format uri\n@contentMediaType image/*",
                "type": "string"
              }
            },
            "required": [
              "name",
              "extension",
              "url"
            ]
          }
        }
      },
      "description": "Write an answer article.\n\nWrite a formal {@link IShoppingSaleInquiryAnswer answer article} to a\nspecific {@link IShoppingSaleInquiry review article} written by a\n{@link IShoppingCustomer}.\n\nNote that, this is the formal answer that can be written only one per\na review article (but {@link update updatable}). Therefore, it needs to\nguide the {@link IShoppingSeller seller} to write it carefully.\n\nAlso, as seller can write {@link IShoppingSaleInquiryComment comments} to\nthe review article as many as he/she wants, it would be useful for\nadditional communication."
    },
    {
      "name": "shoppings_sellers_sales_reviews_answer_update",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Update info of the answer article",
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "reviewId": {
            "description": " Target review's {@link IShoppingSaleReview.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IBbsArticle.ICreate"
          }
        },
        "required": [
          "saleId",
          "reviewId",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IBbsArticle.ICreate": {
            "description": "Creation information of the article.",
            "type": "object",
            "properties": {
              "format": {
                "title": "Format of body",
                "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`.",
                "type": "string",
                "enum": [
                  "html",
                  "md",
                  "txt"
                ]
              },
              "title": {
                "title": "Title of article",
                "description": "Title of article.",
                "type": "string"
              },
              "body": {
                "title": "Content body of article",
                "description": "Content body of article.",
                "type": "string"
              },
              "files": {
                "title": "List of attachment files",
                "description": "List of attachment files.",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/IAttachmentFile.ICreate"
                }
              }
            },
            "required": [
              "format",
              "title",
              "body",
              "files"
            ]
          },
          "IAttachmentFile.ICreate": {
            "type": "object",
            "properties": {
              "name": {
                "title": "File name, except extension",
                "description": "File name, except extension.\n\nIf there's file `.gitignore`, then its name is an empty string.\n\n\n@maxLength 255",
                "type": "string"
              },
              "extension": {
                "title": "Extension",
                "description": "Extension.\n\nPossible to omit like `README` case.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@minLength 1\n@maxLength 8"
                  }
                ]
              },
              "url": {
                "title": "URL path of the real file",
                "description": "URL path of the real file.\n\n\n@format uri\n@contentMediaType image/*",
                "type": "string"
              }
            },
            "required": [
              "name",
              "extension",
              "url"
            ]
          }
        }
      },
      "description": "Update an answer article.\n\nUpdate a formal {@link IShoppingSaleInquiryAnswer answer article} to a\nspecific {@link IShoppingSaleInquiry review article} written by a\n{@link IShoppingCustomer}.\n\nBy the way, as is the general policy of this shopping mall regarding\narticles, modifying a review articles does not actually change the\nexisting content. Modified content is accumulated and recorded in the\nexisting article record as a new\n{@link IShoppingSaleInquiryAnswer.ISnapshot snapshot}. And this is made\npublic to everyone, including the {@link IShoppingCustomer customer} and the\n{@link IShoppingSeller seller}, and anyone who can view the article can\nalso view the entire editing histories.\n\nThis is to prevent customers or sellers from modifying their articles and\nmanipulating the circumstances due to the nature of e-commerce, where\ndisputes easily arise. That is, to preserve evidence."
    },
    {
      "name": "shoppings_sellers_sales_reviews_comments_create",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Creation info of the inquiry comment",
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "inquiryId": {
            "description": " Target inquiry's {@link IShoppingSaleInquiry.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingSaleInquiryComment.ICreate"
          }
        },
        "required": [
          "saleId",
          "inquiryId",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingSaleInquiryComment.ICreate": {
            "description": "Creation information of the comment.",
            "type": "object",
            "properties": {
              "format": {
                "title": "Format of body",
                "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`.",
                "type": "string",
                "enum": [
                  "html",
                  "md",
                  "txt"
                ]
              },
              "body": {
                "title": "Content body of comment",
                "description": "Content body of comment.",
                "type": "string"
              },
              "files": {
                "title": "List of attachment files",
                "description": "List of attachment files.",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/IAttachmentFile.ICreate"
                }
              }
            },
            "required": [
              "format",
              "body",
              "files"
            ]
          },
          "IAttachmentFile.ICreate": {
            "type": "object",
            "properties": {
              "name": {
                "title": "File name, except extension",
                "description": "File name, except extension.\n\nIf there's file `.gitignore`, then its name is an empty string.\n\n\n@maxLength 255",
                "type": "string"
              },
              "extension": {
                "title": "Extension",
                "description": "Extension.\n\nPossible to omit like `README` case.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@minLength 1\n@maxLength 8"
                  }
                ]
              },
              "url": {
                "title": "URL path of the real file",
                "description": "URL path of the real file.\n\n\n@format uri\n@contentMediaType image/*",
                "type": "string"
              }
            },
            "required": [
              "name",
              "extension",
              "url"
            ]
          }
        }
      },
      "description": "Create an inquiry comment.\n\nCreate an {@link IShoppingSaleInquiryComment inquiry comment} of a\n{@link IShoppingSaleQuestion question} or {@link IShoppingSaleReview review}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\ncreate an inquiry comment to your own {@link IShoppingSale sale}'s inquiry.\nOtherwise, you can create an inquiry comment to every inquiries of the sales."
    },
    {
      "name": "shoppings_sellers_sales_reviews_comments_index",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Request info of pagination, searching and sorting",
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "inquiryId": {
            "description": " Belonged inquiry's {@link IShoppingSaleInquiry.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingSaleInquiryComment.IRequest"
          }
        },
        "required": [
          "saleId",
          "inquiryId",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingSaleInquiryComment.IRequest": {
            "description": "Request of the comments with pagination and searching/sorting options.",
            "type": "object",
            "properties": {
              "search": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingSaleInquiryComment.IRequest.ISearch"
                  }
                ]
              },
              "sort": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "-created_at",
                        "+created_at"
                      ]
                    }
                  }
                ]
              },
              "page": {
                "title": "Page number",
                "description": "Page number.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Limitation of records per a page",
                "description": "Limitation of records per a page.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingSaleInquiryComment.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "name": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "nickname": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "body": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            "required": []
          }
        }
      },
      "description": "List up every inquiry comments.\n\nList up every {@link IShoppingSaleInquiryComment inquiry comments} of a\n{@link IShoppingSaleQuestion question} or {@link IShoppingSaleReview review}\nwith {@link IPage pagination}.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingSaleInquiryComment.IRequest.search search condition} in the\nrequest body. Also, it is possible to customize sequence order of records\nby configuring {@link IShoppingSaleInquiryComment.IRequest.sort sort condition}.\n\nBy the way, if you're a {@link IShoppingSeller seller}, you can only access\nto the your own {@link IShoppingSale sale}'s inquiries. Otherwise, you\ncan access to every inquiries of the sales."
    },
    {
      "name": "shoppings_sellers_sales_reviews_comments_at",
      "parameters": {
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "inquiryId": {
            "description": " Belonged inquiry's {@link IShoppingSaleInquiry.id }\n\n\n@format uuid",
            "type": "string"
          },
          "id": {
            "description": " Target inquiry comment's {@link IShoppingSaleInquiryComment.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "saleId",
          "inquiryId",
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get an inquiry comment info.\n\nGet a detailed {@link IShoppingSaleInquiryComment inquiry comment}\ninformation of a {@link IShoppingSaleQuestion question} or\n{@link IShoppingSaleReview review}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s inquiry comment.\nOtherwise, you can access to every inquiry comments of the sales."
    },
    {
      "name": "shoppings_sellers_sales_reviews_comments_update",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Update info of the inquiry comment",
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "inquiryId": {
            "description": " Belonged inquiry's {@link IShoppingSaleInquiry.id }\n\n\n@format uuid",
            "type": "string"
          },
          "id": {
            "description": " Target inquiry comment's {@link IShoppingSaleInquiryComment.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingSaleInquiryComment.ICreate"
          }
        },
        "required": [
          "saleId",
          "inquiryId",
          "id",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingSaleInquiryComment.ICreate": {
            "description": "Creation information of the comment.",
            "type": "object",
            "properties": {
              "format": {
                "title": "Format of body",
                "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`.",
                "type": "string",
                "enum": [
                  "html",
                  "md",
                  "txt"
                ]
              },
              "body": {
                "title": "Content body of comment",
                "description": "Content body of comment.",
                "type": "string"
              },
              "files": {
                "title": "List of attachment files",
                "description": "List of attachment files.",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/IAttachmentFile.ICreate"
                }
              }
            },
            "required": [
              "format",
              "body",
              "files"
            ]
          },
          "IAttachmentFile.ICreate": {
            "type": "object",
            "properties": {
              "name": {
                "title": "File name, except extension",
                "description": "File name, except extension.\n\nIf there's file `.gitignore`, then its name is an empty string.\n\n\n@maxLength 255",
                "type": "string"
              },
              "extension": {
                "title": "Extension",
                "description": "Extension.\n\nPossible to omit like `README` case.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@minLength 1\n@maxLength 8"
                  }
                ]
              },
              "url": {
                "title": "URL path of the real file",
                "description": "URL path of the real file.\n\n\n@format uri\n@contentMediaType image/*",
                "type": "string"
              }
            },
            "required": [
              "name",
              "extension",
              "url"
            ]
          }
        }
      },
      "description": "Update an inquiry comment.\n\nUpdate an {@link IShoppingSaleInquiryComment inquiry comment} to a specific\n{@link IShoppingSaleQuestion question} or {@link IShoppingSaleReview review}.\n\nBy the way, as is the general policy of this shopping mall regarding\ncomments, modifying a comment does not actually change the existing content.\nModified content is accumulated and recorded in the existing comment record\nas a new {@link IShoppingSaleInquiryComment.ISnapshot snapshot}. And this\nis made public to everyone, who can read this inquiry comment.\n\nThis is to prevent customers or sellers from modifying their comments and\nmanipulating the circumstances due to the nature of e-commerce, where\ndisputes easily arise. That is, to preserve evidence."
    },
    {
      "name": "shoppings_sellers_sales_reviews_index",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Request info of pagination, searching and sorting",
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingSaleReview.IRequest"
          }
        },
        "required": [
          "saleId",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingSaleReview.IRequest": {
            "description": "Request of summarized information with pagination searching/sorting options.",
            "type": "object",
            "properties": {
              "search": {
                "title": "Search conditions",
                "description": "Search conditions.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingSaleReview.IRequest.ISearch"
                  }
                ]
              },
              "sort": {
                "title": "Sorting conditions",
                "description": "Sorting conditions.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "-nickname",
                        "-answered_at",
                        "-created_at",
                        "-updated_at",
                        "-title",
                        "-score",
                        "+nickname",
                        "+answered_at",
                        "+created_at",
                        "+updated_at",
                        "+title",
                        "+score"
                      ]
                    }
                  }
                ]
              },
              "page": {
                "title": "Page number",
                "description": "Page number.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Limitation of records per a page",
                "description": "Limitation of records per a page.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingSaleReview.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "name": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "nickname": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "answered": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "title": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "body": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "title_or_body": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "from": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format date-time"
                  }
                ]
              },
              "to": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format date-time"
                  }
                ]
              },
              "minimum": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number",
                    "description": "@minimum 0\n@maximum 100"
                  }
                ]
              },
              "maximum": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number",
                    "description": "@minimum 0\n@maximum 100"
                  }
                ]
              }
            },
            "required": []
          }
        }
      },
      "description": "List up every summarized reviews.\n\nList up every {@link IShoppingSaleReview.ISummary summarized reviews} of a\n{@link IShoppingSale sale}.\n\nAs you can see, returned reviews are summarized, not detailed. If you want\nto get the detailed information of a review, use {@link adridges} function\nor {@link at} function for each article.\n\nAlso, returned review has {@link IShoppingSaleReview.ISummary.answer}\nproperty which means the formal answer from the {@link IShoppingSeller}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s reviews. Otherwise,\nyou can access to every reviews of the sales.\n\nBy the way, if you want, you can limit the result by configuring\n{@link IShoppingSaleReview.IRequest.search search condition} in the\nrequest body. Also, it is possible to customize sequence order of records\nby configuring {@link IShoppingSaleReview.IRequest.sort sort condition}."
    },
    {
      "name": "shoppings_sellers_sales_reviews_abridges",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Request info of pagination, searching and sorting",
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingSaleReview.IRequest"
          }
        },
        "required": [
          "saleId",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingSaleReview.IRequest": {
            "description": "Request of summarized information with pagination searching/sorting options.",
            "type": "object",
            "properties": {
              "search": {
                "title": "Search conditions",
                "description": "Search conditions.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingSaleReview.IRequest.ISearch"
                  }
                ]
              },
              "sort": {
                "title": "Sorting conditions",
                "description": "Sorting conditions.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "-nickname",
                        "-answered_at",
                        "-created_at",
                        "-updated_at",
                        "-title",
                        "-score",
                        "+nickname",
                        "+answered_at",
                        "+created_at",
                        "+updated_at",
                        "+title",
                        "+score"
                      ]
                    }
                  }
                ]
              },
              "page": {
                "title": "Page number",
                "description": "Page number.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Limitation of records per a page",
                "description": "Limitation of records per a page.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingSaleReview.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "name": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "nickname": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "answered": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "title": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "body": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "title_or_body": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "from": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format date-time"
                  }
                ]
              },
              "to": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "description": "@format date-time"
                  }
                ]
              },
              "minimum": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number",
                    "description": "@minimum 0\n@maximum 100"
                  }
                ]
              },
              "maximum": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number",
                    "description": "@minimum 0\n@maximum 100"
                  }
                ]
              }
            },
            "required": []
          }
        }
      },
      "description": "List up every abridged reviews.\n\nList up every {@link IShoppingSaleReview.IAbridge abridged reviews} of\na {@link IShoppingSale sale}.\n\nAs you can see, returned reviews are abridged, not detailed. If you want\nto get the detailed information of a review, use {@link at} function\nfor each article.\n\nAlso, returned review has {@link IShoppingSaleReview.IAridge.answer}\nproperty which means the formal answer from the {@link IShoppingSeller}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s reviews. Otherwise,\nyou can access to every reviews of the sales.\n\nBy the way, if you want, you can limit the result by configuring\n{@link IShoppingSaleReview.IRequest.search search condition} in the\nrequest body. Also, it is possible to customize sequence order of records\nby configuring {@link IShoppingSaleReview.IRequest.sort sort condition}."
    },
    {
      "name": "shoppings_sellers_sales_reviews_at",
      "parameters": {
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "id": {
            "description": " Target review's {@link IShoppingSaleReview.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "saleId",
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a review info.\n\nGet a detailed {@link IShoppingSaleReview review} information of a\n{@link IShoppingSale sale}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s review. Otherwise\nyou are a {@link IShoppingCustomer customer}, you can access to every\nreviews of the sales."
    },
    {
      "name": "shoppings_sellers_sales_snapshots_replica",
      "parameters": {
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "id": {
            "description": " Target snapshot's {@link IShoppingSaleSnapshot.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "saleId",
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get replica of a snapshot.\n\nGet a {@link IShoppingSale.ICreate} typed info of the target\n{@link IShoppingSaleSnapshot snapshot} record for replication.\n\nIt would be useful for creating a new replication {@link IShoppingSale sale}\nfrom the old snapshot."
    },
    {
      "name": "shoppings_sellers_sales_snapshots_index",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Requestion info of pagination",
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Target sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IPage.IRequest"
          }
        },
        "required": [
          "saleId",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IPage.IRequest": {
            "description": "Page request data",
            "type": "object",
            "properties": {
              "page": {
                "title": "Page number",
                "description": "Page number.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Limitation of records per a page",
                "description": "Limitation of records per a page.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          }
        }
      },
      "description": "List up every snapshots.\n\nWhenever {@link IShoppingSeller seller} updates a\n{@link IShoppingSale sale}, the sale record is not updated but a new\n{@link IShoppingSaleSnapshot snapshot} record is created to keep the\nintegrity of the sale history. This API function is for listing up\nsuch snapshot records.\n\nAlso, as you can see from the return type, returned snapshots are\nsummarized, not detailed. If you want to get the detailed information\nof a snapshot, use {@link at} or {@link flipo} function for each snapshot.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s snapshots. Otherwise,\nyou can access to every snapshots of the sales even though the sale has\nbeen closed or suspended."
    },
    {
      "name": "shoppings_sellers_sales_snapshots_at",
      "parameters": {
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "id": {
            "description": " Target snapshot's {@link IShoppingSaleSnapshot.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "saleId",
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a snapshot info.\n\nGet a {@link IShoppingSaleSnapshot snapshot} with detailed information.\n\nAs you can see from the return type, returned snapshot does not contain\nthe {@link IShoppingSale sale} info. If you want to get the sale info,\nuse the {@link flip} function instead.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s snapshots. Otherwise,\nyou can access to every snapshots of the sales even though the sale has\nbeen closed or suspended."
    },
    {
      "name": "shoppings_sellers_sales_snapshots_flip",
      "parameters": {
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "id": {
            "description": " Target snapshot's {@link IShoppingSaleSnapshot.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "saleId",
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a flipped snapshot info.\n\nGet a {@link IShoppingSale sale} info of a flipped snapshot.\n\nAs you can see from the return type, this function returns the\n{@link IShoppingSale sale} info. By the way, the sale info is not the\nlatest one, but a flipped info in the snapshot side.\n\nAlso, if you're a {@link IShoppingSeller seller}, you can only access to\nthe your own {@link IShoppingSale sale}'s snapshots. Otherwise, you can\naccess to every snapshots of the sales even though the sale has been\nclosed or suspended."
    },
    {
      "name": "shoppings_sellers_sales_units_stocks_supplements_create",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Create info of the supplement",
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "unitId": {
            "description": " Belonged unit's {@link IShoppingSaleUnit.id }\n\n\n@format uuid",
            "type": "string"
          },
          "stockId": {
            "description": " Target stock's {@link IShoppingSaleUnitStock.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingSaleUnitStockSupplement.ICreate"
          }
        },
        "required": [
          "saleId",
          "unitId",
          "stockId",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingSaleUnitStockSupplement.ICreate": {
            "description": "Creation information of the supplement.",
            "type": "object",
            "properties": {
              "value": {
                "title": "Supplemented quantity",
                "description": "Supplemented quantity.\n\n\n@minimum 0",
                "type": "integer"
              }
            },
            "required": [
              "value"
            ]
          }
        }
      },
      "description": "Create a supplement.\n\nCreate a {@link IShoppingSaleUnitStockSupplement supplement history} of a\nspecific {@link IShoppingSaleUnitStock stock}.\n\nTherefore, {@link IShoppingSaleUnitStockInventory.income inventory} of the\ntarget stock will be increased by the\n{@link IShoppingSaleUnitStockSupplement.value supplement's value}."
    },
    {
      "name": "shoppings_sellers_sales_units_stocks_supplements_index",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Request info of pagination, searching and sorting",
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "unitId": {
            "description": " Belonged unit's {@link IShoppingSaleUnit.id }\n\n\n@format uuid",
            "type": "string"
          },
          "stockId": {
            "description": " Target stock's {@link IShoppingSaleUnitStock.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingSaleUnitStockSupplement.IRequest"
          }
        },
        "required": [
          "saleId",
          "unitId",
          "stockId",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingSaleUnitStockSupplement.IRequest": {
            "description": "Request information of the stock supplement list.",
            "type": "object",
            "properties": {
              "sort": {
                "title": "Sortable columns",
                "description": "Sortable columns.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "-created_at",
                        "+created_at"
                      ]
                    }
                  }
                ]
              },
              "page": {
                "title": "Page number",
                "description": "Page number.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Limitation of records per a page",
                "description": "Limitation of records per a page.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          }
        }
      },
      "description": "List up every supplements.\n\nList up every {@link IShoppingSaleUnitStockSupplement supplement histories}\nof a specific {@link IShoppingSaleUnitStock stock}.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingSaleUnitStockSupplement.IRequest.search search condition} in\nthe request body. Also, it is possible to customize sequence order of\nrecords by configuring {@link IShoppingSaleUnitStockSupplement.IRequest.sort}\nproperty."
    },
    {
      "name": "shoppings_sellers_sales_units_stocks_supplements_update",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Update info (quantity) of the supplement",
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "unitId": {
            "description": " Belonged unit's {@link IShoppingSaleUnit.id }\n\n\n@format uuid",
            "type": "string"
          },
          "stockId": {
            "description": " Target stock's {@link IShoppingSaleUnitStock.id }\n\n\n@format uuid",
            "type": "string"
          },
          "id": {
            "description": " Target supplement's {@link IShoppingSaleUnitStockSupplement.id }\n\n\n@format uuid",
            "type": "string"
          },
          "body": {
            "$ref": "#/$defs/IShoppingSaleUnitStockSupplement.ICreate"
          }
        },
        "required": [
          "saleId",
          "unitId",
          "stockId",
          "id",
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingSaleUnitStockSupplement.ICreate": {
            "description": "Creation information of the supplement.",
            "type": "object",
            "properties": {
              "value": {
                "title": "Supplemented quantity",
                "description": "Supplemented quantity.\n\n\n@minimum 0",
                "type": "integer"
              }
            },
            "required": [
              "value"
            ]
          }
        }
      },
      "description": "Update a supplement.\n\nUpdate quantity value of a {@link IShoppingSaleUnitStockSupplement supplement}\nof a specific {@link IShoppingSaleUnitStock stock}.\n\nTherefore, {@link IShoppingSaleUnitStockInventory.income inventory} of the\ntarget stock will be changed by the\n{@link IShoppingSaleUnitStockSupplement.value supplement's value}."
    },
    {
      "name": "shoppings_sellers_sales_units_stocks_supplements_erase",
      "parameters": {
        "type": "object",
        "properties": {
          "saleId": {
            "description": " Belonged sale's {@link IShoppingSale.id }\n\n\n@format uuid",
            "type": "string"
          },
          "unitId": {
            "description": " Belonged unit's {@link IShoppingSaleUnit.id }\n\n\n@format uuid",
            "type": "string"
          },
          "stockId": {
            "description": " Target stock's {@link IShoppingSaleUnitStock.id }\n\n\n@format uuid",
            "type": "string"
          },
          "id": {
            "description": " Target supplement's {@link IShoppingSaleUnitStockSupplement.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "saleId",
          "unitId",
          "stockId",
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Erase a supplement.\n\nErase a {@link IShoppingSaleUnitStockSupplement supplement} of a specific\n{@link IShoppingSaleUnitStock stock}.\n\nTherefore, {@link IShoppingSaleUnitStockInventory.income inventory} of the\ntarget stock will be decreased by the\n{@link IShoppingSaleUnitStockSupplement.value supplement's value}."
    },
    {
      "name": "shoppings_sellers_systematic_channels_categories_index",
      "parameters": {
        "type": "object",
        "properties": {
          "channelCode": {
            "description": " Belonged channel's {@link IShoppingChannel.code }",
            "type": "string"
          }
        },
        "required": [
          "channelCode"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "List up every categories with children records.\n\nList up every {@link IShoppingChannelCategory.IHierarchical categories}\nof a {@link IShoppingChannel channel} with pagination. Returned categories\ncontain children categories, too.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingChannelCategory.IRequest.search search condition} in the\nrequest body. Also, it is possible to customize sequence order of records\nby configuring {@link IShoppingChannelCategory.IRequest.sort sort condition}."
    },
    {
      "name": "shoppings_sellers_systematic_channels_categories_at",
      "parameters": {
        "type": "object",
        "properties": {
          "channelCode": {
            "description": " Belonged channel's {@link IShoppingChannel.code }",
            "type": "string"
          },
          "id": {
            "description": " Target category's {@link IShoppingChannelCategory.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "channelCode",
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a category info.\n\nGet a detailed {@link IShoppingChannelCategory category} information.\n\nReturned category contains hierarchical children categories, and also\ncontains the recursive parent categories, too."
    },
    {
      "name": "shoppings_sellers_systematic_channels_categories_invert",
      "parameters": {
        "type": "object",
        "properties": {
          "channelCode": {
            "description": " Belonged channel's {@link IShoppingChannel.code }",
            "type": "string"
          },
          "id": {
            "description": " Target category's {@link IShoppingChannelCategory.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "channelCode",
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a category info of inverted.\n\nGet a inverted {@link IShoppingChannelCategory.IInvert category} information.\n\nReturned category contains the recursive parent categories, but not contains\nthe hierarchical children categories."
    },
    {
      "name": "shoppings_sellers_systematic_channels_index",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Request info of pagination, searching and sorting",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingChannel.IRequest"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingChannel.IRequest": {
            "description": "Request of the channels with pagination and searching/sorting options.",
            "type": "object",
            "properties": {
              "search": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingChannel.IRequest.ISearch"
                  }
                ]
              },
              "sort": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "-channel.code",
                        "-channel.name",
                        "-channel.created_at",
                        "+channel.code",
                        "+channel.name",
                        "+channel.created_at"
                      ]
                    }
                  }
                ]
              },
              "page": {
                "title": "Page number",
                "description": "Page number.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Limitation of records per a page",
                "description": "Limitation of records per a page.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingChannel.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "code": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "name": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            "required": []
          }
        }
      },
      "description": "List up every channels.\n\nList up every {@link IShoppingChannel channels} with pagination.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingChannel.IRequest.search search condition} in the request\nbody. Also, it is possible to customize sequence order of records by\nconfiguring {@link IShoppingChannel.IRequest.sort sort condition}."
    },
    {
      "name": "shoppings_sellers_systematic_channels_hierarchical",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Request info of pagination, searching and sorting",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingChannel.IRequest"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingChannel.IRequest": {
            "description": "Request of the channels with pagination and searching/sorting options.",
            "type": "object",
            "properties": {
              "search": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingChannel.IRequest.ISearch"
                  }
                ]
              },
              "sort": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "-channel.code",
                        "-channel.name",
                        "-channel.created_at",
                        "+channel.code",
                        "+channel.name",
                        "+channel.created_at"
                      ]
                    }
                  }
                ]
              },
              "page": {
                "title": "Page number",
                "description": "Page number.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Limitation of records per a page",
                "description": "Limitation of records per a page.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingChannel.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "code": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "name": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            "required": []
          }
        }
      },
      "description": "List up every channels with nested categories.\n\nList up every {@link IShoppingChannel.IHierarchical channels} with\n{@link IPage pagination}. Returned channels contain nested hierarchical\n{@link IShoppingChannelCategory.IHierarchical categories}.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingChannel.IRequest.search search condition} in the request\nbody. Also, it is possible to customize sequence order of records by\nconfiguring {@link IShoppingChannel.IRequest.sort sort condition}."
    },
    {
      "name": "shoppings_sellers_systematic_channels_at",
      "parameters": {
        "type": "object",
        "properties": {
          "id": {
            "description": " Target channel's {@link IShoppingChannel.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a channel info.\n\nGet a detailed {@link IShoppingChannel.IHierarchical channel} information.\n\nReturned channel instance also contains the nested\n{@link IShoppingChannelCategory.IHierarchical hierarchical category}\ninformation."
    },
    {
      "name": "shoppings_sellers_systematic_channels_get",
      "parameters": {
        "type": "object",
        "properties": {
          "code": {
            "description": " Target channel's {@link IShoppingChannel.code }",
            "type": "string"
          }
        },
        "required": [
          "code"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a channel info by its code.\n\nGet a detailed {@link IShoppingChannel.IHierarchical channel} information\nby its code.\n\nReturned channel instance also contains the nested\n{@link IShoppingChannelCategory.IHierarchical hierarchical category}\ninformation."
    },
    {
      "name": "shoppings_sellers_systematic_sections_index",
      "parameters": {
        "description": "### Description of {@link body} property:\n\n> Request info of pagination, searching and sorting",
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/$defs/IShoppingSection.IRequest"
          }
        },
        "required": [
          "body"
        ],
        "additionalProperties": false,
        "$defs": {
          "IShoppingSection.IRequest": {
            "description": "Request of the sections with pagination and searching/sorting options.",
            "type": "object",
            "properties": {
              "search": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/$defs/IShoppingSection.IRequest.ISearch"
                  }
                ]
              },
              "sort": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "-section.code",
                        "-section.name",
                        "-section.created_at",
                        "+section.code",
                        "+section.name",
                        "+section.created_at"
                      ]
                    }
                  }
                ]
              },
              "page": {
                "title": "Page number",
                "description": "Page number.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              },
              "limit": {
                "title": "Limitation of records per a page",
                "description": "Limitation of records per a page.",
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "description": "@minimum 0"
                  }
                ]
              }
            },
            "required": []
          },
          "IShoppingSection.IRequest.ISearch": {
            "type": "object",
            "properties": {
              "code": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "name": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            "required": []
          }
        }
      },
      "description": "List up every sections.\n\nList up every {@link IShoppingSection sections} with pagination.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingSection.IRequest.search search condition} in the request\nbody. Also, it is possible to customize sequence order of records by\nconfiguring {@link IShoppingSection.IRequest.sort sort condition}."
    },
    {
      "name": "shoppings_sellers_systematic_sections_at",
      "parameters": {
        "type": "object",
        "properties": {
          "id": {
            "description": " Target section's {@link IShoppingSection.id }\n\n\n@format uuid",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a section info.\n\nGet a detailed {@link IShoppingSection section} information."
    },
    {
      "name": "shoppings_sellers_systematic_sections_get",
      "parameters": {
        "type": "object",
        "properties": {
          "code": {
            "description": " Target section's {@link IShoppingSection.code }",
            "type": "string"
          }
        },
        "required": [
          "code"
        ],
        "additionalProperties": false,
        "$defs": {}
      },
      "description": "Get a section info by its code.\n\nGet a detailed {@link IShoppingSection section} information by its code."
    }
  ],
  "options": {
    "reference": true,
    "strict": false,
    "maxLength": null
  },
  "errors": []
}